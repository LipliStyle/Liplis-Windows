<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CoreTweet</name>
    </assembly>
    <members>
        <member name="T:CoreTweet.AccountActivity.AccountActivityEnvironment">
            <summary>
            Provides a set of methods for using a dev environment of Premium Account Activity API.
            </summary>
        </member>
        <member name="P:CoreTweet.AccountActivity.AccountActivityEnvironment.EnvName">
            <summary>
            Gets or sets the the name of a dev environment.
            </summary>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnvironment.PostWebhooks(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Registers a webhook URL for all event types.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> url (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The webhook URL object.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnvironment.PostWebhooks(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Registers a webhook URL for all event types.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> url (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The webhook URL object.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnvironment.PostWebhooks(System.Object)">
            <summary>
            <para>Registers a webhook URL for all event types.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> url (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The webhook URL object.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnvironment.PostWebhooks(System.String)">
            <summary>
            <para>Registers a webhook URL for all event types.</para>
            </summary>
            <param name="url">required.</param>
            <returns>The webhook URL object.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnvironment.PostWebhooksAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Registers a webhook URL for all event types.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> url (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The webhook URL object.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnvironment.PostWebhooksAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Registers a webhook URL for all event types.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> url (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The webhook URL object.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnvironment.PostWebhooksAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Registers a webhook URL for all event types.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> url (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The webhook URL object.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnvironment.PostWebhooksAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Registers a webhook URL for all event types.</para>
            </summary>
            <param name="url">required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The webhook URL object.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnvironment.GetWebhooks(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns all webhook URLs and their statuses for the environment.</para>
            <para>Available parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list of environments object.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnvironment.GetWebhooks(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns all webhook URLs and their statuses for the environment.</para>
            <para>Available parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list of environments object.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnvironment.GetWebhooks(System.Object)">
            <summary>
            <para>Returns all webhook URLs and their statuses for the environment.</para>
            <para>Available parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list of environments object.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnvironment.GetWebhooks">
            <summary>
            <para>Returns all webhook URLs and their statuses for the environment.</para>
            </summary>
            <returns>The list of environments object.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnvironment.GetWebhooksAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns all webhook URLs and their statuses for the environment.</para>
            <para>Available parameters:</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list of environments object.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnvironment.GetWebhooksAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns all webhook URLs and their statuses for the environment.</para>
            <para>Available parameters:</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of environments object.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnvironment.GetWebhooksAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns all webhook URLs and their statuses for the environment.</para>
            <para>Available parameters:</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of environments object.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnvironment.GetWebhooksAsync(System.Threading.CancellationToken)">
            <summary>
            <para>Returns all webhook URLs and their statuses for the environment.</para>
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of environments object.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnvironment.PutWebhooks(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Triggers the challenge response check (CRC) for the given enviroments webhook for all activites.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> webhook_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnvironment.PutWebhooks(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Triggers the challenge response check (CRC) for the given enviroments webhook for all activites.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> webhook_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnvironment.PutWebhooks(System.Object)">
            <summary>
            <para>Triggers the challenge response check (CRC) for the given enviroments webhook for all activites.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> webhook_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnvironment.PutWebhooks(System.String)">
            <summary>
            <para>Triggers the challenge response check (CRC) for the given enviroments webhook for all activites.</para>
            </summary>
            <param name="webhook_id">required.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnvironment.PutWebhooksAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Triggers the challenge response check (CRC) for the given enviroments webhook for all activites.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> webhook_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnvironment.PutWebhooksAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Triggers the challenge response check (CRC) for the given enviroments webhook for all activites.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> webhook_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnvironment.PutWebhooksAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Triggers the challenge response check (CRC) for the given enviroments webhook for all activites.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> webhook_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnvironment.PutWebhooksAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Triggers the challenge response check (CRC) for the given enviroments webhook for all activites.</para>
            </summary>
            <param name="webhook_id">required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnvironment.DeleteWebhooks(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Removes the webhook from the provided application’s all activities configuration.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> webhook_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnvironment.DeleteWebhooks(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Removes the webhook from the provided application’s all activities configuration.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> webhook_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnvironment.DeleteWebhooks(System.Object)">
            <summary>
            <para>Removes the webhook from the provided application’s all activities configuration.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> webhook_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnvironment.DeleteWebhooks(System.String)">
            <summary>
            <para>Removes the webhook from the provided application’s all activities configuration.</para>
            </summary>
            <param name="webhook_id">required.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnvironment.DeleteWebhooksAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Removes the webhook from the provided application’s all activities configuration.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> webhook_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnvironment.DeleteWebhooksAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Removes the webhook from the provided application’s all activities configuration.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> webhook_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnvironment.DeleteWebhooksAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Removes the webhook from the provided application’s all activities configuration.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> webhook_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnvironment.DeleteWebhooksAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Removes the webhook from the provided application’s all activities configuration.</para>
            </summary>
            <param name="webhook_id">required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnvironment.PostSubscriptions(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Subscribes the provided application to all events for the provided environment for all message types.</para>
            <para>Available parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnvironment.PostSubscriptions(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Subscribes the provided application to all events for the provided environment for all message types.</para>
            <para>Available parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnvironment.PostSubscriptions(System.Object)">
            <summary>
            <para>Subscribes the provided application to all events for the provided environment for all message types.</para>
            <para>Available parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnvironment.PostSubscriptions">
            <summary>
            <para>Subscribes the provided application to all events for the provided environment for all message types.</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnvironment.PostSubscriptionsAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Subscribes the provided application to all events for the provided environment for all message types.</para>
            <para>Available parameters:</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnvironment.PostSubscriptionsAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Subscribes the provided application to all events for the provided environment for all message types.</para>
            <para>Available parameters:</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnvironment.PostSubscriptionsAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Subscribes the provided application to all events for the provided environment for all message types.</para>
            <para>Available parameters:</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnvironment.PostSubscriptionsAsync(System.Threading.CancellationToken)">
            <summary>
            <para>Subscribes the provided application to all events for the provided environment for all message types.</para>
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnvironment.GetSubscriptions(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Provides a way to determine if a webhook configuration is subscribed to the provided user’s events.</para>
            <para>Available parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnvironment.GetSubscriptions(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Provides a way to determine if a webhook configuration is subscribed to the provided user’s events.</para>
            <para>Available parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnvironment.GetSubscriptions(System.Object)">
            <summary>
            <para>Provides a way to determine if a webhook configuration is subscribed to the provided user’s events.</para>
            <para>Available parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnvironment.GetSubscriptions">
            <summary>
            <para>Provides a way to determine if a webhook configuration is subscribed to the provided user’s events.</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnvironment.GetSubscriptionsAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Provides a way to determine if a webhook configuration is subscribed to the provided user’s events.</para>
            <para>Available parameters:</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnvironment.GetSubscriptionsAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Provides a way to determine if a webhook configuration is subscribed to the provided user’s events.</para>
            <para>Available parameters:</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnvironment.GetSubscriptionsAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Provides a way to determine if a webhook configuration is subscribed to the provided user’s events.</para>
            <para>Available parameters:</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnvironment.GetSubscriptionsAsync(System.Threading.CancellationToken)">
            <summary>
            <para>Provides a way to determine if a webhook configuration is subscribed to the provided user’s events.</para>
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnvironment.DeleteSubscriptions(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Deactivates subscription(s) for the provided user context and application for all activities.</para>
            <para>Available parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnvironment.DeleteSubscriptions(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Deactivates subscription(s) for the provided user context and application for all activities.</para>
            <para>Available parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnvironment.DeleteSubscriptions(System.Object)">
            <summary>
            <para>Deactivates subscription(s) for the provided user context and application for all activities.</para>
            <para>Available parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnvironment.DeleteSubscriptions">
            <summary>
            <para>Deactivates subscription(s) for the provided user context and application for all activities.</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnvironment.DeleteSubscriptionsAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Deactivates subscription(s) for the provided user context and application for all activities.</para>
            <para>Available parameters:</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnvironment.DeleteSubscriptionsAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Deactivates subscription(s) for the provided user context and application for all activities.</para>
            <para>Available parameters:</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnvironment.DeleteSubscriptionsAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Deactivates subscription(s) for the provided user context and application for all activities.</para>
            <para>Available parameters:</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnvironment.DeleteSubscriptionsAsync(System.Threading.CancellationToken)">
            <summary>
            <para>Deactivates subscription(s) for the provided user context and application for all activities.</para>
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnvironment.SubscriptionsList(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a list of the current All Activity type subscriptions.</para>
            <para>Available parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list of subscriptions object.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnvironment.SubscriptionsList(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns a list of the current All Activity type subscriptions.</para>
            <para>Available parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list of subscriptions object.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnvironment.SubscriptionsList(System.Object)">
            <summary>
            <para>Returns a list of the current All Activity type subscriptions.</para>
            <para>Available parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list of subscriptions object.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnvironment.SubscriptionsList">
            <summary>
            <para>Returns a list of the current All Activity type subscriptions.</para>
            </summary>
            <returns>The list of subscriptions object.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnvironment.SubscriptionsListAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a list of the current All Activity type subscriptions.</para>
            <para>Available parameters:</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list of subscriptions object.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnvironment.SubscriptionsListAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a list of the current All Activity type subscriptions.</para>
            <para>Available parameters:</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of subscriptions object.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnvironment.SubscriptionsListAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns a list of the current All Activity type subscriptions.</para>
            <para>Available parameters:</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of subscriptions object.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnvironment.SubscriptionsListAsync(System.Threading.CancellationToken)">
            <summary>
            <para>Returns a list of the current All Activity type subscriptions.</para>
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of subscriptions object.</returns>
        </member>
        <member name="T:CoreTweet.AccountActivity.AccountActivityPremiumApi">
            <summary>
            Provides a set of methods for Premium Account Activity API.
            </summary>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityPremiumApi.Webhooks(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns all environments, webhook URLs and their statuses for the authenticating app.</para>
            <para>Available parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list of environments object.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityPremiumApi.Webhooks(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns all environments, webhook URLs and their statuses for the authenticating app.</para>
            <para>Available parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list of environments object.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityPremiumApi.Webhooks(System.Object)">
            <summary>
            <para>Returns all environments, webhook URLs and their statuses for the authenticating app.</para>
            <para>Available parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list of environments object.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityPremiumApi.Webhooks">
            <summary>
            <para>Returns all environments, webhook URLs and their statuses for the authenticating app.</para>
            </summary>
            <returns>The list of environments object.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityPremiumApi.WebhooksAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns all environments, webhook URLs and their statuses for the authenticating app.</para>
            <para>Available parameters:</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list of environments object.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityPremiumApi.WebhooksAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns all environments, webhook URLs and their statuses for the authenticating app.</para>
            <para>Available parameters:</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of environments object.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityPremiumApi.WebhooksAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns all environments, webhook URLs and their statuses for the authenticating app.</para>
            <para>Available parameters:</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of environments object.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityPremiumApi.WebhooksAsync(System.Threading.CancellationToken)">
            <summary>
            <para>Returns all environments, webhook URLs and their statuses for the authenticating app.</para>
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of environments object.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityPremiumApi.SubscriptionsCount(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the count of subscriptions that are currently active on your account for all activities.</para>
            <para>Note that the /count endpoint requires application-only OAuth, so that you should make requests using a bearer token instead of user context.</para>
            <para>Available parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The count of subscriptions.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityPremiumApi.SubscriptionsCount(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns the count of subscriptions that are currently active on your account for all activities.</para>
            <para>Note that the /count endpoint requires application-only OAuth, so that you should make requests using a bearer token instead of user context.</para>
            <para>Available parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The count of subscriptions.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityPremiumApi.SubscriptionsCount(System.Object)">
            <summary>
            <para>Returns the count of subscriptions that are currently active on your account for all activities.</para>
            <para>Note that the /count endpoint requires application-only OAuth, so that you should make requests using a bearer token instead of user context.</para>
            <para>Available parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The count of subscriptions.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityPremiumApi.SubscriptionsCount">
            <summary>
            <para>Returns the count of subscriptions that are currently active on your account for all activities.</para>
            <para>Note that the /count endpoint requires application-only OAuth, so that you should make requests using a bearer token instead of user context.</para>
            </summary>
            <returns>The count of subscriptions.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityPremiumApi.SubscriptionsCountAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the count of subscriptions that are currently active on your account for all activities.</para>
            <para>Note that the /count endpoint requires application-only OAuth, so that you should make requests using a bearer token instead of user context.</para>
            <para>Available parameters:</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The count of subscriptions.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityPremiumApi.SubscriptionsCountAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns the count of subscriptions that are currently active on your account for all activities.</para>
            <para>Note that the /count endpoint requires application-only OAuth, so that you should make requests using a bearer token instead of user context.</para>
            <para>Available parameters:</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The count of subscriptions.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityPremiumApi.SubscriptionsCountAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns the count of subscriptions that are currently active on your account for all activities.</para>
            <para>Note that the /count endpoint requires application-only OAuth, so that you should make requests using a bearer token instead of user context.</para>
            <para>Available parameters:</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The count of subscriptions.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityPremiumApi.SubscriptionsCountAsync(System.Threading.CancellationToken)">
            <summary>
            <para>Returns the count of subscriptions that are currently active on your account for all activities.</para>
            <para>Note that the /count endpoint requires application-only OAuth, so that you should make requests using a bearer token instead of user context.</para>
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The count of subscriptions.</returns>
        </member>
        <member name="T:CoreTweet.AccountActivity.AccountActivityApi">
            <summary>
            Provides a set of methods for the wrapper of GET/POST account_activity.
            </summary>
        </member>
        <member name="T:CoreTweet.AccountActivity.ActivityEventType">
            <summary>
            Provides event types in Twitter Account Activity API.
            </summary>
        </member>
        <member name="F:CoreTweet.AccountActivity.ActivityEventType.TweetCreateEvents">
            <summary>
            Tweet status payload when any of the following actions
            are taken by or to the subscription user:
            Tweets, Retweets, Replies, @mentions, QuoteTweets
            </summary>
        </member>
        <member name="F:CoreTweet.AccountActivity.ActivityEventType.FavoriteEvents">
            <summary>
            Favorite (like) event status with the user and target.
            </summary>
        </member>
        <member name="F:CoreTweet.AccountActivity.ActivityEventType.FollowEvents">
            <summary>
            Follow event with the user and target.
            </summary>
        </member>
        <member name="F:CoreTweet.AccountActivity.ActivityEventType.BlockEvents">
            <summary>
            Block event with the user and target.
            </summary>
        </member>
        <member name="F:CoreTweet.AccountActivity.ActivityEventType.MuteEvents">
            <summary>
            Mute event with the user and target.
            </summary>
        </member>
        <member name="F:CoreTweet.AccountActivity.ActivityEventType.UserEvent">
            <summary>
            Revoke events sent when a user removes application authorization
            and subscription is automatically deleted.
            </summary>
        </member>
        <member name="F:CoreTweet.AccountActivity.ActivityEventType.DirectMessageEvents">
            <summary>
            Direct message status with the user and target.
            </summary>
        </member>
        <member name="F:CoreTweet.AccountActivity.ActivityEventType.DirectMessageIndicateTypingEvents">
            <summary>
            Direct message typing event with the user and target.
            </summary>
        </member>
        <member name="F:CoreTweet.AccountActivity.ActivityEventType.DirectMessageMarkReadEvents">
            <summary>
            Direct message read event with the user and target.
            </summary>
        </member>
        <member name="F:CoreTweet.AccountActivity.ActivityEventType.TweetDeleteEvents">
            <summary>
            Notice of deleted Tweets to make it easier to maintain compliance.
            </summary>
        </member>
        <member name="T:CoreTweet.AccountActivity.ActivityEvent">
            <summary>
            Represents an Account Activity event. This class is an abstract class.
            </summary>
        </member>
        <member name="P:CoreTweet.AccountActivity.ActivityEvent.Type">
            <summary>
            Gets the type of the event.
            </summary>
        </member>
        <member name="P:CoreTweet.AccountActivity.ActivityEvent.Json">
            <summary>
            Gets or sets the raw JSON.
            </summary>
        </member>
        <member name="M:CoreTweet.AccountActivity.ActivityEvent.GetEventType">
            <summary>
            Gets the type of the event.
            </summary>
            <returns>The type of the event.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.ActivityEvent.Parse(System.String)">
            <summary>
            Converts the JSON to a <see cref="T:CoreTweet.AccountActivity.ActivityEvent"/> object.
            </summary>
            <param name="x">The JSON value.</param>
            <returns>The <see cref="T:CoreTweet.AccountActivity.ActivityEvent"/> object.</returns>
        </member>
        <member name="T:CoreTweet.AccountActivity.UserSpecificActivityEvent">
            <summary>
            Represents an event containing the for_user_id field.
            </summary>
        </member>
        <member name="T:CoreTweet.AccountActivity.UsersInvolvingActivityEvent">
            <summary>
            Represents an event containing the users field.
            </summary>
        </member>
        <member name="T:CoreTweet.AccountActivity.AppsInvolvingActivityEvent">
            <summary>
            Represents an event containing the apps field.
            </summary>
        </member>
        <member name="T:CoreTweet.AccountActivity.TweetCreateEvents">
            <summary>
            Tweet status payload when any of the following actions
            are taken by or to the subscription user:
            Tweets, Retweets, Replies, @mentions, QuoteTweets
            </summary>
        </member>
        <member name="T:CoreTweet.AccountActivity.FavoriteEvents">
            <summary>
            Favorite (like) event status with the user and target.
            </summary>
        </member>
        <member name="T:CoreTweet.AccountActivity.TimestampEventItem">
            <summary>
            Represents an event item that has the `created_timestamp` property.
            </summary>
        </member>
        <member name="T:CoreTweet.AccountActivity.FollowEvents">
            <summary>
            Follow event with the user and target.
            </summary>
        </member>
        <member name="T:CoreTweet.AccountActivity.BlockEvents">
            <summary>
            Block event with the user and target.
            </summary>
        </member>
        <member name="T:CoreTweet.AccountActivity.MuteEvents">
            <summary>
            Mute event with the user and target.
            </summary>
        </member>
        <member name="T:CoreTweet.AccountActivity.UserEvent">
            <summary>
            Revoke events sent when a user removes application authorization and subscription is automatically deleted.
            </summary>
        </member>
        <member name="T:CoreTweet.AccountActivity.DirectMessageEvents">
            <summary>
            Direct message status with the user and target.
            </summary>
        </member>
        <member name="T:CoreTweet.AccountActivity.DirectMessageIndicateTypingEvents">
            <summary>
            Direct message typing event with the user and target.
            </summary>
        </member>
        <member name="T:CoreTweet.AccountActivity.DirectMessageMarkReadEvents">
            <summary>
            Direct message read event with the user and target.
            </summary>
        </member>
        <member name="T:CoreTweet.AccountActivity.TweetDeleteEvents">
            <summary>
            Notice of deleted Tweets to make it easier to maintain compliance.
            </summary>
        </member>
        <member name="T:CoreTweet.AccountActivity.AccountActivityEnterpriseApi">
            <summary>
            Provides a set of methods for Enterprise Account Activity API.
            </summary>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.PostWebhooks(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Registers a new webhook URL for the given application context.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> url (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The webhook URL object.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.PostWebhooks(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Registers a new webhook URL for the given application context.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> url (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The webhook URL object.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.PostWebhooks(System.Object)">
            <summary>
            <para>Registers a new webhook URL for the given application context.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> url (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The webhook URL object.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.PostWebhooks(System.String)">
            <summary>
            <para>Registers a new webhook URL for the given application context.</para>
            </summary>
            <param name="url">required.</param>
            <returns>The webhook URL object.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.PostWebhooksAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Registers a new webhook URL for the given application context.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> url (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The webhook URL object.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.PostWebhooksAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Registers a new webhook URL for the given application context.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> url (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The webhook URL object.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.PostWebhooksAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Registers a new webhook URL for the given application context.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> url (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The webhook URL object.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.PostWebhooksAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Registers a new webhook URL for the given application context.</para>
            </summary>
            <param name="url">required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The webhook URL object.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.GetWebhooks(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns all webhook URLs and their statuses for the given application.</para>
            <para>This endpoint is for application-only authorization only.</para>
            <para>Available parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list of environments object.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.GetWebhooks(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns all webhook URLs and their statuses for the given application.</para>
            <para>This endpoint is for application-only authorization only.</para>
            <para>Available parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list of environments object.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.GetWebhooks(System.Object)">
            <summary>
            <para>Returns all webhook URLs and their statuses for the given application.</para>
            <para>This endpoint is for application-only authorization only.</para>
            <para>Available parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list of environments object.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.GetWebhooks">
            <summary>
            <para>Returns all webhook URLs and their statuses for the given application.</para>
            <para>This endpoint is for application-only authorization only.</para>
            </summary>
            <returns>The list of environments object.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.GetWebhooksAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns all webhook URLs and their statuses for the given application.</para>
            <para>This endpoint is for application-only authorization only.</para>
            <para>Available parameters:</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list of environments object.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.GetWebhooksAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns all webhook URLs and their statuses for the given application.</para>
            <para>This endpoint is for application-only authorization only.</para>
            <para>Available parameters:</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of environments object.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.GetWebhooksAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns all webhook URLs and their statuses for the given application.</para>
            <para>This endpoint is for application-only authorization only.</para>
            <para>Available parameters:</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of environments object.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.GetWebhooksAsync(System.Threading.CancellationToken)">
            <summary>
            <para>Returns all webhook URLs and their statuses for the given application.</para>
            <para>This endpoint is for application-only authorization only.</para>
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of environments object.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.PutWebhooks(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Triggers the challenge response check (CRC) for the given webhook’s URL.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> webhook_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.PutWebhooks(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Triggers the challenge response check (CRC) for the given webhook’s URL.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> webhook_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.PutWebhooks(System.Object)">
            <summary>
            <para>Triggers the challenge response check (CRC) for the given webhook’s URL.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> webhook_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.PutWebhooks(System.String)">
            <summary>
            <para>Triggers the challenge response check (CRC) for the given webhook’s URL.</para>
            </summary>
            <param name="webhook_id">required.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.PutWebhooksAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Triggers the challenge response check (CRC) for the given webhook’s URL.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> webhook_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.PutWebhooksAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Triggers the challenge response check (CRC) for the given webhook’s URL.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> webhook_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.PutWebhooksAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Triggers the challenge response check (CRC) for the given webhook’s URL.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> webhook_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.PutWebhooksAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Triggers the challenge response check (CRC) for the given webhook’s URL.</para>
            </summary>
            <param name="webhook_id">required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.PostWebhooksSubscriptionsAll(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Subscribes the provided application to all events for the provided user context for all message types. </para>
            <para>After activation, all events for the requesting user will be sent to the application’s webhook via POST request.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> webhook_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.PostWebhooksSubscriptionsAll(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Subscribes the provided application to all events for the provided user context for all message types. </para>
            <para>After activation, all events for the requesting user will be sent to the application’s webhook via POST request.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> webhook_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.PostWebhooksSubscriptionsAll(System.Object)">
            <summary>
            <para>Subscribes the provided application to all events for the provided user context for all message types. </para>
            <para>After activation, all events for the requesting user will be sent to the application’s webhook via POST request.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> webhook_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.PostWebhooksSubscriptionsAll(System.String)">
            <summary>
            <para>Subscribes the provided application to all events for the provided user context for all message types. </para>
            <para>After activation, all events for the requesting user will be sent to the application’s webhook via POST request.</para>
            </summary>
            <param name="webhook_id">required.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.PostWebhooksSubscriptionsAllAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Subscribes the provided application to all events for the provided user context for all message types. </para>
            <para>After activation, all events for the requesting user will be sent to the application’s webhook via POST request.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> webhook_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.PostWebhooksSubscriptionsAllAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Subscribes the provided application to all events for the provided user context for all message types. </para>
            <para>After activation, all events for the requesting user will be sent to the application’s webhook via POST request.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> webhook_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.PostWebhooksSubscriptionsAllAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Subscribes the provided application to all events for the provided user context for all message types. </para>
            <para>After activation, all events for the requesting user will be sent to the application’s webhook via POST request.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> webhook_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.PostWebhooksSubscriptionsAllAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Subscribes the provided application to all events for the provided user context for all message types. </para>
            <para>After activation, all events for the requesting user will be sent to the application’s webhook via POST request.</para>
            </summary>
            <param name="webhook_id">required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.SubscriptionsCount(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the count of subscriptions that are currently active on your account.</para>
            <para>Note that the /count endpoint requires application-only OAuth, so that you should make requests using a bearer token instead of user context.</para>
            <para>Available parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The count of subscriptions.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.SubscriptionsCount(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns the count of subscriptions that are currently active on your account.</para>
            <para>Note that the /count endpoint requires application-only OAuth, so that you should make requests using a bearer token instead of user context.</para>
            <para>Available parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The count of subscriptions.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.SubscriptionsCount(System.Object)">
            <summary>
            <para>Returns the count of subscriptions that are currently active on your account.</para>
            <para>Note that the /count endpoint requires application-only OAuth, so that you should make requests using a bearer token instead of user context.</para>
            <para>Available parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The count of subscriptions.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.SubscriptionsCount">
            <summary>
            <para>Returns the count of subscriptions that are currently active on your account.</para>
            <para>Note that the /count endpoint requires application-only OAuth, so that you should make requests using a bearer token instead of user context.</para>
            </summary>
            <returns>The count of subscriptions.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.SubscriptionsCountAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the count of subscriptions that are currently active on your account.</para>
            <para>Note that the /count endpoint requires application-only OAuth, so that you should make requests using a bearer token instead of user context.</para>
            <para>Available parameters:</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The count of subscriptions.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.SubscriptionsCountAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns the count of subscriptions that are currently active on your account.</para>
            <para>Note that the /count endpoint requires application-only OAuth, so that you should make requests using a bearer token instead of user context.</para>
            <para>Available parameters:</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The count of subscriptions.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.SubscriptionsCountAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns the count of subscriptions that are currently active on your account.</para>
            <para>Note that the /count endpoint requires application-only OAuth, so that you should make requests using a bearer token instead of user context.</para>
            <para>Available parameters:</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The count of subscriptions.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.SubscriptionsCountAsync(System.Threading.CancellationToken)">
            <summary>
            <para>Returns the count of subscriptions that are currently active on your account.</para>
            <para>Note that the /count endpoint requires application-only OAuth, so that you should make requests using a bearer token instead of user context.</para>
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The count of subscriptions.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.GetWebhooksSubscriptionsAll(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Provides a way to determine if a webhook configuration is subscribed to the provided user’s events. </para>
            <para>Available parameters:</para>
            <para>- <c>string</c> webhook_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.GetWebhooksSubscriptionsAll(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Provides a way to determine if a webhook configuration is subscribed to the provided user’s events. </para>
            <para>Available parameters:</para>
            <para>- <c>string</c> webhook_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.GetWebhooksSubscriptionsAll(System.Object)">
            <summary>
            <para>Provides a way to determine if a webhook configuration is subscribed to the provided user’s events. </para>
            <para>Available parameters:</para>
            <para>- <c>string</c> webhook_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.GetWebhooksSubscriptionsAll(System.String)">
            <summary>
            <para>Provides a way to determine if a webhook configuration is subscribed to the provided user’s events. </para>
            </summary>
            <param name="webhook_id">required.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.GetWebhooksSubscriptionsAllAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Provides a way to determine if a webhook configuration is subscribed to the provided user’s events. </para>
            <para>Available parameters:</para>
            <para>- <c>string</c> webhook_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.GetWebhooksSubscriptionsAllAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Provides a way to determine if a webhook configuration is subscribed to the provided user’s events. </para>
            <para>Available parameters:</para>
            <para>- <c>string</c> webhook_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.GetWebhooksSubscriptionsAllAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Provides a way to determine if a webhook configuration is subscribed to the provided user’s events. </para>
            <para>Available parameters:</para>
            <para>- <c>string</c> webhook_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.GetWebhooksSubscriptionsAllAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Provides a way to determine if a webhook configuration is subscribed to the provided user’s events. </para>
            </summary>
            <param name="webhook_id">required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.WebhooksSubscriptionsAllList(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a list of the current All Activity type subscriptions for the specified webhook.</para>
            <para>Note that the /list endpoint requires application-only OAuth, so requests should be made using a bearer token instead of user context.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> webhook_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list of subscriptions object.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.WebhooksSubscriptionsAllList(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns a list of the current All Activity type subscriptions for the specified webhook.</para>
            <para>Note that the /list endpoint requires application-only OAuth, so requests should be made using a bearer token instead of user context.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> webhook_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list of subscriptions object.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.WebhooksSubscriptionsAllList(System.Object)">
            <summary>
            <para>Returns a list of the current All Activity type subscriptions for the specified webhook.</para>
            <para>Note that the /list endpoint requires application-only OAuth, so requests should be made using a bearer token instead of user context.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> webhook_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list of subscriptions object.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.WebhooksSubscriptionsAllList(System.String)">
            <summary>
            <para>Returns a list of the current All Activity type subscriptions for the specified webhook.</para>
            <para>Note that the /list endpoint requires application-only OAuth, so requests should be made using a bearer token instead of user context.</para>
            </summary>
            <param name="webhook_id">required.</param>
            <returns>The list of subscriptions object.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.WebhooksSubscriptionsAllListAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a list of the current All Activity type subscriptions for the specified webhook.</para>
            <para>Note that the /list endpoint requires application-only OAuth, so requests should be made using a bearer token instead of user context.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> webhook_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list of subscriptions object.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.WebhooksSubscriptionsAllListAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a list of the current All Activity type subscriptions for the specified webhook.</para>
            <para>Note that the /list endpoint requires application-only OAuth, so requests should be made using a bearer token instead of user context.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> webhook_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of subscriptions object.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.WebhooksSubscriptionsAllListAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns a list of the current All Activity type subscriptions for the specified webhook.</para>
            <para>Note that the /list endpoint requires application-only OAuth, so requests should be made using a bearer token instead of user context.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> webhook_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of subscriptions object.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.WebhooksSubscriptionsAllListAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Returns a list of the current All Activity type subscriptions for the specified webhook.</para>
            <para>Note that the /list endpoint requires application-only OAuth, so requests should be made using a bearer token instead of user context.</para>
            </summary>
            <param name="webhook_id">required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list of subscriptions object.</returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.DeleteWebhooks(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Removes the webhook from the provided application’s configuration. </para>
            <para>Available parameters:</para>
            <para>- <c>string</c> webhook_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.DeleteWebhooks(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Removes the webhook from the provided application’s configuration. </para>
            <para>Available parameters:</para>
            <para>- <c>string</c> webhook_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.DeleteWebhooks(System.Object)">
            <summary>
            <para>Removes the webhook from the provided application’s configuration. </para>
            <para>Available parameters:</para>
            <para>- <c>string</c> webhook_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.DeleteWebhooks(System.String)">
            <summary>
            <para>Removes the webhook from the provided application’s configuration. </para>
            </summary>
            <param name="webhook_id">required.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.DeleteWebhooksAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Removes the webhook from the provided application’s configuration. </para>
            <para>Available parameters:</para>
            <para>- <c>string</c> webhook_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.DeleteWebhooksAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Removes the webhook from the provided application’s configuration. </para>
            <para>Available parameters:</para>
            <para>- <c>string</c> webhook_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.DeleteWebhooksAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Removes the webhook from the provided application’s configuration. </para>
            <para>Available parameters:</para>
            <para>- <c>string</c> webhook_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.DeleteWebhooksAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Removes the webhook from the provided application’s configuration. </para>
            </summary>
            <param name="webhook_id">required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.DeleteWebhooksSubscriptionsAll(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Deactivates subscription(s) for the provided user context and application.  </para>
            <para>Available parameters:</para>
            <para>- <c>string</c> webhook_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.DeleteWebhooksSubscriptionsAll(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Deactivates subscription(s) for the provided user context and application.  </para>
            <para>Available parameters:</para>
            <para>- <c>string</c> webhook_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.DeleteWebhooksSubscriptionsAll(System.Object)">
            <summary>
            <para>Deactivates subscription(s) for the provided user context and application.  </para>
            <para>Available parameters:</para>
            <para>- <c>string</c> webhook_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.DeleteWebhooksSubscriptionsAll(System.String)">
            <summary>
            <para>Deactivates subscription(s) for the provided user context and application.  </para>
            </summary>
            <param name="webhook_id">required.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.DeleteWebhooksSubscriptionsAllAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Deactivates subscription(s) for the provided user context and application.  </para>
            <para>Available parameters:</para>
            <para>- <c>string</c> webhook_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.DeleteWebhooksSubscriptionsAllAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Deactivates subscription(s) for the provided user context and application.  </para>
            <para>Available parameters:</para>
            <para>- <c>string</c> webhook_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.DeleteWebhooksSubscriptionsAllAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Deactivates subscription(s) for the provided user context and application.  </para>
            <para>Available parameters:</para>
            <para>- <c>string</c> webhook_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.AccountActivity.AccountActivityEnterpriseApi.DeleteWebhooksSubscriptionsAllAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Deactivates subscription(s) for the provided user context and application.  </para>
            </summary>
            <param name="webhook_id">required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="T:CoreTweet.TwitterParameterAttribute">
            <summary>
            Twitter parameter attribute.
            </summary>
        </member>
        <member name="P:CoreTweet.TwitterParameterAttribute.Name">
            <summary>
            Name of the parameter binding for.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:CoreTweet.TwitterParameterAttribute.DefaultValue">
            <summary>
            Default value of the parameter.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="M:CoreTweet.TwitterParameterAttribute.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:CoreTweet.TwitterParameterAttribute"/> class.
            </summary>
            <param name="name">Name.</param>
            <param name="defaultValue">Default value.</param>
        </member>
        <member name="T:CoreTweet.TwitterParametersAttribute">
            <summary>
            Twitter parameters attribute.
            This is used for a class.
            </summary>
        </member>
        <member name="T:CoreTweet.ConnectionOptions">
            <summary>
            Properties for requesting.
            </summary>
        </member>
        <member name="P:CoreTweet.ConnectionOptions.ApiUrl">
            <summary>
            Gets or sets the URL of REST API.
            <para>Default: <c>"https://api.twitter.com"</c></para>
            </summary>
        </member>
        <member name="P:CoreTweet.ConnectionOptions.UploadUrl">
            <summary>
            Gets or sets the URL of upload API.
            <para>Default: <c>"https://upload.twitter.com"</c></para>
            </summary>
        </member>
        <member name="P:CoreTweet.ConnectionOptions.UserStreamUrl">
            <summary>
            Gets or sets the URL of User Streams API.
            <para>Default: <c>"https://userstream.twitter.com"</c></para>
            </summary>
        </member>
        <member name="P:CoreTweet.ConnectionOptions.SiteStreamUrl">
            <summary>
            Gets or sets the URL of Site Streams API.
            <para>Default: <c>"https://sitestream.twitter.com"</c></para>
            </summary>
        </member>
        <member name="P:CoreTweet.ConnectionOptions.StreamUrl">
            <summary>
            Gets or sets the URL of Public Streams API.
            <para>Default: <c>"https://stream.twitter.com"</c></para>
            </summary>
        </member>
        <member name="P:CoreTweet.ConnectionOptions.ApiVersion">
            <summary>
            Gets or sets the version of the Twitter API.
            <para>Default: <c>"1.1"</c></para>
            </summary>
        </member>
        <member name="P:CoreTweet.ConnectionOptions.Timeout">
            <summary>
            Gets or sets the time-out value in milliseconds.
            </summary>
        </member>
        <member name="P:CoreTweet.ConnectionOptions.ReadWriteTimeout">
            <summary>
            Gets or sets a time-out in milliseconds when writing to or reading from a stream.
            This value will be applied to only sync API methods.
            </summary>
        </member>
        <member name="P:CoreTweet.ConnectionOptions.UseProxy">
            <summary>
            Gets or sets a value that indicates whether the handler uses a proxy for requests.
            </summary>
        </member>
        <member name="P:CoreTweet.ConnectionOptions.Proxy">
            <summary>
            Gets or sets the proxy information for the request.
            </summary>
        </member>
        <member name="P:CoreTweet.ConnectionOptions.UserAgent">
            <summary>
            Gets or sets the value of the User-agent HTTP header.
            </summary>
        </member>
        <member name="P:CoreTweet.ConnectionOptions.UseCompression">
            <summary>
            Gets or sets whether the compression is used on non-streaming requests.
            </summary>
        </member>
        <member name="P:CoreTweet.ConnectionOptions.UseCompressionOnStreaming">
            <summary>
            Gets or sets whether the compression is used on streaming requests.
            </summary>
        </member>
        <member name="P:CoreTweet.ConnectionOptions.DisableKeepAlive">
            <summary>
            Gets or sets whether Keep-Alive requests are disabled.
            </summary>
        </member>
        <member name="M:CoreTweet.ConnectionOptions.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="T:CoreTweet.ParsingException">
            <summary>
            Exception when parsing.
            </summary>
        </member>
        <member name="P:CoreTweet.ParsingException.Json">
            <summary>
            The JSON which causes an exception.
            </summary>
            <value>
            The json.
            </value>
        </member>
        <member name="M:CoreTweet.ParsingException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CoreTweet.ParsingException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="json">The JSON that couldn't be parsed.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (<c>Nothing</c> in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:CoreTweet.TwitterException">
            <summary>
            Exception throwed by Twitter.
            </summary>
        </member>
        <member name="P:CoreTweet.TwitterException.Status">
            <summary>
            The status of the response.
            </summary>
        </member>
        <member name="P:CoreTweet.TwitterException.RequestUri">
            <summary>
            The URI of the request.
            </summary>
        </member>
        <member name="P:CoreTweet.TwitterException.Errors">
            <summary>
            The error messages.
            </summary>
        </member>
        <member name="P:CoreTweet.TwitterException.RateLimit">
            <summary>
            Gets or sets the rate limit of the response.
            </summary>
        </member>
        <member name="P:CoreTweet.TwitterException.Json">
            <summary>
            Gets or sets the JSON of the response.
            </summary>
        </member>
        <member name="M:CoreTweet.TwitterException.Create(CoreTweet.AsyncResponse)">
            <summary>
            Create a <see cref="T:CoreTweet.TwitterException"/> instance from the <see cref="T:CoreTweet.AsyncResponse"/>.
            </summary>
            <returns><see cref="T:CoreTweet.TwitterException"/> instance or null.</returns>
        </member>
        <member name="M:CoreTweet.TwitterException.Create(System.Net.WebException)">
            <summary>
            Create a <see cref="T:CoreTweet.TwitterException"/> instance from the <see cref="T:System.Net.WebException"/>.
            </summary>
            <param name="ex">The thrown <see cref="T:System.Net.WebException"/>.</param>
            <returns><see cref="T:CoreTweet.TwitterException"/> instance or null.</returns>
        </member>
        <member name="T:CoreTweet.MediaProcessingException">
            <summary>
            Represents error in Twitter processing the media.
            </summary>
        </member>
        <member name="M:CoreTweet.MediaProcessingException.#ctor(CoreTweet.UploadFinalizeCommandResult)">
            <summary>
            Initializes a new instance of the <see cref="T:CoreTweet.MediaProcessingException"/> class.
            </summary>
            <param name="response">The response from media/upload.</param>
        </member>
        <member name="P:CoreTweet.MediaProcessingException.Response">
            <summary>
            Gets the response from media/upload.
            </summary>
        </member>
        <member name="T:CoreTweet.Core.ApiProviderBase">
            <summary>
            Provides a Twitter API wrapper. This is an abstract class.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.ApiProviderBase.Tokens">
            <summary>
            Gets or sets the OAuth tokens.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.ApiProviderBase.IncludedTokens">
            <summary>
            Gets the tokens being used in this instance.
            </summary>
        </member>
        <member name="T:CoreTweet.Core.DateTimeOffsetConverter">
            <summary>
            Provides the <see cref="T:System.DateTimeOffset"/> converter of the <see cref="T:Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:CoreTweet.Core.DateTimeOffsetConverter.CanConvert(System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type.
            </summary>
            <param name="objectType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns>
            <c>true</c> if this converter can perform the conversion; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CoreTweet.Core.DateTimeOffsetConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">The <see cref="T:System.Type"/> of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:CoreTweet.Core.DateTimeOffsetConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:CoreTweet.Core.ContributorsConverter">
            <summary>
            Provides the <see cref="T:CoreTweet.Contributors"/> converter of the <see cref="T:Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:CoreTweet.Core.ContributorsConverter.CanConvert(System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type.
            </summary>
            <param name="objectType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns>
            <c>true</c> if this converter can perform the conversion; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CoreTweet.Core.ContributorsConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">The <see cref="T:System.Type"/> of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:CoreTweet.Core.ContributorsConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:CoreTweet.Core.TimestampConverter">
            <summary>
            Provides the <see cref="T:System.DateTimeOffset"/> converter of the <see cref="T:Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:CoreTweet.Core.TimestampConverter.CanConvert(System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type.
            </summary>
            <param name="objectType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns>
            <c>true</c> if this converter can perform the conversion; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CoreTweet.Core.TimestampConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">The <see cref="T:System.Type"/> of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:CoreTweet.Core.TimestampConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:CoreTweet.Core.DateConverter">
            <summary>
            Provides the <see cref="T:System.DateTime"/> converter of the <see cref="T:Newtonsoft.Json.JsonSerializer"/> for Premium search API.
            </summary>
        </member>
        <member name="M:CoreTweet.Core.DateConverter.CanConvert(System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type.
            </summary>
            <param name="objectType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns>
            <c>true</c> if this converter can perform the conversion; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CoreTweet.Core.DateConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">The <see cref="T:System.Type"/> of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:CoreTweet.Core.DateConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:CoreTweet.Core.CoreBase">
            <summary>
            Represents a Twitter object. This is an <c>abstract</c> class.
            </summary>
        </member>
        <member name="M:CoreTweet.Core.CoreBase.Convert``1(System.String,System.String)">
            <summary>
            Converts the JSON to a twitter object of the specified type.
            </summary>
            <remarks>
            <para>This method is used internally in CoreTweet.</para>
            <para>You can use this method for debugging.</para>
            </remarks>
            <param name="json">The json message.</param>
            <param name="jsonPath">JSONPath of object to be deserialize.</param>
            <typeparam name="T">The type of a twitter object.</typeparam>
            <returns>The twitter object.</returns>
        </member>
        <member name="M:CoreTweet.Core.CoreBase.ConvertArray``1(System.String,System.String)">
            <summary>
            <para>Converts the json to a twitter object of the specified type.</para>
            <para>This is used for APIs that return an array.</para>
            </summary>
            <remarks>
            <para>This method is used internally in CoreTweet.</para>
            <para>You can use this method for debugging.</para>
            </remarks>
            <param name="json">The json message.</param>
            <param name="jsonPath">JSONPath of object to be deserialize.</param>
            <typeparam name="T">The type of a twitter object.</typeparam>
            <returns>Twitter objects.</returns>
        </member>
        <member name="T:CoreTweet.Core.ITwitterResponse">
            <summary>
            Represents a response that has rate limit.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.ITwitterResponse.RateLimit">
            <summary>
            Gets or sets the rate limit of the response.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.ITwitterResponse.Json">
            <summary>
            Gets or sets the JSON of the response.
            </summary>
        </member>
        <member name="T:CoreTweet.Core.ListedResponse`1">
            <summary>
            The collection of response.
            </summary>
        </member>
        <member name="M:CoreTweet.Core.ListedResponse`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:CoreTweet.Core.ListedResponse`1"/> class with a specified collection.
            </summary>
            <param name="collection">The collection whose elements are copied to the new <see cref="T:CoreTweet.Core.ListedResponse`1"/>.</param>
        </member>
        <member name="M:CoreTweet.Core.ListedResponse`1.#ctor(System.Collections.Generic.List{`0},CoreTweet.RateLimit,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CoreTweet.Core.ListedResponse`1"/> class with a specified collection and rate limit.
            </summary>
            <param name="collection">The collection whose elements are copied to the new <see cref="T:CoreTweet.Core.ListedResponse`1"/>.</param>
            <param name="rateLimit">The rate limit.</param>
            <param name="json">The JSON.</param>
        </member>
        <member name="P:CoreTweet.Core.ListedResponse`1.RateLimit">
            <summary>
            Gets or sets the rate limit of the response.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.ListedResponse`1.Json">
            <summary>
            Gets or sets the JSON of the response.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.ListedResponse`1.Count">
            <summary>
            Gets the number of elements actually contained in the <see cref="T:CoreTweet.Core.ListedResponse`1"/>.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.ListedResponse`1.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="M:CoreTweet.Core.ListedResponse`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An IEnumerator object that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:CoreTweet.Core.DictionaryResponse`2">
            <summary>
            The collection of response.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
        </member>
        <member name="M:CoreTweet.Core.DictionaryResponse`2.#ctor(System.Collections.Generic.Dictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:CoreTweet.Core.DictionaryResponse`2"/> class with a specified dictionary.
            </summary>
            <param name="dictionary">The dictionary whose elements are copied to the new <see cref="T:CoreTweet.Core.DictionaryResponse`2"/>.</param>
        </member>
        <member name="M:CoreTweet.Core.DictionaryResponse`2.#ctor(System.Collections.Generic.Dictionary{`0,`1},CoreTweet.RateLimit,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CoreTweet.Core.DictionaryResponse`2"/> class with a specified dictionary and rate limit.
            </summary>
            <param name="dictionary">The dictionary whose elements are copied to the new <see cref="T:CoreTweet.Core.DictionaryResponse`2"/>.</param>
            <param name="rateLimit">The rate limit.</param>
            <param name="json">The JSON.</param>
        </member>
        <member name="P:CoreTweet.Core.DictionaryResponse`2.RateLimit">
            <summary>
            Gets or sets the rate limit of the response.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.DictionaryResponse`2.Json">
            <summary>
            Gets or sets the JSON of the response.
            </summary>
        </member>
        <member name="M:CoreTweet.Core.DictionaryResponse`2.ContainsKey(`0)">
            <summary>
            Determines whether the read-only dictionary contains an element that has the specified key.
            </summary>
            <param name="key">The key to locate.</param>
            <returns><c>true</c> if the read-only dictionary contains an element that has the specified key; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:CoreTweet.Core.DictionaryResponse`2.Keys">
            <summary>
            Gets an enumerable collection that contains the keys in the read-only dictionary.
            </summary>
            <value>An enumerable collection that contains the keys in the read-only dictionary.</value>
        </member>
        <member name="M:CoreTweet.Core.DictionaryResponse`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value that is associated with the specified key.
            </summary>
            <param name="key">The key to locate.</param>
            <param name="value">
            When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter.
            This parameter is passed uninitialized.
            </param>
            <returns><c>true</c> if the <see cref="T:CoreTweet.Core.DictionaryResponse`2"/> contains an element that has the specified key; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:CoreTweet.Core.DictionaryResponse`2.Values">
            <summary>
            Gets an enumerable collection that contains the values in the read-only dictionary.
            </summary>
            <value>An enumerable collection that contains the values in the read-only dictionary.</value>
        </member>
        <member name="P:CoreTweet.Core.DictionaryResponse`2.Item(`0)">
            <summary>
            Gets the element that has the specified key in the read-only dictionary.
            </summary>
            <param name="key">The key to locate.</param>
            <returns>The element that has the specified key in the read-only dictionary.</returns>
        </member>
        <member name="P:CoreTweet.Core.DictionaryResponse`2.Count">
            <summary>
            Gets the number of elements in the collection.
            </summary>
            <value>The number of elements in the collection.</value>
        </member>
        <member name="M:CoreTweet.Core.DictionaryResponse`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An IEnumerator object that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:CoreTweet.Core.TokensBase">
            <summary>
            Represents an OAuth token. This is an <c>abstract</c> class.
            </summary>
        </member>
        <member name="M:CoreTweet.Core.TokensBase.SendRequestAsync(CoreTweet.MethodType,System.String,System.Threading.CancellationToken,System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            Sends a request to the specified url with the specified parameters as an asynchronous operation.
            </summary>
            <param name="type">The type of HTTP request.</param>
            <param name="url">The URL.</param>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns a <see cref="T:CoreTweet.AsyncResponse"/>.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Core.TokensBase.SendRequestAsync(CoreTweet.MethodType,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sends a request to the specified url with the specified parameters as an asynchronous operation.
            </summary>
            <param name="type">The type of HTTP request.</param>
            <param name="url">The URL.</param>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns a <see cref="T:CoreTweet.AsyncResponse"/>.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Core.TokensBase.SendRequestAsync(CoreTweet.MethodType,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            Sends a request to the specified url with the specified parameters as an asynchronous operation.
            </summary>
            <param name="type">The type of HTTP request.</param>
            <param name="url">The URL.</param>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns a <see cref="T:CoreTweet.AsyncResponse"/>.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Core.TokensBase.SendStreamingRequestAsync(CoreTweet.MethodType,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Threading.CancellationToken)">
            <summary>
            Sends a streaming request to the specified url with the specified parameters as an asynchronous operation.
            </summary>
            <param name="type">The type of HTTP request.</param>
            <param name="url">The URL.</param>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns a <see cref="T:CoreTweet.AsyncResponse"/>.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Core.TokensBase.PostContentAsync(System.String,System.String,System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Sends a request to the specified url with the specified content as an asynchronous operation.
            </summary>
            <param name="url">The URL.</param>
            <param name="contentType">The Content-Type header.</param>
            <param name="content">The content.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns a <see cref="T:CoreTweet.AsyncResponse"/>.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Core.TokensBase.SendRequestAsyncImpl(CoreTweet.MethodType,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Threading.CancellationToken,System.IProgress{CoreTweet.UploadProgressInfo})">
            <summary>
            Sends a streaming request to the specified url with the specified parameters as an asynchronous operation.
            </summary>
            <param name="type">The type of HTTP request.</param>
            <param name="url">The URL.</param>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns a stream.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Core.TokensBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CoreTweet.Core.TokensBase"/> class.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.TokensBase.ConsumerKey">
            <summary>
            Gets or sets the consumer key.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.TokensBase.ConsumerSecret">
            <summary>
            Gets or sets the consumer secret.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.TokensBase.Account">
            <summary>
            Gets the wrapper of account.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.TokensBase.Application">
            <summary>
            Gets the wrapper of application.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.TokensBase.Blocks">
            <summary>
            Gets the wrapper of blocks.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.TokensBase.Collections">
            <summary>
            Gets the wrapper of collections.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.TokensBase.DirectMessages">
            <summary>
            Gets the wrapper of direct_messages.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.TokensBase.Favorites">
            <summary>
            Gets the wrapper of favorites.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.TokensBase.Friends">
            <summary>
            Gets the wrapper of friends.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.TokensBase.Followers">
            <summary>
            Gets the wrapper of followers.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.TokensBase.Friendships">
            <summary>
            Gets the wrapper of friendships.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.TokensBase.Geo">
            <summary>
            Gets the wrapper of geo.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.TokensBase.Help">
            <summary>
            Gets the wrapper of help.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.TokensBase.Lists">
            <summary>
            Gets the wrapper of lists.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.TokensBase.Media">
            <summary>
            Gets the wrapper of media.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.TokensBase.Mutes">
            <summary>
            Gets the wrapper of mutes.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.TokensBase.Search">
            <summary>
            Gets the wrapper of search.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.TokensBase.SavedSearches">
            <summary>
            Gets the wrapper of saved_searches.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.TokensBase.Statuses">
            <summary>
            Gets the wrapper of statuses.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.TokensBase.Trends">
            <summary>
            Gets the wrapper of trends.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.TokensBase.Tweets">
            <summary>
            Gets the wrapper of tweets.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.TokensBase.Users">
            <summary>
            Gets the wrapper of users.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.TokensBase.Streaming">
            <summary>
            Gets the wrapper of the Streaming API.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.TokensBase.AccountActivity">
            <summary>
            Gets the wrapper of the Account Activity API.
            </summary>
        </member>
        <member name="P:CoreTweet.Core.TokensBase.ConnectionOptions">
            <summary>
            Gets or sets the options of the connection.
            </summary>
        </member>
        <member name="M:CoreTweet.Core.TokensBase.CreateAuthorizationHeader(CoreTweet.MethodType,System.Uri,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            When overridden in a descendant class, creates a string for Authorization header.
            </summary>
            <param name="type">Type of HTTP request.</param>
            <param name="url">The URL.</param>
            <param name="parameters">The parameters.</param>
            <returns>A string for Authorization header.</returns>
        </member>
        <member name="M:CoreTweet.Core.TokensBase.SendRequest(CoreTweet.MethodType,System.String,System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            Sends a request to the specified url with the specified parameters.
            </summary>
            <param name="type">The type of HTTP request.</param>
            <param name="url">The URL.</param>
            <param name="parameters">The parameters.</param>
            <returns>A <see cref="T:System.Net.HttpWebResponse"/>.</returns>
        </member>
        <member name="M:CoreTweet.Core.TokensBase.SendRequest(CoreTweet.MethodType,System.String,System.Object)">
            <summary>
            Sends a request to the specified url with the specified parameters.
            </summary>
            <param name="type">The type of HTTP request.</param>
            <param name="url">The URL.</param>
            <param name="parameters">The parameters.</param>
            <returns>A <see cref="T:System.Net.HttpWebResponse"/>.</returns>
        </member>
        <member name="M:CoreTweet.Core.TokensBase.SendRequest(CoreTweet.MethodType,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Sends a request to the specified url with the specified parameters.
            </summary>
            <param name="type">The type of HTTP request.</param>
            <param name="url">The URL.</param>
            <param name="parameters">The parameters.</param>
            <returns>A <see cref="T:System.Net.HttpWebResponse"/>.</returns>
        </member>
        <member name="M:CoreTweet.Core.TokensBase.SendStreamingRequest(CoreTweet.MethodType,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Sends a streaming request to the specified url with the specified parameters.
            </summary>
            <param name="type">The type of HTTP request.</param>
            <param name="url">The URL.</param>
            <param name="parameters">The parameters.</param>
            <returns>A <see cref="T:System.Net.HttpWebResponse"/>.</returns>
        </member>
        <member name="M:CoreTweet.Core.TokensBase.PostContent(System.String,System.String,System.Byte[])">
            <summary>
            Sends a request to the specified url with the specified content.
            </summary>
            <param name="url">The URL.</param>
            <param name="contentType">The Content-Type header.</param>
            <param name="content">The content.</param>
            <returns>A <see cref="T:System.Net.HttpWebResponse"/>.</returns>
        </member>
        <member name="M:CoreTweet.Core.InternalUtils.AccessParameterReservedApi``1(CoreTweet.Core.TokensBase,CoreTweet.MethodType,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            id, slug, etc
            </summary>
        </member>
        <member name="T:CoreTweet.AsyncResponse">
            <summary>
            Represents an asynchronous response.
            </summary>
        </member>
        <member name="M:CoreTweet.AsyncResponse.#ctor(System.Net.Http.HttpResponseMessage)">
            <summary>
            Initializes a new instance of the <see cref="T:CoreTweet.AsyncResponse"/> class with a specified source.
            </summary>
        </member>
        <member name="P:CoreTweet.AsyncResponse.Source">
            <summary>
            Gets the source of the response.
            </summary>
        </member>
        <member name="P:CoreTweet.AsyncResponse.StatusCode">
            <summary>
            Gets the status code of the response.
            </summary>
        </member>
        <member name="P:CoreTweet.AsyncResponse.Headers">
            <summary>
            Gets the headers of the response.
            </summary>
        </member>
        <member name="M:CoreTweet.AsyncResponse.GetResponseStreamAsync">
            <summary>
            Gets the stream that is used to read the body of the response from the server as an asynchronous operation.
            </summary>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the <see cref="T:System.IO.Stream"/> containing the body of the response.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.AsyncResponse.Dispose">
            <summary>
            Closes the stream and releases all the resources.
            </summary>
        </member>
        <member name="T:CoreTweet.Request">
            <summary>
            Provides a set of static (Shared in Visual Basic) methods for sending a request to Twitter and some other web services.
            </summary>
        </member>
        <member name="M:CoreTweet.Request.HttpGetAsync(System.Uri,System.String,CoreTweet.ConnectionOptions,System.Threading.CancellationToken)">
            <summary>
            Sends a GET request as an asynchronous operation.
            </summary>
            <param name="url">The URL.</param>
            <param name="authorizationHeader">The OAuth header.</param>
            <param name="options">The connection options for the request.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the response.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Request.HttpPostAsync(System.Uri,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.String,CoreTweet.ConnectionOptions,System.Threading.CancellationToken,System.IProgress{CoreTweet.UploadProgressInfo})">
            <summary>
            Sends a POST request as an asynchronous operation.
            </summary>
            <param name="url">The URL.</param>
            <param name="prm">The parameters.</param>
            <param name="authorizationHeader">The OAuth header.</param>
            <param name="options">The connection options for the request.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the response.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Request.HttpPostWithMultipartFormDataAsync(System.Uri,System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.String,CoreTweet.ConnectionOptions,System.Threading.CancellationToken,System.IProgress{CoreTweet.UploadProgressInfo})">
            <summary>
            Sends a POST request with multipart/form-data as an asynchronous operation.
            </summary>
            <param name="url">The URL.</param>
            <param name="prm">The parameters.</param>
            <param name="authorizationHeader">The OAuth header.</param>
            <param name="options">The connection options for the request.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the response.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Request.GenerateSignature(CoreTweet.Tokens,CoreTweet.MethodType,System.Uri,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Generates the signature.
            </summary>
            <param name="t">The tokens.</param>
            <param name="httpMethod">The HTTP method.</param>
            <param name="url">The URL.</param>
            <param name="prm">The parameters.</param>
            <returns>The signature.</returns>
        </member>
        <member name="M:CoreTweet.Request.GenerateParameters(System.String,System.String)">
            <summary>
            Generates the parameters.
            </summary>
            <param name="consumerKey">The consumer key.</param>
            <param name="token">The token.</param>
            <returns>The parameters.</returns>
        </member>
        <member name="M:CoreTweet.Request.UrlEncode(System.String)">
            <summary>
            Encodes the specified text.
            </summary>
            <param name="text">The text.</param>
            <returns>The encoded text.</returns>
        </member>
        <member name="T:CoreTweet.OAuth">
            <summary>
            Provides a set of static (Shared in Visual Basic) methods for OAuth authentication.
            </summary>
        </member>
        <member name="M:CoreTweet.OAuth.AuthorizeAsync(System.String,System.String,System.String,CoreTweet.ConnectionOptions,System.Threading.CancellationToken)">
            <summary>
            <para>Generates the authorize URI as an asynchronous operation.</para>
            <para>Then call <see cref="M:CoreTweet.OAuth.GetTokensAsync(CoreTweet.OAuth.OAuthSession,System.String,System.Threading.CancellationToken)"/> after get the pin code.</para>
            </summary>
            <param name="consumerKey">The consumer key.</param>
            <param name="consumerSecret">The consumer secret.</param>
            <param name="oauthCallback">
            <para>For OAuth 1.0a compliance this parameter is required.</para>
            <para>The value you specify here will be used as the URL a user is redirected to should they approve your application's access to their account.</para>
            <para>Set this to oob for out-of-band pin mode.</para>
            <para>This is also how you specify custom callbacks for use in desktop/mobile applications.</para>
            <para>Always send an oauth_callback on this step, regardless of a pre-registered callback.</para>
            </param>
            <param name="options">The connection options for the request.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the authorize URI.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.OAuth.GetTokensAsync(CoreTweet.OAuth.OAuthSession,System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Gets the OAuth tokens as an asynchronous operation.</para>
            <para>Be sure to call <see cref="M:CoreTweet.OAuth.AuthorizeAsync(System.String,System.String,System.String,CoreTweet.ConnectionOptions,System.Threading.CancellationToken)"/> before call this method.</para>
            </summary>
            <param name="session">The OAuth session.</param>
            <param name="oauthVerifier">The pin code.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the tokens.</para>
            </returns>
        </member>
        <member name="T:CoreTweet.OAuth.OAuthSession">
            <summary>
            Represents an OAuth session.
            </summary>
        </member>
        <member name="P:CoreTweet.OAuth.OAuthSession.ConsumerKey">
            <summary>
            Gets or sets the consumer key.
            </summary>
        </member>
        <member name="P:CoreTweet.OAuth.OAuthSession.ConsumerSecret">
            <summary>
            Gets or sets the consumer secret.
            </summary>
        </member>
        <member name="P:CoreTweet.OAuth.OAuthSession.RequestToken">
            <summary>
            Gets or sets the request token.
            </summary>
        </member>
        <member name="P:CoreTweet.OAuth.OAuthSession.RequestTokenSecret">
            <summary>
            Gets or sets the request token secret.
            </summary>
        </member>
        <member name="P:CoreTweet.OAuth.OAuthSession.ConnectionOptions">
            <summary>
            Gets or sets the options of the connection.
            </summary>
        </member>
        <member name="P:CoreTweet.OAuth.OAuthSession.AuthorizeUri">
            <summary>
            Gets the authorize URL.
            </summary>
        </member>
        <member name="M:CoreTweet.OAuth.Authorize(System.String,System.String,System.String,CoreTweet.ConnectionOptions)">
            <summary>
            <para>Generates the authorize URI.</para>
            <para>Then call <see cref="M:CoreTweet.OAuth.GetTokens(CoreTweet.OAuth.OAuthSession,System.String)"/> after get the pin code.</para>
            </summary>
            <param name="consumerKey">The Consumer key.</param>
            <param name="consumerSecret">The Consumer secret.</param>
            <param name="oauthCallback">
            <para>For OAuth 1.0a compliance this parameter is required.</para>
            <para>The value you specify here will be used as the URL a user is redirected to should they approve your application's access to their account.</para>
            <para>Set this to oob for out-of-band pin mode.</para>
            <para>This is also how you specify custom callbacks for use in desktop/mobile applications.</para>
            <para>Always send an oauth_callback on this step, regardless of a pre-registered callback.</para>
            </param>
            <param name="options">The connection options for the request.</param>
            <returns>The authorize URI.</returns>
        </member>
        <member name="M:CoreTweet.OAuth.GetTokens(CoreTweet.OAuth.OAuthSession,System.String)">
            <summary>
            <para>Gets the OAuth tokens.</para>
            <para>Be sure to call <see cref="M:CoreTweet.OAuth.Authorize(System.String,System.String,System.String,CoreTweet.ConnectionOptions)"/> before call this method.</para>
            </summary>
            <param name="session">The OAuth session.</param>
            <param name="oauthVerifier">The pin code.</param>
            <returns>The tokens.</returns>
        </member>
        <member name="T:CoreTweet.OAuth2">
            <summary>
            Provides a set of static (Shared in Visual Basic) methods for OAuth 2 Authentication.
            </summary>
        </member>
        <member name="M:CoreTweet.OAuth2.GetTokenAsync(System.String,System.String,CoreTweet.ConnectionOptions,System.Threading.CancellationToken)">
            <summary>
            Gets the OAuth 2 Bearer Token as an asynchronous operation.
            </summary>
            <param name="consumerKey">The consumer key.</param>
            <param name="consumerSecret">The consumer secret.</param>
            <param name="options">The connection options for the request.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the tokens.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.OAuth2.InvalidateTokenAsync(CoreTweet.OAuth2Token,System.Threading.CancellationToken)">
            <summary>
            Invalidates the OAuth 2 Bearer Token as an asynchronous operation.
            </summary>
            <param name="tokens">An instance of OAuth2Tokens.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the invalidated token.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.OAuth2.GetToken(System.String,System.String,CoreTweet.ConnectionOptions)">
            <summary>
            Gets the OAuth 2 Bearer Token.
            </summary>
            <param name="consumerKey">The consumer key.</param>
            <param name="consumerSecret">The consumer secret.</param>
            <param name="options">The connection options for the request.</param>
            <returns>The tokens.</returns>
        </member>
        <member name="M:CoreTweet.OAuth2.InvalidateToken(CoreTweet.OAuth2Token)">
            <summary>
            Invalidates the OAuth 2 Bearer Token.
            </summary>
            <param name="tokens">An instance of <see cref="T:CoreTweet.OAuth2Token"/>.</param>
            <returns>The invalidated token.</returns>
        </member>
        <member name="P:CoreTweet.CollectionsApiResult.RateLimit">
            <remarks>
            This property will always be null when obtained from (most of) the POST endpoints, unless the rate is explicitly stated in the Twitter official documentation.
            </remarks>
        </member>
        <member name="P:CoreTweet.TimelineResponse.RateLimit">
            <summary>
            Gets or sets the rate limit of the response.
            </summary>
            <remarks>
            This property will always be null when obtained from (most of) the POST endpoints, unless the rate is explicitly stated in the Twitter official documentation.
            </remarks>
        </member>
        <member name="P:CoreTweet.TimelineResponse.Json">
            <summary>
            Gets or sets the JSON of the response.
            </summary>
        </member>
        <member name="P:CoreTweet.CollectionsListResult.RateLimit">
            <summary>
            Gets or sets the rate limit of the response.
            </summary>
            <remarks>
            This property will always be null when obtained from (most of) the POST endpoints, unless the rate is explicitly stated in the Twitter official documentation.
            </remarks>
        </member>
        <member name="P:CoreTweet.CollectionsListResult.Json">
            <summary>
            Gets or sets the JSON of the response.
            </summary>
        </member>
        <member name="P:CoreTweet.CollectionEntriesResult.RateLimit">
            <summary>
            Gets or sets the rate limit of the response.
            </summary>
            <remarks>
            This property will always be null when obtained from (most of) the POST endpoints, unless the rate is explicitly stated in the Twitter official documentation.
            </remarks>
        </member>
        <member name="P:CoreTweet.CollectionEntriesResult.Json">
            <summary>
            Gets or sets the JSON of the response.
            </summary>
        </member>
        <member name="P:CoreTweet.CollectionDestroyResult.RateLimit">
            <summary>
            Gets or sets the rate limit of the response.
            </summary>
            <remarks>
            This property will always be null when obtained from (most of) the POST endpoints, unless the rate is explicitly stated in the Twitter official documentation.
            </remarks>
        </member>
        <member name="P:CoreTweet.CollectionDestroyResult.Json">
            <summary>
            Gets or sets the JSON of the response.
            </summary>
        </member>
        <member name="T:CoreTweet.Cursored`1">
            <summary>
            Represents a cursored message object.
            </summary>
        </member>
        <member name="P:CoreTweet.Cursored`1.Result">
            <summary>
            Gets the results.
            </summary>
        </member>
        <member name="P:CoreTweet.Cursored`1.NextCursor">
            <summary>
            Gets or sets the next cursor.
            </summary>
        </member>
        <member name="P:CoreTweet.Cursored`1.PreviousCursor">
            <summary>
            Gets or sets the previous cursor.
            </summary>
        </member>
        <member name="P:CoreTweet.Cursored`1.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="P:CoreTweet.Cursored`1.Count">
            <summary>
            Gets the number of elements actually contained in the <see cref="T:CoreTweet.Cursored`1"/>.
            </summary>
        </member>
        <member name="P:CoreTweet.Cursored`1.RateLimit">
            <summary>
            Gets or sets the rate limit of the response.
            </summary>
            <remarks>
            This property will always be null when obtained from (most of) the POST endpoints, unless the rate is explicitly stated in the Twitter official documentation.
            </remarks>
        </member>
        <member name="P:CoreTweet.Cursored`1.Json">
            <summary>
            Gets or sets the JSON of the response.
            </summary>
        </member>
        <member name="M:CoreTweet.Cursored`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An IEnumerator object that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:CoreTweet.EnumerateMode">
            <summary>
            Provides a mode of enumeration.
            </summary>
        </member>
        <member name="F:CoreTweet.EnumerateMode.Next">
            <summary>
            The enumeration mode is next.
            </summary>
        </member>
        <member name="F:CoreTweet.EnumerateMode.Previous">
            <summary>
            The enumeration mode is previous.
            </summary>
        </member>
        <member name="M:CoreTweet.MessageCreateEvent.ToString">
            <summary>
            Returns the ID of this instance.
            </summary>
            <returns>The ID of this instance.</returns>
        </member>
        <member name="P:CoreTweet.MessageCreateEventResponse.RateLimit">
            <summary>
            Gets or sets the rate limit of the response.
            </summary>
            <remarks>
            This property will always be null when obtained from (most of) the POST endpoints, unless the rate is explicitly stated in the Twitter official documentation.
            </remarks>
        </member>
        <member name="P:CoreTweet.MessageCreateEventResponse.Json">
            <summary>
            Gets or sets the JSON of the response.
            </summary>
        </member>
        <member name="P:CoreTweet.CursoredMessageCreateEvents.NextCursor">
            <summary>
            Gets or sets the next cursor.
            </summary>
        </member>
        <member name="P:CoreTweet.CursoredMessageCreateEvents.RateLimit">
            <summary>
            Gets or sets the rate limit of the response.
            </summary>
            <remarks>
            This property will always be null when obtained from (most of) the POST endpoints, unless the rate is explicitly stated in the Twitter official documentation.
            </remarks>
        </member>
        <member name="P:CoreTweet.CursoredMessageCreateEvents.Json">
            <summary>
            Gets or sets the JSON of the response.
            </summary>
        </member>
        <member name="M:CoreTweet.CursoredMessageCreateEvents.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An IEnumerator object that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:CoreTweet.Embed">
            <summary>
            Represents an oEmbed representation of a Tweet.
            </summary>
        </member>
        <member name="P:CoreTweet.Embed.Html">
            <summary>
            Gets or sets the HTML code that can be embedded.
            </summary>
        </member>
        <member name="P:CoreTweet.Embed.AuthorName">
            <summary>
            Gets or sets the name of the author.
            </summary>
        </member>
        <member name="P:CoreTweet.Embed.AuthorUrl">
            <summary>
            Gets or sets the URL of the author.
            </summary>
        </member>
        <member name="P:CoreTweet.Embed.ProviderUrl">
            <summary>
            Gets or sets the URL of the provider.
            </summary>
        </member>
        <member name="P:CoreTweet.Embed.ProviderName">
            <summary>
            Gets or sets the name of the provider.
            </summary>
        </member>
        <member name="P:CoreTweet.Embed.Url">
            <summary>
            Gets or sets the URL.
            </summary>
        </member>
        <member name="P:CoreTweet.Embed.Version">
            <summary>
            Gets or sets the version.
            </summary>
        </member>
        <member name="P:CoreTweet.Embed.Type">
            <summary>
            Gets or sets the type.
            </summary>
        </member>
        <member name="P:CoreTweet.Embed.Height">
            <summary>
            Gets or sets the height of the embed object.
            </summary>
        </member>
        <member name="P:CoreTweet.Embed.Width">
            <summary>
            Gets or sets the width of the embed object.
            </summary>
        </member>
        <member name="P:CoreTweet.Embed.CacheAge">
            <summary>
            Gets or sets the age of the cache.
            </summary>
        </member>
        <member name="P:CoreTweet.Embed.RateLimit">
            <summary>
            Gets or sets the rate limit of the response.
            </summary>
            <remarks>
            This property will always be null when obtained from (most of) the POST endpoints, unless the rate is explicitly stated in the Twitter official documentation.
            </remarks>
        </member>
        <member name="P:CoreTweet.Embed.Json">
            <summary>
            Gets or sets the JSON of the response.
            </summary>
        </member>
        <member name="T:CoreTweet.Entities">
            <summary>
            Represents the metadata and additional contextual information about content posted on Twitter.
            </summary>
        </member>
        <member name="P:CoreTweet.Entities.HashTags">
            <summary>
            Gets or sets the hashtags which have been parsed out of the Tweet text.
            </summary>
        </member>
        <member name="P:CoreTweet.Entities.Media">
            <summary>
            Gets or sets the media elements uploaded with the Tweet.
            </summary>
        </member>
        <member name="P:CoreTweet.Entities.Urls">
            <summary>
            Gets or sets the URLs included in the text of a Tweet or within textual fields of a user object.
            </summary>
        </member>
        <member name="P:CoreTweet.Entities.UserMentions">
            <summary>
            Gets or sets the other Twitter users mentioned in the text of the Tweet.
            </summary>
        </member>
        <member name="P:CoreTweet.Entities.Symbols">
            <summary>
            Gets or sets the symbols which have been parsed out of the Tweet text.
            </summary>
        </member>
        <member name="T:CoreTweet.Entity">
            <summary>
            Represents an entity object in the content posted on Twitter. This is an <c>abstract</c> class.
            </summary>
        </member>
        <member name="P:CoreTweet.Entity.Indices">
            <summary>
            <para>Gets or sets an array of integers indicating the offsets within the Tweet text where the URL begins and ends.</para>
            <para>The first integer represents the location of the first character of the URL in the Tweet text.</para>
            <para>The second integer represents the location of the first non-URL character occurring after the URL (or the end of the string if the URL is the last part of the Tweet text).</para>
            </summary>
        </member>
        <member name="T:CoreTweet.SymbolEntity">
            <summary>
            Represents a symbol object that contains a symbol in the content posted on Twitter.
            </summary>
        </member>
        <member name="P:CoreTweet.SymbolEntity.Text">
            <summary>
            Gets or sets the name of the hashtag, minus the leading '#' or '$' character.
            </summary>
        </member>
        <member name="T:CoreTweet.HashtagEntity">
            <summary>
            Represents a &#35;hashtag object.
            </summary>
        </member>
        <member name="T:CoreTweet.CashtagEntity">
            <summary>
            Represents a $cashtag object.
            </summary>
        </member>
        <member name="T:CoreTweet.MediaEntity">
            <summary>
            Represents a media object that contains the URLs, sizes and type of the media.
            </summary>
        </member>
        <member name="P:CoreTweet.MediaEntity.Id">
            <summary>
            Gets or sets the ID of the media expressed as a 64-bit integer.
            </summary>
        </member>
        <member name="P:CoreTweet.MediaEntity.AdditionalMediaInfo">
            <summary>
            Gets or sets the additional media info provided by the publisher.
            </summary>
        </member>
        <member name="P:CoreTweet.MediaEntity.ExtAltText">
            <summary>
            Gets or sets the alt text.
            </summary>
        </member>
        <member name="P:CoreTweet.MediaEntity.MediaUrl">
            <summary>
            Gets or sets the URL pointing directly to the uploaded media file.
            </summary>
        </member>
        <member name="P:CoreTweet.MediaEntity.MediaUrlHttps">
            <summary>
            Gets or sets the URL pointing directly to the uploaded media file, for embedding on https pages.
            </summary>
        </member>
        <member name="P:CoreTweet.MediaEntity.Sizes">
            <summary>
            Gets or sets the object showing available sizes for the media file.
            </summary>
        </member>
        <member name="P:CoreTweet.MediaEntity.SourceStatusId">
            <summary>
            <para>Gets or sets the ID  points to the original Tweet.</para>
            <para>(Only for Tweets containing media that was originally associated with a different tweet.)</para>
            </summary>
        </member>
        <member name="P:CoreTweet.MediaEntity.Type">
            <summary>
            Gets or sets the type of uploaded media.
            </summary>
        </member>
        <member name="P:CoreTweet.MediaEntity.VideoInfo">
            <summary>
            Gets or sets the information of the uploaded video or animated GIF.
            </summary>
        </member>
        <member name="M:CoreTweet.MediaEntity.ToString">
            <summary>
            Returns the ID of this instance.
            </summary>
            <returns>The ID of this instance.</returns>
        </member>
        <member name="T:CoreTweet.MediaSize">
            <summary>
            Represents the size of the <see cref="T:CoreTweet.MediaSizes"/>.
            </summary>
        </member>
        <member name="P:CoreTweet.MediaSize.Height">
            <summary>
            Gets or sets the height in pixels of the size.
            </summary>
        </member>
        <member name="P:CoreTweet.MediaSize.Resize">
            <summary>
            <para>Gets or sets the resizing method used to obtain the size.</para>
            <para>A value of fit means that the media was resized to fit one dimension, keeping its native aspect ratio.</para>
            <para>A value of crop means that the media was cropped in order to fit a specific resolution.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.MediaSize.Width">
            <summary>
            Gets or sets the width in pixels of the size.
            </summary>
        </member>
        <member name="T:CoreTweet.MediaSizes">
            <summary>
            Represents the variations of the media.
            </summary>
        </member>
        <member name="P:CoreTweet.MediaSizes.Large">
            <summary>
            Gets or sets the information for a large-sized version of the media.
            </summary>
        </member>
        <member name="P:CoreTweet.MediaSizes.Medium">
            <summary>
            Gets or sets the information for a medium-sized version of the media.
            </summary>
        </member>
        <member name="P:CoreTweet.MediaSizes.Small">
            <summary>
            Gets or sets the information for a small-sized version of the media.
            </summary>
        </member>
        <member name="P:CoreTweet.MediaSizes.Thumb">
            <summary>
            Gets or sets the information for a thumbnail-sized version of the media.
            </summary>
        </member>
        <member name="T:CoreTweet.VideoInfo">
            <summary>
            Represents a video_info object which is included by a video or animated GIF entity.
            </summary>
        </member>
        <member name="P:CoreTweet.VideoInfo.AspectRatio">
            <summary>
            Gets or sets the aspect ratio of the video,
            as a simplified fraction of width and height in a 2-element array.
            Typical values are [4, 3] or [16, 9]
            </summary>
        </member>
        <member name="P:CoreTweet.VideoInfo.DurationMillis">
            <summary>
            Gets or sets the length of the video, in milliseconds.
            </summary>
        </member>
        <member name="P:CoreTweet.VideoInfo.Variants">
            <summary>
            Gets or sets the different encodings/streams of the video.
            </summary>
        </member>
        <member name="T:CoreTweet.VideoVariant">
            <summary>
            Represents a variant of the video.
            </summary>
        </member>
        <member name="P:CoreTweet.VideoVariant.Bitrate">
            <summary>
            Gets or sets the bitrate of this variant.
            </summary>
        </member>
        <member name="P:CoreTweet.VideoVariant.ContentType">
            <summary>
            Gets or sets the MIME type of this variant.
            </summary>
        </member>
        <member name="P:CoreTweet.VideoVariant.Url">
            <summary>
            Gets or sets the URL of the video or playlist.
            </summary>
        </member>
        <member name="P:CoreTweet.MediaAction.Url">
            <summary>
            Gets or sets the URL.
            </summary>
        </member>
        <member name="T:CoreTweet.UrlEntity">
            <summary>
            Represents a URL object that contains the string for display and the raw URL.
            </summary>
        </member>
        <member name="P:CoreTweet.UrlEntity.DisplayUrl">
            <summary>
            Gets or sets the URL to display on clients.
            </summary>
        </member>
        <member name="P:CoreTweet.UrlEntity.ExpandedUrl">
            <summary>
            Gets or sets the expanded version of <see cref="P:CoreTweet.UrlEntity.DisplayUrl"/>.
            </summary>
        </member>
        <member name="P:CoreTweet.UrlEntity.Url">
            <summary>
            Gets or sets the wrapped URL, corresponding to the value embedded directly into the raw Tweet text, and the values for the indices parameter.
            </summary>
        </member>
        <member name="T:CoreTweet.UserMentionEntity">
            <summary>
            Represents a mention object that contains the user information.
            </summary>
        </member>
        <member name="P:CoreTweet.UserMentionEntity.Id">
            <summary>
            Nullable.
            Gets or sets the ID of the mentioned user.
            </summary>
        </member>
        <member name="P:CoreTweet.UserMentionEntity.Name">
            <summary>
            Gets or sets display name of the referenced user.
            </summary>
        </member>
        <member name="P:CoreTweet.UserMentionEntity.ScreenName">
            <summary>
            Gets or sets screen name of the referenced user.
            </summary>
        </member>
        <member name="M:CoreTweet.UserMentionEntity.ToString">
            <summary>
            Returns the ID of this instance.
            </summary>
            <returns>The ID of this instance.</returns>
        </member>
        <member name="T:CoreTweet.Error">
            <summary>
            Represents the error response from Twitter.
            </summary>
        </member>
        <member name="P:CoreTweet.Error.Code">
            <summary>
            <para>Gets or sets the machine-parsable code.</para>
            <para>While the text for an error message may change, the codes will stay the same.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.Error.Message">
            <summary>
            Gets or sets the error message.
            </summary>
        </member>
        <member name="T:CoreTweet.ErrorCode">
            <summary>
            Represents machine-parseable error code from Twitter (convertible from/to <see cref="P:CoreTweet.Error.Code"/>).
            </summary>
        </member>
        <member name="F:CoreTweet.ErrorCode.CouldNotAuthenticate">
            <summary>
            The request could not be completed as requested.
            </summary>
        </member>
        <member name="F:CoreTweet.ErrorCode.PageDoesNotExist">
            <summary>
            The specified resource was not found.
            </summary>
        </member>
        <member name="F:CoreTweet.ErrorCode.NotAuthorizedToUseThisEndpoint">
            <summary>
            Undocumented: The client is not authorized to use this endpoint.
            </summary>
        </member>
        <member name="F:CoreTweet.ErrorCode.ParameterIsMissing">
            <summary>
            Undocumented: The required parameter is missing.
            </summary>
        </member>
        <member name="F:CoreTweet.ErrorCode.YouCannotBlockYourself">
            <summary>
            Undocumented: The user can't block the user itself.
            </summary>
        </member>
        <member name="F:CoreTweet.ErrorCode.UserHasBeenSuspended">
            <summary>
            Undocumented: The user has been suspended.
            </summary>
        </member>
        <member name="F:CoreTweet.ErrorCode.AccountIsSuspended">
            <summary>
            The user is suspended (as well as its access token) and could not complete the request.
            </summary>
        </member>
        <member name="F:CoreTweet.ErrorCode.BackEndServiceIsUnavailable">
            <summary>
            Undocumented: The back end service is unavailable.
            </summary>
        </member>
        <member name="F:CoreTweet.ErrorCode.RestApiV1IsNoLongerActive">
            <summary>
            The request was a REST API v1 request (which is no longer available).
            </summary>
        </member>
        <member name="F:CoreTweet.ErrorCode.RateLimitExceeded">
            <summary>
            The request could not be completed because it reached the current rate limit window.
            </summary>
        </member>
        <member name="F:CoreTweet.ErrorCode.InvalidOrExpiredToken">
            <summary>
            The access token used in the request is incorrect or has been expired.
            </summary>
        </member>
        <member name="F:CoreTweet.ErrorCode.SslIsRequired">
            <summary>
            Only SSL connections are allowed in specified request.
            </summary>
        </member>
        <member name="F:CoreTweet.ErrorCode.NotAllowedToAccessOrDeleteDirectMessages">
            <summary>
            Undocumented: The client is not allowed to access or delete direct messages.
            </summary>
        </member>
        <member name="F:CoreTweet.ErrorCode.UnableToVerifyCredentials">
            <summary>
            Undocumented: Credentials in the request is invalid (thrown on application-only authentication).
            </summary>
        </member>
        <member name="F:CoreTweet.ErrorCode.CannotFindSpecifiedUser">
            <summary>
            Undocumented: Cannot find specified user.
            </summary>
        </member>
        <member name="F:CoreTweet.ErrorCode.OverCapacity">
            <summary>
            Twitter is temporarily over capacity.
            </summary>
        </member>
        <member name="F:CoreTweet.ErrorCode.InternalError">
            <summary>
            An unknown internal occurred while Twitter trying to serve the request.
            </summary>
        </member>
        <member name="F:CoreTweet.ErrorCode.CouldNotAuthenticate_TimestampIsInvalid">
            <summary>
            The oauth_timestamp of the request is either ahead or behind its acceptable range.
            </summary>
        </member>
        <member name="F:CoreTweet.ErrorCode.BlockedFromOperatingStatus">
            <summary>
            Undocumented: The authenticating user has been blocked from favoriting or retweeting this user's tweets.
            </summary>
        </member>
        <member name="F:CoreTweet.ErrorCode.AlreadyFavorited">
            <summary>
            Undocumented: The authenticating user has already favorited specified status.
            </summary>
        </member>
        <member name="F:CoreTweet.ErrorCode.CannotFavoriteTweetsOfProtectedUsersYouAreNotFollowing">
            <summary>
            Undocumented: The authenticating user cannot favorite the protected user s/he doesn't follow.
            </summary>
        </member>
        <member name="F:CoreTweet.ErrorCode.NoStatusFoundWithThatId">
            <summary>
            Undocumented: Cannot find specified status.
            </summary>
        </member>
        <member name="F:CoreTweet.ErrorCode.CannotSendDirectMessagesToUsersNotFollowingMe">
            <summary>
            Undocumented: The authenticating user cannot send a direct message to a user not following him/her.
            </summary>
        </member>
        <member name="F:CoreTweet.ErrorCode.CannotSendLongDirectMessages">
            <summary>
            Undocumented: The direct message is too long to send or blank.
            </summary>
        </member>
        <member name="F:CoreTweet.ErrorCode.YouCannotFollowYourself">
            <summary>
            Undocumented: The authenticating user cannot follow the user itself.
            </summary>
        </member>
        <member name="F:CoreTweet.ErrorCode.ThisAccountHasBeenSuspended">
            <summary>
            Undocumented: This account has been suspended.
            </summary>
        </member>
        <member name="F:CoreTweet.ErrorCode.AlreadyFollowRequested">
            <summary>
            Undocumented: The authenticating user has already requested to follow specified user.
            </summary>
        </member>
        <member name="F:CoreTweet.ErrorCode.UnableToFollowMorePeople">
            <summary>
            The follow request could not be completed due to some kind of limit.
            </summary>
        </member>
        <member name="F:CoreTweet.ErrorCode.BlockedFromFollowingUser">
            <summary>
            Undocumented: The authenticating user is blocked from following the user.
            </summary>
        </member>
        <member name="F:CoreTweet.ErrorCode.CouldNotFindStatus">
            <summary>
            Undocumented: The status is not found.
            </summary>
        </member>
        <member name="F:CoreTweet.ErrorCode.NotAuthorizedToSeeStatus">
            <summary>
            The requested Tweet cannot be viewed by the authenticating user.
            </summary>
        </member>
        <member name="F:CoreTweet.ErrorCode.CannotDeleteOtherUsersStatus">
            <summary>
            Undocumented: The authenticating user cannot delete another user's status.
            </summary>
        </member>
        <member name="F:CoreTweet.ErrorCode.OverStatusUpdateLimit">
            <summary>
            The authenticating user reached some kind of status update limit.
            </summary>
        </member>
        <member name="F:CoreTweet.ErrorCode.OverCharactersLimit">
            <summary>
            Undocumented: The status is too long to send.
            </summary>
        </member>
        <member name="F:CoreTweet.ErrorCode.StatusIsDuplicate">
            <summary>
            The status text has been Tweeted already by the authenticated user.
            </summary>
        </member>
        <member name="F:CoreTweet.ErrorCode.StatusContainsMalware">
            <summary>
            Undocumented: The status might contain the URL to a malware.
            </summary>
        </member>
        <member name="F:CoreTweet.ErrorCode.ErrorCreatingStatus">
            <summary>
            Undocumented: Cannot create status.
            </summary>
        </member>
        <member name="F:CoreTweet.ErrorCode.StatusCreationFailed">
            <summary>
            Undocumented: Cannot create status.
            </summary>
        </member>
        <member name="F:CoreTweet.ErrorCode.OverDailyPhotoLimit">
            <summary>
            Undocumented: The authenticating user reached some kind of photo update limit.
            </summary>
        </member>
        <member name="F:CoreTweet.ErrorCode.MediaIsTooLarge">
            <summary>
            Undocumented: One or more of the uploaded media is too large.
            </summary>
        </member>
        <member name="F:CoreTweet.ErrorCode.BadRequest">
            <summary>
            Undocumented: Bad request.
            </summary>
        </member>
        <member name="F:CoreTweet.ErrorCode.BadAuthenticationData">
            <summary>
            Authentication data of the request was invalid or missing.
            </summary>
        </member>
        <member name="F:CoreTweet.ErrorCode.CredentialsDoNotAllowAccessToThisResource">
            <summary>
            Undocumented: The client is not allowed to access this resource.
            </summary>
        </member>
        <member name="F:CoreTweet.ErrorCode.DetectedAutomatedAction">
            <summary>
            Twitter detected automated actions and could not complete the request to prevent malicious activities.
            </summary>
        </member>
        <member name="F:CoreTweet.ErrorCode.MustVerifyLogin">
            <summary>
            Authenticating user must verify login using Twitter's "login verification" feature.
            </summary>
        </member>
        <member name="F:CoreTweet.ErrorCode.EndpointHasRetired">
            <summary>
            The request to a retired URL cannot be completed.
            </summary>
        </member>
        <member name="F:CoreTweet.ErrorCode.CannotPerformWriteActions">
            <summary>
            The application is restricted from performing write-related actions.
            </summary>
        </member>
        <member name="F:CoreTweet.ErrorCode.CannotMuteMyself">
            <summary>
            The authenticated used cannot mute the user itself.
            </summary>
        </member>
        <member name="F:CoreTweet.ErrorCode.NotMutingSpecifiedUser">
            <summary>
            The unmute request could not be completed because the authenticating user is not muting the specified user.
            </summary>
        </member>
        <member name="F:CoreTweet.ErrorCode.AlreadyRetweetedThisTweet">
            <summary>
            Undocumented: The authenticating user has already retweeted specified status.
            </summary>
        </member>
        <member name="T:CoreTweet.Configurations">
            <summary>
            Represents the current configuration used by Twitter including twitter.com slugs which are not usernames, maximum photo resolutions, and t.co URL lengths.
            </summary>
        </member>
        <member name="P:CoreTweet.Configurations.CharactersReservedPerMedia">
            <summary>
            Gets or sets the count of the characters that is reserved for a media.
            </summary>
        </member>
        <member name="P:CoreTweet.Configurations.DMTextCharacterLimit">
            <summary>
            Gets or sets the limit of the characters that can be sent as a DM.
            </summary>
        </member>
        <member name="P:CoreTweet.Configurations.MaxMediaPerUpload">
            <summary>
            Gets or sets the count of the limit of the count of medias that can be uploaded at once.
            </summary>
        </member>
        <member name="P:CoreTweet.Configurations.NonUsernamePaths">
            <summary>
            <para>Gets or sets the paths in twitter.com/ that is not an username.</para>
            <para>They are used for pages of Twitter.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.Configurations.PhotoSizeLimit">
            <summary>
            Gets or sets the limit of the size of media that can be uploaded.
            </summary>
        </member>
        <member name="P:CoreTweet.Configurations.ShortUrlLength">
            <summary>
            Gets or sets the length of the shorten URL.
            </summary>
        </member>
        <member name="P:CoreTweet.Configurations.ShortUrlLengthHttps">
            <summary>
            Gets or sets the length of the shorten URL that uses SSL.
            </summary>
        </member>
        <member name="P:CoreTweet.Configurations.PhotoSizes">
            <summary>
            Gets or sets the sizes of a photo.
            </summary>
        </member>
        <member name="P:CoreTweet.Configurations.RateLimit">
            <summary>
            Gets or sets the rate limit of the response.
            </summary>
            <remarks>
            This property will always be null when obtained from (most of) the POST endpoints, unless the rate is explicitly stated in the Twitter official documentation.
            </remarks>
        </member>
        <member name="P:CoreTweet.Configurations.Json">
            <summary>
            Gets or sets the JSON of the response.
            </summary>
        </member>
        <member name="T:CoreTweet.Language">
            <summary>
            Represents a language code, name and status.
            </summary>
        </member>
        <member name="P:CoreTweet.Language.Code">
            <summary>
            Gets or sets the the language code.
            </summary>
        </member>
        <member name="P:CoreTweet.Language.Name">
            <summary>
            Gets or sets the name of the language.
            </summary>
        </member>
        <member name="P:CoreTweet.Language.Status">
            <summary>
            Gets or sets the status of the language.
            </summary>
        </member>
        <member name="T:CoreTweet.StringResponse">
            <summary>
            Represents the Twitter Terms of Service.
            </summary>
        </member>
        <member name="P:CoreTweet.StringResponse.Value">
            <summary>
            Gets or sets the value of response.
            </summary>
        </member>
        <member name="P:CoreTweet.StringResponse.RateLimit">
            <summary>
            Gets or sets the rate limit of the response.
            </summary>
            <remarks>
            This property will always be null when obtained from (most of) the POST endpoints, unless the rate is explicitly stated in the Twitter official documentation.
            </remarks>
        </member>
        <member name="P:CoreTweet.StringResponse.Json">
            <summary>
            Gets or sets the JSON of the response.
            </summary>
        </member>
        <member name="M:CoreTweet.StringResponse.ToString">
            <summary>
            Returns the ID of this instance.
            </summary>
            <returns>The ID of this instance.</returns>
        </member>
        <member name="T:CoreTweet.List">
            <summary>
            Represents a collections of tweets, culled from a curated list of Twitter users.
            </summary>
        </member>
        <member name="P:CoreTweet.List.Slug">
            <summary>
            Gets or sets the string that becomes unique representation by combining an owner_id or owner_screen_name.
            </summary>
        </member>
        <member name="P:CoreTweet.List.Name">
            <summary>
            Gets or sets the name of the List.
            </summary>
        </member>
        <member name="P:CoreTweet.List.CreatedAt">
            <summary>
            Gets or sets the when the List was created.
            </summary>
        </member>
        <member name="P:CoreTweet.List.Uri">
            <summary>
            <para>Gets or sets the URL of the List.</para>
            <para>Usage: string.Format("https://twitter.com{0}", uri);</para>
            </summary>
        </member>
        <member name="P:CoreTweet.List.SubscriberCount">
            <summary>
            Gets or sets the number of users following the List.
            </summary>
        </member>
        <member name="P:CoreTweet.List.MemberCount">
            <summary>
            Gets or sets the number of members in the List.
            </summary>
        </member>
        <member name="P:CoreTweet.List.Id">
            <summary>
            Gets or sets the integer representation of the unique identifier for the List.
            </summary>
        </member>
        <member name="P:CoreTweet.List.Mode">
            <summary>
            Gets or sets a value that indicates whether the List has been published by the owner.
            </summary>
        </member>
        <member name="P:CoreTweet.List.FullName">
            <summary>
            Gets or sets the full name of the List.
            </summary>
        </member>
        <member name="P:CoreTweet.List.Description">
            <summary>
            Gets or sets the user-defined string describes the List. Nullable.
            </summary>
        </member>
        <member name="P:CoreTweet.List.User">
            <summary>
            Gets or sets the user of the owner of the List.
            </summary>
        </member>
        <member name="P:CoreTweet.List.IsFollowing">
            <summary>
            Gets or sets a value that determines if the List has been followed by the authenticating user.
            </summary>
        </member>
        <member name="M:CoreTweet.List.ToString">
            <summary>
            Returns the ID of this instance.
            </summary>
            <returns>The ID of this instance.</returns>
        </member>
        <member name="T:CoreTweet.ListResponse">
            <summary>
            Represents a collections of tweets, culled from a curated list of Twitter users with the rate limit.
            </summary>
        </member>
        <member name="P:CoreTweet.ListResponse.RateLimit">
            <summary>
            Gets or sets the rate limit of the response.
            </summary>
            <remarks>
            This property will always be null when obtained from (most of) the POST endpoints, unless the rate is explicitly stated in the Twitter official documentation.
            </remarks>
        </member>
        <member name="P:CoreTweet.ListResponse.Json">
            <summary>
            Gets or sets the JSON of the response.
            </summary>
        </member>
        <member name="T:CoreTweet.MediaUploadResult">
            <summary>
            Represents the result of the uploaded media.
            </summary>
        </member>
        <member name="P:CoreTweet.MediaUploadResult.ExpiresAfterSecs">
            <summary>
            Gets or sets the remaining time before the media ID expires.
            </summary>
        </member>
        <member name="P:CoreTweet.MediaUploadResult.Image">
            <summary>
            Gets or sets the data of the image.
            </summary>
        </member>
        <member name="P:CoreTweet.MediaUploadResult.MediaId">
            <summary>
            Gets or sets the ID of the media.
            </summary>
        </member>
        <member name="P:CoreTweet.MediaUploadResult.Size">
            <summary>
            Gets or sets the size of the media.
            </summary>
        </member>
        <member name="P:CoreTweet.MediaUploadResult.Video">
            <summary>
            Gets or sets the data of the video.
            </summary>
        </member>
        <member name="P:CoreTweet.MediaUploadResult.RateLimit">
            <summary>
            Gets or sets the rate limit of the response.
            </summary>
            <remarks>
            This property will always be null when obtained from (most of) the POST endpoints, unless the rate is explicitly stated in the Twitter official documentation.
            </remarks>
        </member>
        <member name="P:CoreTweet.MediaUploadResult.Json">
            <summary>
            Gets or sets the JSON of the response.
            </summary>
        </member>
        <member name="M:CoreTweet.MediaUploadResult.ToString">
            <summary>
            Returns the ID of this instance.
            </summary>
            <returns>The ID of this instance.</returns>
        </member>
        <member name="T:CoreTweet.UploadedImage">
            <summary>
            Represents the detail data of the uploaded image.
            </summary>
        </member>
        <member name="P:CoreTweet.UploadedImage.Width">
            <summary>
            Gets or sets the width of the image.
            </summary>
        </member>
        <member name="P:CoreTweet.UploadedImage.Height">
            <summary>
            Gets or sets the height of the image.
            </summary>
        </member>
        <member name="P:CoreTweet.UploadedImage.ImageType">
            <summary>
            Gets or sets the type of the image.
            </summary>
        </member>
        <member name="T:CoreTweet.UploadedVideo">
            <summary>
            Represents the detail data of the uploaded video.
            </summary>
        </member>
        <member name="P:CoreTweet.UploadedVideo.VideoType">
            <summary>
            Gets or sets the MIME type of the video.
            </summary>
        </member>
        <member name="T:CoreTweet.UploadMediaType">
            <summary>
            Provides the type of media to upload.
            </summary>
        </member>
        <member name="F:CoreTweet.UploadMediaType.Image">
            <summary>
            An image file.
            </summary>
        </member>
        <member name="F:CoreTweet.UploadMediaType.Video">
            <summary>
            A video file.
            </summary>
        </member>
        <member name="T:CoreTweet.UploadInitCommandResult">
            <summary>
            Represents the result of INIT command.
            </summary>
        </member>
        <member name="P:CoreTweet.UploadInitCommandResult.ExpiresAfterSecs">
            <summary>
            Gets or sets the remaining time before the media ID expires.
            </summary>
        </member>
        <member name="P:CoreTweet.UploadInitCommandResult.MediaId">
            <summary>
            Gets or sets the ID of the media.
            </summary>
        </member>
        <member name="P:CoreTweet.UploadInitCommandResult.RateLimit">
            <summary>
            Gets or sets the rate limit of the response.
            </summary>
            <remarks>
            This property will always be null when obtained from (most of) the POST endpoints, unless the rate is explicitly stated in the Twitter official documentation.
            </remarks>
        </member>
        <member name="P:CoreTweet.UploadInitCommandResult.Json">
            <summary>
            Gets or sets the JSON of the response.
            </summary>
        </member>
        <member name="M:CoreTweet.UploadInitCommandResult.ToString">
            <summary>
            Returns the ID of this instance.
            </summary>
            <returns>The ID of this instance.</returns>
        </member>
        <member name="T:CoreTweet.OAuth2Token">
            <summary>
            The OAuth2 token, which is usually used for Application-only authentication.
            </summary>
        </member>
        <member name="P:CoreTweet.OAuth2Token.BearerToken">
            <summary>
            Gets or sets the access token.
            </summary>
        </member>
        <member name="M:CoreTweet.OAuth2Token.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CoreTweet.OAuth2Token"/> class.
            </summary>
        </member>
        <member name="M:CoreTweet.OAuth2Token.#ctor(CoreTweet.OAuth2Token)">
            <summary>
            Initializes a new instance of the <see cref="T:CoreTweet.OAuth2Token"/> class with a specified token.
            </summary>
            <param name="e">The token.</param>
        </member>
        <member name="M:CoreTweet.OAuth2Token.CreateAuthorizationHeader(CoreTweet.MethodType,System.Uri,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Creates a string for Authorization header including bearer token.
            </summary>
            <param name="type">The type of the HTTP request.</param>
            <param name="url">The URL.</param>
            <param name="parameters">The parameters.</param>
            <returns>A string for Authorization header.</returns>
        </member>
        <member name="M:CoreTweet.OAuth2Token.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:CoreTweet.Tokens"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:CoreTweet.Tokens"/>.
            </returns>
        </member>
        <member name="M:CoreTweet.OAuth2Token.Create(System.String,System.String,System.String)">
            <summary>
            Makes an instance of OAuth2Tokens.
            </summary>
            <param name="consumerKey">The consumer key.</param>
            <param name="consumerSecret">The consumer secret.</param>
            <param name="bearer">The bearer token.</param>
        </member>
        <member name="T:CoreTweet.Place">
            <summary>
            Represents a place, which are specific, named locations with corresponding geo coordinates.
            </summary>
            <remarks>
            <para>They can be attached to Tweets by specifying a place_id when tweeting.</para>
            <para>Tweets associated with places are not necessarily issued from that location but could also potentially be about that location.</para>
            <para>Places can be searched for.</para>
            <para>Tweets can also be found by place_id.</para>
            </remarks>
        </member>
        <member name="P:CoreTweet.Place.Attributes">
            <summary>
            <para>Gets or sets a hash of variant information about the place.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.Place.BoundingBox">
            <summary>
            Gets or sets a bounding box of coordinates which encloses this place.
            </summary>
        </member>
        <member name="P:CoreTweet.Place.ContainedWithin">
            <summary>
            Gets or sets the array of Places contained within this Place.
            </summary>
        </member>
        <member name="P:CoreTweet.Place.Country">
            <summary>
            Gets or sets the name of the country containing this place.
            </summary>
        </member>
        <member name="P:CoreTweet.Place.CountryCode">
            <summary>
            Gets or sets the shortened country code representing the country containing this place.
            </summary>
        </member>
        <member name="P:CoreTweet.Place.FullName">
            <summary>
            Gets or sets the full human-readable representation of the name of the place.
            </summary>
        </member>
        <member name="P:CoreTweet.Place.Id">
            <summary>
            <para>Gets or sets the ID representing this place.</para>
            <para>Note that this is represented as a string, not an integer.</para>
            <para>In trends/available or trends/closest, ID is a Yahoo! Where On Earth ID.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.Place.Name">
            <summary>
            Gets or sets the short human-readable representation of the name of the place.
            </summary>
        </member>
        <member name="P:CoreTweet.Place.PlaceType">
            <summary>
            Gets or sets the type of location represented by this place.
            </summary>
        </member>
        <member name="P:CoreTweet.Place.Url">
            <summary>
            Gets or sets the URL representing the location of additional place metadata for this place.
            </summary>
        </member>
        <member name="M:CoreTweet.Place.ToString">
            <summary>
            Returns the ID of this instance.
            </summary>
            <returns>The ID of this instance.</returns>
        </member>
        <member name="T:CoreTweet.PlaceResponse">
            <summary>
            Represents a place with rate limit.
            </summary>
            <remarks> 
            <para>Places are specific, named locations with corresponding geo coordinates.</para>
            <para>They can be attached to Tweets by specifying a place_id when tweeting.</para>
            <para>Tweets associated with places are not necessarily issued from that location but could also potentially be about that location.</para>
            <para>Places can be searched for.</para>
            <para>Tweets can also be found by place_id.</para>
            </remarks>
        </member>
        <member name="P:CoreTweet.PlaceResponse.RateLimit">
            <summary>
            Gets or sets the rate limit of the response.
            </summary>
            <remarks>
            This property will always be null when obtained from (most of) the POST endpoints, unless the rate is explicitly stated in the Twitter official documentation.
            </remarks>
        </member>
        <member name="P:CoreTweet.PlaceResponse.Json">
            <summary>
            Gets or sets the JSON of the response.
            </summary>
        </member>
        <member name="T:CoreTweet.BoundingBox">
            <summary>
            <para>Represents a bounding box.</para>
            <para>This class can be converted to a JSON with <see cref="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object)"/>.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.BoundingBox.Coordinates">
            <summary>
            <para>Gets or sets a series of longitude and latitude points, defining a box which will contain the Place entity this bounding box is related to.</para>
            <para>Each point is an array in the form of [longitude, latitude].</para>
            <para>Points are grouped into an array per bounding box.</para>
            <para>Bounding box arrays are wrapped in one additional array to be compatible with the polygon notation.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.BoundingBox.Type">
            <summary>
            <para>Gets or sets the type of data encoded in the coordinates property.</para>
            <para>This will be "Polygon" for bounding boxes.</para>
            </summary>
        </member>
        <member name="M:CoreTweet.BoundingBox.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An IEnumerator object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:CoreTweet.BoundingBox.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="T:CoreTweet.GeoResult">
            <summary>
            Represents the places near the given coordinates which are similar in name.
            </summary>
        </member>
        <member name="P:CoreTweet.GeoResult.Places">
            <summary>
            Gets or set the names of the places.
            </summary>
        </member>
        <member name="P:CoreTweet.GeoResult.Token">
            <summary>
            Gets or sets the token needed to be able to create a new place.
            </summary>
        </member>
        <member name="P:CoreTweet.GeoResult.RateLimit">
            <summary>
            Gets or sets the rate limit of the response.
            </summary>
            <remarks>
            This property will always be null when obtained from (most of) the POST endpoints, unless the rate is explicitly stated in the Twitter official documentation.
            </remarks>
        </member>
        <member name="P:CoreTweet.GeoResult.Json">
            <summary>
            Gets or sets the JSON of the response.
            </summary>
        </member>
        <member name="M:CoreTweet.GeoResult.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An IEnumerator object that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:CoreTweet.TrendsResult">
            <summary>
            Represents a trending topics for a specific WOEID.
            </summary>
        </member>
        <member name="P:CoreTweet.TrendsResult.AsOf">
            <summary>
            Gets or sets the UTC datetime that the trends are valid as of.
            </summary>
        </member>
        <member name="P:CoreTweet.TrendsResult.CreatedAt">
            <summary>
            Gets or sets the UTC datetime that this result was created at.
            </summary>
        </member>
        <member name="P:CoreTweet.TrendsResult.Locations">
            <summary>
            Gets or sets the Locations of trending topics.
            </summary>
        </member>
        <member name="P:CoreTweet.TrendsResult.Trends">
            <summary>
            Gets or sets the queried trends.
            </summary>
        </member>
        <member name="M:CoreTweet.TrendsResult.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An IEnumerator object that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:CoreTweet.Location">
            <summary>
            Represents a location.
            </summary>
        </member>
        <member name="P:CoreTweet.Location.Name">
            <summary>
            Gets or sets the name of the location.
            </summary>
        </member>
        <member name="P:CoreTweet.Location.WoeId">
            <summary>
            Gets or sets the WOEID of the location.
            </summary>
        </member>
        <member name="M:CoreTweet.Location.ToString">
            <summary>
            Returns the ID of this instance.
            </summary>
            <returns>The ID of this instance.</returns>
        </member>
        <member name="T:CoreTweet.Trend">
            <summary>
            Represents the trend.
            </summary>
        </member>
        <member name="P:CoreTweet.Trend.Name">
            <summary>
            Gets or sets the name of this trend.
            </summary>
        </member>
        <member name="P:CoreTweet.Trend.Url">
            <summary>
            Gets or sets the URL to search this trend.
            </summary>
        </member>
        <member name="P:CoreTweet.Trend.Query">
            <summary>
            Gets or sets the query string for search.
            </summary>
        </member>
        <member name="P:CoreTweet.Trend.TweetVolume">
            <summary>
            Get or sets the volume of tweets per trend for the last 24 hours.
            </summary>
        </member>
        <member name="T:CoreTweet.TrendLocation">
            <summary>
            Represents a location.
            </summary>
        </member>
        <member name="P:CoreTweet.TrendLocation.Country">
            <summary>
            Gets or sets the country name of the location.
            </summary>
        </member>
        <member name="P:CoreTweet.TrendLocation.CountryCode">
            <summary>
            Gets or sets the country code of the location.
            </summary>
        </member>
        <member name="P:CoreTweet.TrendLocation.ParentId">
            <summary>
            Gets or sets the WOEID of the parent location.
            </summary>
        </member>
        <member name="P:CoreTweet.TrendLocation.PlaceType">
            <summary>
            Gets or sets the WOEID type of the location.
            </summary>
        </member>
        <member name="P:CoreTweet.TrendLocation.Url">
            <summary>
            Gets or sets the URL of Yahoo! GeoPlanet API.
            </summary>
        </member>
        <member name="T:CoreTweet.PlaceType">
            <summary>
            Represents a WOEID type of a location.
            </summary>
        </member>
        <member name="P:CoreTweet.PlaceType.Code">
            <summary>
            Gets or sets the WOEID of the location.
            </summary>
        </member>
        <member name="P:CoreTweet.PlaceType.Name">
            <summary>
            Gets or sets the WOEID name of the location.
            </summary>
        </member>
        <member name="T:CoreTweet.RateLimit">
            <summary>
            Represents the rate limits for a resource family.
            </summary>
            <remarks>
            The rate for (most of) the POST endpoints is not publicly available, unless explicitly stated in the Twitter official documentation.
            </remarks>
        </member>
        <member name="P:CoreTweet.RateLimit.Remaining">
            <summary>
            Gets or sets the left of requesting the resource within the current rate limiting window.
            </summary>
        </member>
        <member name="P:CoreTweet.RateLimit.Reset">
            <summary>
            Gets or sets the reset expiration time.
            </summary>
        </member>
        <member name="P:CoreTweet.RateLimit.Limit">
            <summary>
            Gets or sets the value that represents the limit count within the current rate limiting window.
            </summary>
        </member>
        <member name="T:CoreTweet.SearchQuery">
            <summary>
            Represents a saved search query used in the Twitter Search API.
            </summary>
        </member>
        <member name="P:CoreTweet.SearchQuery.CreatedAt">
            <summary>
            Gets or sets the created time of the saved search.
            </summary>
        </member>
        <member name="P:CoreTweet.SearchQuery.Id">
            <summary>
            Gets or sets the ID of the saved search.
            </summary>
        </member>
        <member name="P:CoreTweet.SearchQuery.Name">
            <summary>
            Gets or sets the name of the saved search.
            </summary>
        </member>
        <member name="P:CoreTweet.SearchQuery.Query">
            <summary>
            Gets or sets the query of the saved search.
            </summary>
        </member>
        <member name="M:CoreTweet.SearchQuery.ToString">
            <summary>
            Returns the ID of this instance.
            </summary>
            <returns>The ID of this instance.</returns>
        </member>
        <member name="T:CoreTweet.SearchQueryResponse">
            <summary>
            Represents a saved search query used in the Twitter Search API with the rate limit.
            </summary>
        </member>
        <member name="P:CoreTweet.SearchQueryResponse.RateLimit">
            <summary>
            Gets or sets the rate limit of the response.
            </summary>
            <remarks>
            This property will always be null when obtained from (most of) the POST endpoints, unless the rate is explicitly stated in the Twitter official documentation.
            </remarks>
        </member>
        <member name="P:CoreTweet.SearchQueryResponse.Json">
            <summary>
            Gets or sets the JSON of the response.
            </summary>
        </member>
        <member name="T:CoreTweet.Setting">
            <summary>
            Represents the settings including current trend, geo and sleep time information.
            </summary>
        </member>
        <member name="P:CoreTweet.Setting.AllowContributorRequest">
            <summary>
            Gets or sets a value that determines who can send you a contributor request.
            </summary>
        </member>
        <member name="P:CoreTweet.Setting.AllowDMsFrom">
            <summary>
            Gets or sets a value that determines who can DM a user. <c>anyone</c> or <c>following</c>
            </summary>
        </member>
        <member name="P:CoreTweet.Setting.AllowDMGroupsFrom">
            <summary>
            Gets or sets a value that determines who can DM a user.
            </summary>
        </member>
        <member name="P:CoreTweet.Setting.AlwaysUseHttps">
            <summary>
            Gets or sets a value that determines if the connections always use https.
            </summary>
        </member>
        <member name="P:CoreTweet.Setting.IsDiscoverableByEmail">
            <summary>
            Gets or sets a value that determines if your friends can discover you by your email address.
            </summary>
        </member>
        <member name="P:CoreTweet.Setting.IsDiscoverableByMobilePhone">
            <summary>
            Gets or sets a value that determines if your friends can discover you by your phone number.
            </summary>
        </member>
        <member name="P:CoreTweet.Setting.DisplaySensitiveMedia">
            <summary>
            Gets or sets a value that determines if the user would like to see sensitive media.
            </summary>
        </member>
        <member name="P:CoreTweet.Setting.GeoEnabled">
            <summary>
            <para>Gets or sets a value that determines if the user has enabled the possibility of geotagging their Tweets.</para>
            <para>This field must be true for the current user to attach geographic data when using POST statuses/update.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.Setting.Language">
            <summary>
            <para>Gets or sets the BCP 47 code for the user's self-declared user interface language.</para>
            <para>May or may not have anything to do with the content of their Tweets.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.Setting.IsProtected">
            <summary>
            Gets or sets a value that determines if the user has chosen to protect their Tweets.
            </summary>
        </member>
        <member name="P:CoreTweet.Setting.ScreenName">
            <summary>
            <para>Gets or sets the screen name, handle, or alias that this user identifies themselves with.</para>
            <para>screen_names are unique but subject to change.</para>
            <para>Use id_str as a user identifier whenever possible.</para>
            <para>Typically a maximum of 15 characters long, but some historical accounts may exist with longer names.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.Setting.ShowAllInlineMedia">
            <summary>
            Gets or sets a value that determines if the user would like to see media inline. Somewhat disused.
            </summary>
        </member>
        <member name="P:CoreTweet.Setting.SleepTime">
            <summary>
            Gets or sets the sleep time.
            </summary>
        </member>
        <member name="P:CoreTweet.Setting.SmartMute">
            <summary>
            Gets or sets a value that determines if the user has enabled smart mute.
            </summary>
        </member>
        <member name="P:CoreTweet.Setting.TimeZone">
            <summary>
            Gets or sets the time zone.
            </summary>
        </member>
        <member name="P:CoreTweet.Setting.TranslatorType">
            <summary>
            Gets or sets the user's translator type.
            </summary>
        </member>
        <member name="P:CoreTweet.Setting.TrendLocaion">
            <summary>
            Gets or sets the trend locaions.
            </summary>
        </member>
        <member name="P:CoreTweet.Setting.UseCookiePersonalization">
            <summary>
            Gets or sets the value that determines if the user has enabled the cookie personalization.
            </summary>
        </member>
        <member name="P:CoreTweet.Setting.RateLimit">
            <summary>
            Gets or sets the rate limit of the response.
            </summary>
            <remarks>
            This property will always be null when obtained from (most of) the POST endpoints, unless the rate is explicitly stated in the Twitter official documentation.
            </remarks>
        </member>
        <member name="P:CoreTweet.Setting.Json">
            <summary>
            Gets or sets the JSON of the response.
            </summary>
        </member>
        <member name="T:CoreTweet.SleepTime">
            <summary>
            Represents the sleep time of the user's location.
            </summary>
        </member>
        <member name="P:CoreTweet.SleepTime.IsEnabled">
            <summary>
            Gets or sets a value that determines if the sleep time is enabled.
            </summary>
        </member>
        <member name="P:CoreTweet.SleepTime.EndTime">
            <summary>
            Gets or sets the end time.
            </summary>
        </member>
        <member name="P:CoreTweet.SleepTime.StartTime">
            <summary>
            Gets or sets the start time.
            </summary>
        </member>
        <member name="T:CoreTweet.TimeZone">
            <summary>
            Gets or sets the timezone of the user.
            </summary>
        </member>
        <member name="P:CoreTweet.TimeZone.Name">
            <summary>
            Gets or sets the name of the timezone.
            </summary>
        </member>
        <member name="P:CoreTweet.TimeZone.InfoName">
            <summary>
            Gets or sets the Rails TimeZone of the user's timezone.
            </summary>
        </member>
        <member name="P:CoreTweet.TimeZone.UtcOffset">
            <summary>
            Gets or sets the UTC offset from the user's timezone.
            </summary>
        </member>
        <member name="T:CoreTweet.Status">
            <summary>
            Represents the Tweets, which are the basic atomic building block of all things Twitter.
            </summary>
        </member>
        <member name="P:CoreTweet.Status.Id">
            <summary>
            <para>Gets or sets the integer representation of the unique identifier for this Tweet.</para>
            <para>See also: https://dev.twitter.com/docs/twitter-ids-json-and-snowflake</para>
            </summary>
        </member>
        <member name="P:CoreTweet.Status.Contributors">
            <summary>
            <para>Gets or sets the collection of brief user objects (usually only one) indicating users who contributed to the authorship of the tweet, on behalf of the official tweet author.</para>
            <para>Nullable.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.Status.Coordinates">
            <summary>
            <para>Gets or sets the value represents the geographic location of the Tweet as reported by the user or client application.</para>
            <para>Nullable.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.Status.CreatedAt">
            <summary>
            Gets or sets the time when the Tweet was created.
            </summary>
        </member>
        <member name="P:CoreTweet.Status.CurrentUserRetweet">
            <summary>
            <para>Gets or sets the Tweet ID of the user's own retweet of this Tweet, if exists.</para>
            <para>Only surfaces on methods supporting the include_my_retweet parameter, when set to true.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.Status.DisplayTextRange">
            <summary>
            Gets or sets the array of two unicode code point indices, identifying the inclusive start and exclusive end of the displayable content of the tweet.
            </summary>
        </member>
        <member name="P:CoreTweet.Status.Entities">
            <summary>
            Gets or sets the entities which have been parsed out of the text of the Tweet.
            </summary>
        </member>
        <member name="P:CoreTweet.Status.ExtendedEntities">
            <summary>
            Gets or sets the extended entities which may have multiple entities data.
            </summary>
        </member>
        <member name="P:CoreTweet.Status.ExtendedTweet">
            <summary>
            Gets or sets the information about Extended Tweet.
            This property will be set in compatibility mode for streaming APIs.
            </summary>
        </member>
        <member name="P:CoreTweet.Status.FavoriteCount">
            <summary>
            <para>Gets or sets a number of approximately how many times the Tweet has been favorited by Twitter users.</para>
            <para>Nullable.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.Status.IsFavorited">
            <summary>
            <para>Gets or sets a value that determines if the Tweet has been favorited by the authenticating user.</para>
            <para>Nullable.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.Status.FilterLevel">
            <summary>
            <para>Gets or sets a value that indicates the maximum value of the filter_level parameter which may be used and still stream this Tweet.</para>
            <para>Streaming only.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.Status.FullText">
            <summary>
            Gets or sets the entire untruncated Tweet text.
            </summary>
        </member>
        <member name="P:CoreTweet.Status.InReplyToScreenName">
            <summary>
            <para>Gets or sets the screen name of the original Tweet's author if the represented Tweet is a reply.</para>
            <para>Nullable.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.Status.InReplyToStatusId">
            <summary>
            <para>Gets or sets the integer representation of the original Tweet's ID if the represented Tweet is a reply.</para>
            <para>Nullable.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.Status.InReplyToUserId">
            <summary>
            <para>Gets or sets the integer representation of the original Tweet's author ID if the represented Tweet is a reply.</para>
            <para>Nullable.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.Status.IsQuotedStatus">
            <summary>
            <para>Gets or sets a value that determines if the Tweet is a quoted status.</para>
            <para>Nullable.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.Status.Language">
            <summary>
            <para>Gets or sets the BCP 47 language identifier.</para>
            <para>Nullable.</para>
            </summary>
            <value>A BCP 47 language identifier corresponding to the machine-detected language of the Tweet text, or <c>"und"</c> if no language could be detected.</value>
        </member>
        <member name="P:CoreTweet.Status.Place">
            <summary>
            <para>Gets or sets the place that the tweet is associated.</para>
            <para>Nullable.</para>
            <para>See also: https://dev.twitter.com/docs/platform-objects/places</para>
            </summary>
        </member>
        <member name="P:CoreTweet.Status.PossiblySensitive">
            <summary>
            <para>Gets or sets a value that determines if the URL contained in the tweet may contain content or media identified as sensitive content.</para>
            <para>This field only surfaces when a tweet contains a link and the meaning of the filed doesn't pertain to the Tweet content itself.</para>
            <para>Nullable.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.Status.QuotedStatusId">
            <summary>
            <para>Gets or sets the integer representation of the unique identifier for the quoted Tweet in the Tweet.</para>
            <para>Nullable.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.Status.QuotedStatus">
            <summary>
            <para>Gets or sets the quoted Tweet in the Tweet.</para>
            <para>Nullable.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.Status.Scopes">
            <summary>
            <para>Gets or sets a set of key-value pairs indicatse the intended contextual delivery of the containing Tweet.</para>
            <para>Currently used by Twitter's Promoted Products.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.Status.RetweetCount">
            <summary>
            Gets or sets a number of approximately how many times the Tweet has been retweeted by Twitter users.
            </summary>
        </member>
        <member name="P:CoreTweet.Status.IsRetweeted">
            <summary>
            <para>Gets or sets a value that determines if the Tweet has been retweeted by the authenticating user.</para>
            <para>Nullable.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.Status.RetweetedStatus">
            <summary>
            <para>Gets or sets the original Tweet if the status is a retweet.</para>
            <para>Users can amplify the broadcast of tweets authored by other users by retweeting.</para>
            <para>Retweets can be distinguished from typical Tweets by the existence of a retweeted_status attribute.</para>
            <para>This attribute contains a representation of the original Tweet that was retweeted.</para>
            <para>Note that retweets of retweets do not show representations of the intermediary retweet, but only the original tweet.</para>
            <para>(Users can also unretweet a retweet they created by deleting their retweet.) </para>
            </summary>
        </member>
        <member name="P:CoreTweet.Status.Source">
            <summary>
            <para>Gets or sets the utility used to post the Tweet, as an HTML-formatted string.</para>
            <para>A tweet from the Twitter website has a value of "web" (case-insensitive).</para>
            </summary>
        </member>
        <member name="P:CoreTweet.Status.Text">
            <summary>
            Gets or sets the actual text of the status update.
            </summary>
        </member>
        <member name="P:CoreTweet.Status.IsTruncated">
            <summary>
            <para>Gets or sets a value that determines if the value of the text parameter was truncated, for example, as a result of a retweet exceeding the 140 character Tweet length.</para>
            <para>Truncated text will end in ellipsis, like this ...</para>
            </summary>
        </member>
        <member name="P:CoreTweet.Status.User">
            <summary>
            <para>Gets or sets the user who posted the Tweet.</para>
            <para>Perspectival attributes embedded within this object are unreliable.</para>
            <para>Seealso: https://dev.twitter.com/docs/platform-objects/users</para>
            </summary>
        </member>
        <member name="P:CoreTweet.Status.WithheldCopyright">
            <summary>
            <para>Gets or sets a value that determines if this piece of content has been withheld due to a DMCA complaint.</para>
            <para>See also: http://en.wikipedia.org/wiki/Digital_Millennium_Copyright_Act</para>
            </summary>
        </member>
        <member name="P:CoreTweet.Status.WithheldInCountries">
            <summary>
            <para>Gets or sets a list of uppercase two-letter country codes this content is withheld from.</para>
            <para>See also: https://dev.twitter.com/blog/new-withheld-content-fields-api-responses</para>
            </summary>
        </member>
        <member name="P:CoreTweet.Status.WithheldScope">
            <summary>
            <para>Gets or sets the content being withheld is the "status" or a "user."</para>
            <para>See also: https://dev.twitter.com/blog/new-withheld-content-fields-api-responses</para>
            </summary>
        </member>
        <member name="M:CoreTweet.Status.ToString">
            <summary>
            Returns the ID of this instance.
            </summary>
            <returns>The ID of this instance.</returns>
        </member>
        <member name="T:CoreTweet.StatusResponse">
            <summary>
            <para>Represents the Tweet with rate limit.</para>
            <para>Tweets are the basic atomic building block of all things Twitter.</para>
            <para>Users tweet Tweets, also known more generically as "status updates."</para>
            <para>Tweets can be embedded, replied to, favorited, unfavorited and deleted.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.StatusResponse.RateLimit">
            <summary>
            Gets or sets the rate limit of the response.
            </summary>
            <remarks>
            This property will always be null when obtained from (most of) the POST endpoints, unless the rate is explicitly stated in the Twitter official documentation.
            </remarks>
        </member>
        <member name="P:CoreTweet.StatusResponse.Json">
            <summary>
            Gets or sets the JSON of the response.
            </summary>
        </member>
        <member name="T:CoreTweet.Contributors">
            <summary>
            <para>Represents the contributors, a collection of brief user objects (usually only one) indicating users who contributed to the authorship of the tweet, on behalf of the official tweet author.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.Contributors.Id">
            <summary>
            Gets or sets the integer representation of the ID of the user who contributed to the Tweet.
            </summary>
        </member>
        <member name="P:CoreTweet.Contributors.ScreenName">
            <summary>
            Gets or sets the screen name of the user who contributed to the Tweet.
            </summary>
        </member>
        <member name="M:CoreTweet.Contributors.ToString">
            <summary>
            Returns the ID of this instance.
            </summary>
            <returns>The ID of this instance.</returns>
        </member>
        <member name="T:CoreTweet.Coordinates">
            <summary>
            Represents the coordinates that the geographic location with longitude and latitude points.
            </summary>
        </member>
        <member name="P:CoreTweet.Coordinates.Longitude">
            <summary>
            Gets or sets the longitude of the location.
            </summary>
        </member>
        <member name="P:CoreTweet.Coordinates.Latitude">
            <summary>
            Gets or sets the latitude of the location.
            </summary>
        </member>
        <member name="P:CoreTweet.Coordinates.Type">
            <summary>
            <para>Gets or sets the type of data encoded in the coordinates property.</para>
            <para>This will be "Point" for Tweet coordinates fields.</para>
            </summary>
        </member>
        <member name="M:CoreTweet.Coordinates.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CoreTweet.Coordinates"/> class
            </summary>
        </member>
        <member name="M:CoreTweet.Coordinates.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:CoreTweet.Coordinates"/> class
            </summary>
            <param name="longitude">The longitude.</param>
            <param name="latitude">The latitude.</param>
        </member>
        <member name="T:CoreTweet.FilterLevel">
            <summary>
            Values of filter_level parameter and <see cref="P:CoreTweet.Status.FilterLevel"/> field.
            </summary>
        </member>
        <member name="F:CoreTweet.FilterLevel.None">
            <summary>
            No filtering
            </summary>
        </member>
        <member name="F:CoreTweet.FilterLevel.Low">
            <summary>
            Low filtering
            </summary>
        </member>
        <member name="F:CoreTweet.FilterLevel.Medium">
            <summary>
            The most filtering
            </summary>
        </member>
        <member name="T:CoreTweet.CompatExtendedTweet">
            <summary>
            Represents the additional information about Extended Tweet in compatibility mode for streaming APIs.
            </summary>
        </member>
        <member name="P:CoreTweet.CompatExtendedTweet.FullText">
            <summary>
            Gets or sets the entire untruncated Tweet text.
            </summary>
        </member>
        <member name="P:CoreTweet.CompatExtendedTweet.DisplayTextRange">
            <summary>
            Gets or sets the array of two unicode code point indices, identifying the inclusive start and exclusive end of the displayable content of the tweet.
            </summary>
        </member>
        <member name="P:CoreTweet.CompatExtendedTweet.Entities">
            <summary>
            Gets or sets the entities which have been parsed out of the text of the Tweet.
            </summary>
        </member>
        <member name="P:CoreTweet.CompatExtendedTweet.ExtendedEntities">
            <summary>
            Gets or sets the extended entities which may have multiple entities data.
            </summary>
        </member>
        <member name="T:CoreTweet.DirectMessage">
            <summary>
            Represents a direct message.
            </summary>
        </member>
        <member name="P:CoreTweet.DirectMessage.Id">
            <summary>
            Gets or sets the integer representation of the unique identifier for the Direct message.
            </summary>
        </member>
        <member name="P:CoreTweet.DirectMessage.Sender">
            <summary>
            Gets or sets the sender of the Direct message.
            </summary>
        </member>
        <member name="P:CoreTweet.DirectMessage.Recipient">
            <summary>
            Gets or sets the Recipient of the Direct message.
            </summary>
        </member>
        <member name="P:CoreTweet.DirectMessage.CreatedAt">
            <summary>
            Gets or sets the time when the Direct message was created.
            </summary>
        </member>
        <member name="P:CoreTweet.DirectMessage.Entities">
            <summary>
            Gets or sets the entities which have been parsed out of the text of the Direct message.
            </summary>
        </member>
        <member name="P:CoreTweet.DirectMessage.Text">
            <summary>
            Gets or sets the actual text of the Direct message.
            </summary>
        </member>
        <member name="M:CoreTweet.DirectMessage.ToString">
            <summary>
            Returns the ID of this instance.
            </summary>
            <returns>The ID of this instance.</returns>
        </member>
        <member name="T:CoreTweet.DirectMessageResponse">
            <summary>
            Represents a direct message with rate limit.
            </summary>
        </member>
        <member name="P:CoreTweet.DirectMessageResponse.RateLimit">
            <summary>
            Gets or sets the rate limit of the response.
            </summary>
            <remarks>
            This property will always be null when obtained from (most of) the POST endpoints, unless the rate is explicitly stated in the Twitter official documentation.
            </remarks>
        </member>
        <member name="P:CoreTweet.DirectMessageResponse.Json">
            <summary>
            Gets or sets the JSON of the response.
            </summary>
        </member>
        <member name="T:CoreTweet.SearchResult">
            <summary>
            Represents a collection of Tweets.
            </summary>
        </member>
        <member name="P:CoreTweet.SearchResult.SearchMetadata">
            <summary>
            Gets or sets the metadata of the search.
            </summary>
        </member>
        <member name="P:CoreTweet.SearchResult.RateLimit">
            <summary>
            Gets or sets the rate limit of the response.
            </summary>
            <remarks>
            This property will always be null when obtained from (most of) the POST endpoints, unless the rate is explicitly stated in the Twitter official documentation.
            </remarks>
        </member>
        <member name="P:CoreTweet.SearchResult.Json">
            <summary>
            Gets or sets the JSON of the response.
            </summary>
        </member>
        <member name="P:CoreTweet.SearchResult.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="P:CoreTweet.SearchResult.Count">
            <summary>
            Gets the number of elements actually contained in the <see cref="T:CoreTweet.SearchResult"/>.
            </summary>
        </member>
        <member name="M:CoreTweet.SearchResult.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An IEnumerator object that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:CoreTweet.SearchMetadata">
            <summary>
            Represents a metadata of the search.
            </summary>
        </member>
        <member name="T:CoreTweet.PremiumSearchResult">
            <summary>
            Represents a collection of Tweets.
            </summary>
        </member>
        <member name="P:CoreTweet.PremiumSearchResult.Next">
            <summary>
            Gets or sets the next token of the response.
            </summary>
            <remarks>
            This property can be used in a subsequent request to retrieve the next portion of the matching Tweets for that query.
            </remarks>
        </member>
        <member name="P:CoreTweet.PremiumSearchResult.RateLimit">
            <summary>
            Gets or sets the rate limit of the response.
            </summary>
            <remarks>
            This property will always be null when obtained from (most of) the POST endpoints, unless the rate is explicitly stated in the Twitter official documentation.
            </remarks>
        </member>
        <member name="P:CoreTweet.PremiumSearchResult.Json">
            <summary>
            Gets or sets the JSON of the response.
            </summary>
        </member>
        <member name="P:CoreTweet.PremiumSearchResult.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="P:CoreTweet.PremiumSearchResult.Count">
            <summary>
            Gets the number of elements actually contained in the <see cref="T:CoreTweet.PremiumSearchResult"/>.
            </summary>
        </member>
        <member name="M:CoreTweet.PremiumSearchResult.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An IEnumerator object that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:CoreTweet.PremiumSearchCountResult">
            <summary>
            Represents a collection of Tweet counts.
            </summary>
        </member>
        <member name="P:CoreTweet.PremiumSearchCountResult.Next">
            <summary>
            Gets or sets the next token of the response.
            </summary>
            <remarks>
            This property can be used in a subsequent request to retrieve the next portion of the matching Tweets for that query.
            </remarks>
        </member>
        <member name="P:CoreTweet.PremiumSearchCountResult.RateLimit">
            <summary>
            Gets or sets the rate limit of the response.
            </summary>
            <remarks>
            This property will always be null when obtained from (most of) the POST endpoints, unless the rate is explicitly stated in the Twitter official documentation.
            </remarks>
        </member>
        <member name="P:CoreTweet.PremiumSearchCountResult.Json">
            <summary>
            Gets or sets the JSON of the response.
            </summary>
        </member>
        <member name="P:CoreTweet.PremiumSearchCountResult.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="P:CoreTweet.PremiumSearchCountResult.Count">
            <summary>
            Gets the number of elements actually contained in the <see cref="T:CoreTweet.PremiumSearchCountResult"/>.
            </summary>
        </member>
        <member name="M:CoreTweet.PremiumSearchCountResult.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An IEnumerator object that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:CoreTweet.RequestParameters">
            <summary>
            Represents a collection of search parameters.
            </summary>
        </member>
        <member name="P:CoreTweet.RequestParameters.MaxResults">
            <summary>
            Gets or sets the max result count of the request.
            </summary>
        </member>
        <member name="P:CoreTweet.RequestParameters.Bucket">
            <summary>
            Gets or sets the bucket of the request.
            </summary>
        </member>
        <member name="P:CoreTweet.RequestParameters.FromDate">
            <summary>
            Gets or sets the beginning date of the search target of the request.
            </summary>
        </member>
        <member name="P:CoreTweet.RequestParameters.ToDate">
            <summary>
            Gets or sets the finish date of the search target of the request.
            </summary>
        </member>
        <member name="T:CoreTweet.CountPeriod">
            <summary>
            Count period.
            </summary>
        </member>
        <member name="P:CoreTweet.CountPeriod.TimePeriod">
            <summary>
            Gets or sets the time of the period.
            </summary>
        </member>
        <member name="P:CoreTweet.CountPeriod.Count">
            <summary>
            Gets or sets the count of the period.
            </summary>
        </member>
        <member name="T:CoreTweet.TweetMode">
            <summary>
            Rendering modes.
            </summary>
        </member>
        <member name="F:CoreTweet.TweetMode.Compat">
            <summary>
            Compatibility mode.
            </summary>
        </member>
        <member name="F:CoreTweet.TweetMode.Extended">
            <summary>
            Extended mode.
            </summary>
        </member>
        <member name="T:CoreTweet.Bucket">
            <summary>
            The unit of time.
            </summary>
        </member>
        <member name="F:CoreTweet.Bucket.Day">
            <summary>
            Daily.
            </summary>
        </member>
        <member name="F:CoreTweet.Bucket.Hour">
            <summary>
            Hourly.
            </summary>
        </member>
        <member name="F:CoreTweet.Bucket.Minute">
            <summary>
            Minutely.
            </summary>
        </member>
        <member name="T:CoreTweet.Tokens">
            <summary>
            Represents the OAuth tokens.
            </summary>
        </member>
        <member name="P:CoreTweet.Tokens.AccessToken">
            <summary>
            Gets or sets the access token.
            </summary>
        </member>
        <member name="P:CoreTweet.Tokens.AccessTokenSecret">
            <summary>
            Gets or sets the access token secret.
            </summary>
        </member>
        <member name="P:CoreTweet.Tokens.UserId">
            <summary>
            Gets or sets the user ID.
            If you have used <see cref="M:CoreTweet.Tokens.Create(System.String,System.String,System.String,System.String,System.Int64,System.String)" /> and not assigned the parameter 'userID', this will be <c>0</c>.
            </summary>
        </member>
        <member name="P:CoreTweet.Tokens.ScreenName">
            <summary>
            Gets or sets the screen name.
            If you have used <see cref="M:CoreTweet.Tokens.Create(System.String,System.String,System.String,System.String,System.Int64,System.String)" /> and not assigned the parameter 'screenName', this will be <c>null</c>.
            </summary>
        </member>
        <member name="M:CoreTweet.Tokens.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CoreTweet.Tokens"/> class.
            </summary>
        </member>
        <member name="M:CoreTweet.Tokens.#ctor(CoreTweet.Tokens)">
            <summary>
            Initializes a new instance of the <see cref="T:CoreTweet.Tokens"/> class with a specified token.
            </summary>
            <param name="e">The token.</param>
        </member>
        <member name="M:CoreTweet.Tokens.CreateAuthorizationHeader(CoreTweet.MethodType,System.Uri,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Creates a string for Authorization header for OAuth 1.0A.
            </summary>
            <param name="type">The Type of HTTP request.</param>
            <param name="url">The URL.</param>
            <param name="parameters">The parameters.</param>
            <returns>A string for Authorization header.</returns>
        </member>
        <member name="M:CoreTweet.Tokens.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:CoreTweet.Tokens"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:CoreTweet.Tokens"/>.
            </returns>
        </member>
        <member name="M:CoreTweet.Tokens.Create(System.String,System.String,System.String,System.String,System.Int64,System.String)">
            <summary>
            Makes an instance of Tokens.
            <see cref="M:CoreTweet.Tokens.Create(System.String,System.String,System.String,System.String,System.Int64,System.String)" /> will not fetch <see cref="P:CoreTweet.Tokens.UserId" /> and <see cref="P:CoreTweet.Tokens.ScreenName" /> automatically. If you need them, call <see cref="M:CoreTweet.Rest.Account.VerifyCredentials(System.Object)" />.
            </summary>
            <param name="consumerKey">The consumer key.</param>
            <param name="consumerSecret">The consumer secret.</param>
            <param name="accessToken">The access token.</param>
            <param name="accessSecret">The access secret.</param>
            <param name="userID">The user's ID.</param>
            <param name="screenName">The user's screen name.</param>
            <returns>The tokens.</returns>
        </member>
        <member name="T:CoreTweet.User">
            <summary>
            Represents a user.
            </summary>
        </member>
        <member name="P:CoreTweet.User.IsContributorsEnabled">
            <summary>
            Gets or sets a value that determines if the user has an account with "contributor mode" enabled, allowing for Tweets issued by the user to be co-authored by another account. Rarely true.
            </summary>
        </member>
        <member name="P:CoreTweet.User.CreatedAt">
            <summary>
            Gets or sets the UTC datetime that the user account was created on Twitter.
            </summary>
        </member>
        <member name="P:CoreTweet.User.Timestamp">
            <summary>
            Gets or sets the UTC datetime that the user account was created on Twitter.
            </summary>
            <remarks>
            This property will be set for Account Activity API.
            </remarks>
        </member>
        <member name="P:CoreTweet.User.IsDefaultProfile">
            <summary>
            Gets or sets a value that determines if the user has not altered the theme or background of its user profile.
            </summary>
        </member>
        <member name="P:CoreTweet.User.IsDefaultProfileImage">
            <summary>
            Gets or sets a value that determines if the user has not uploaded their own avatar and a default egg avatar is used instead.
            </summary>
        </member>
        <member name="P:CoreTweet.User.Description">
            <summary>
            <para>Gets or sets the user-defined string describing their account.</para>
            <para>Nullable.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.User.Email">
            <summary>
            Gets or sets the email address.
            <para>Nullable.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.User.Entities">
            <summary>
            Gets or sets the entities which have been parsed out of the URL or description fields defined by the user.
            </summary>
        </member>
        <member name="P:CoreTweet.User.FavouritesCount">
            <summary>
            <para>Gets or sets the number of tweets this user has favorited in the account's lifetime.</para>
            <para>British spelling used in the field name for historical reasons.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.User.IsFollowRequestSent">
            <summary>
            <para>Gets or sets a value that determines if the authenticating user has issued a follow request to this protected user account.</para>
            <para>Nullable.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.User.FollowersCount">
            <summary>
            <para>Gets or sets the number of followers this account currently has.</para>
            <para>Under certain conditions of duress, the field will temporarily indicates 0.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.User.FriendsCount">
            <summary>
            <para>Gets or sets the number of the account is following (AKA its followings).</para>
            <para>Under certain conditions of duress, the field will temporarily indicates 0.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.User.IsGeoEnabled">
            <summary>
            <para>Gets or sets a value that determines if the user has enabled the possibility of geotagging their Tweets.</para>
            <para>This field must be true for the current user to attach geographic data when using statuses/update.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.User.Id">
            <summary>
            Gets or sets the integer representation of the unique identifier for this User.
            </summary>
        </member>
        <member name="P:CoreTweet.User.IsTranslator">
            <summary>
            Gets or sets a value that determines if the user is a participant in Twitter's translator community.
            </summary>
        </member>
        <member name="P:CoreTweet.User.IsTranslationEnabled">
            <summary>
            Gets or sets a value that determines if the user is a participant in Twitter's translator community.
            </summary>
        </member>
        <member name="P:CoreTweet.User.Language">
            <summary>
            <para>Gets or sets the BCP 47 code for the user's self-declared user interface language.</para>
            <para>May or may not have anything to do with the content of their Tweets.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.User.ListedCount">
            <summary>
            Gets or sets the number of public lists that the user is a member of.
            </summary>
        </member>
        <member name="P:CoreTweet.User.Location">
            <summary>
            <para>Gets or sets the user-defined location for this account's profile.</para>
            <para>Not necessarily a location nor parsable.</para>
            <para>This field will occasionally be fuzzily interpreted by the Search service.</para>
            <para>Nullable.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.User.IsMuting">
            <summary>
            Gets or sets a value that determines if the user is muted by authenticating user.
            </summary>
        </member>
        <member name="P:CoreTweet.User.Name">
            <summary>
            <para>Gets or sets the name of the user, as they've defined it.</para>
            <para>Not necessarily a person's name.</para>
            <para>Typically capped at 20 characters, but subject to be changed.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.User.ProfileBackgroundColor">
            <summary>
            Gets or sets the hexadecimal color chosen by the user for their background.
            </summary>
        </member>
        <member name="P:CoreTweet.User.ProfileBackgroundImageUrl">
            <summary>
            Gets or sets a HTTP-based URL pointing to the background image the user has uploaded for their profile.
            </summary>
        </member>
        <member name="P:CoreTweet.User.ProfileBackgroundImageUrlHttps">
            <summary>
            Gets or sets a HTTPS-based URL pointing to the background image the user has uploaded for their profile.
            </summary>
        </member>
        <member name="P:CoreTweet.User.IsProfileBackgroundTile">
            <summary>
            Gets or sets a value that determines if the user's <see cref="P:CoreTweet.User.ProfileBackgroundImageUrl"/> should be tiled when displayed.
            </summary>
        </member>
        <member name="P:CoreTweet.User.ProfileBannerUrl">
            <summary>
            Gets or sets a HTTPS-based URL pointing to the standard web representation of the user's uploaded profile banner. By adding a final path element of the URL, you can obtain different image sizes optimized for specific displays. In the future, an API method will be provided to serve these URLs so that you need not modify the original URL. For size variations, please see User Profile Images and Banners.
            </summary>
        </member>
        <member name="P:CoreTweet.User.ProfileImageUrl">
            <summary>
            Gets or sets a HTTP-based URL pointing to the user's avatar image. See User Profile Images and Banners.
            </summary>
        </member>
        <member name="P:CoreTweet.User.ProfileImageUrlHttps">
            <summary>
            Gets or sets a HTTPS-based URL pointing to the user's avatar image.
            </summary>
        </member>
        <member name="P:CoreTweet.User.ProfileLinkColor">
            <summary>
            Gets or sets the hexadecimal color the user has chosen to display links with in their Twitter UI.
            </summary>
        </member>
        <member name="P:CoreTweet.User.ProfileLocation">
            <summary>
            Gets or sets the user-defined location for this account's profile.
            </summary>
        </member>
        <member name="P:CoreTweet.User.ProfileSidebarBorderColor">
            <summary>
            Gets or sets the hexadecimal color the user has chosen to display sidebar borders with in their Twitter UI.
            </summary>
        </member>
        <member name="P:CoreTweet.User.ProfileSidebarFillColor">
            <summary>
            Gets or sets the hexadecimal color the user has chosen to display sidebar backgrounds with in their Twitter UI.
            </summary>
        </member>
        <member name="P:CoreTweet.User.ProfileTextColor">
            <summary>
            Gets or sets the hexadecimal color the user has chosen to display text with in their Twitter UI.
            </summary>
        </member>
        <member name="P:CoreTweet.User.IsProfileUseBackgroundImage">
            <summary>
            Gets or sets a value that determines if the user wants their uploaded background image to be used.
            </summary>
        </member>
        <member name="P:CoreTweet.User.IsProtected">
            <summary>
            Gets or sets a value that determines if the user has chosen to protect their Tweets.
            </summary>
        </member>
        <member name="P:CoreTweet.User.ScreenName">
            <summary>
            <para>Gets or sets the screen name, handle, or alias that this user identifies themselves with.</para>
            <para><see cref="P:CoreTweet.User.ScreenName"/> are unique but subject to be changed.</para>
            <para>Use <see cref="P:CoreTweet.User.Id"/> as a user identifier whenever possible.</para>
            <para>Typically a maximum of 15 characters long, but some historical accounts may exist with longer names.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.User.IsShowAllInlineMedia">
            <summary>
            Gets or sets a value that determines if the user would like to see media inline. Somewhat disused.
            </summary>
        </member>
        <member name="P:CoreTweet.User.Status">
            <summary>
            <para>Gets or sets the user's most recent tweet or retweet.</para>
            <para>In some circumstances, this data cannot be provided and this field will be omitted, null, or empty.</para>
            <para>Perspectival attributes within tweets embedded within users cannot always be relied upon.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.User.StatusesCount">
            <summary>
            Gets or sets the number of tweets (including retweets) issued by the user.
            </summary>
        </member>
        <member name="P:CoreTweet.User.IsSuspended">
            <summary>
            Gets or sets a value that determines if the user has been suspended by Twitter.
            </summary>
        </member>
        <member name="P:CoreTweet.User.TimeZone">
            <summary>
            <para>Gets or sets the string describes the time zone the user declares themselves within.</para>
            <para>Nullable.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.User.TranslatorType">
            <summary>
            Gets or sets the user's translator type.
            </summary>
        </member>
        <member name="P:CoreTweet.User.Url">
            <summary>
            <para>Gets or sets the URL provided by the user in association with their profile.</para>
            <para>Nullable.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.User.UtcOffset">
            <summary>
            <para>Gets or sets the offset from GMT/UTC in seconds.</para>
            <para>Nullable.</para>
            </summary>
        </member>
        <member name="P:CoreTweet.User.IsVerified">
            <summary>
            Gets or sets a value that determines if the user has a verified account.
            </summary>
        </member>
        <member name="P:CoreTweet.User.WithheldInCountries">
            <summary>
            Gets or sets a textual representation of the two-letter country codes this user is withheld from.
            </summary>
        </member>
        <member name="P:CoreTweet.User.WithheldScope">
            <summary>
            Gets or sets the content being withheld is the "status" or a "user."
            </summary>
        </member>
        <member name="M:CoreTweet.User.ToString">
            <summary>
            Returns the ID of this instance.
            </summary>
            <returns>The ID of this instance.</returns>
        </member>
        <member name="T:CoreTweet.UserResponse">
            <summary>
            Represents a user response with rate limit.
            </summary>
        </member>
        <member name="P:CoreTweet.UserResponse.RateLimit">
            <summary>
            Gets or sets the rate limit of the response.
            </summary>
            <remarks>
            This property will always be null when obtained from (most of) the POST endpoints, unless the rate is explicitly stated in the Twitter official documentation.
            </remarks>
        </member>
        <member name="P:CoreTweet.UserResponse.Json">
            <summary>
            Gets or sets the JSON of the response.
            </summary>
        </member>
        <member name="T:CoreTweet.Relationship">
            <summary>
            Represents a relationship with another user.
            </summary>
        </member>
        <member name="P:CoreTweet.Relationship.Target">
            <summary>
            Gets or sets the target of the relationship.
            </summary>
        </member>
        <member name="P:CoreTweet.Relationship.Source">
            <summary>
            Gets or sets the source of the relationship.
            </summary>
        </member>
        <member name="P:CoreTweet.Relationship.RateLimit">
            <summary>
            Gets or sets the rate limit of the response.
            </summary>
            <remarks>
            This property will always be null when obtained from (most of) the POST endpoints, unless the rate is explicitly stated in the Twitter official documentation.
            </remarks>
        </member>
        <member name="P:CoreTweet.Relationship.Json">
            <summary>
            Gets or sets the JSON of the response.
            </summary>
        </member>
        <member name="T:CoreTweet.RelationshipTarget">
            <summary>
            Represents a frienship.
            </summary>
        </member>
        <member name="P:CoreTweet.RelationshipTarget.Id">
            <summary>
            Gets or sets the ID of the user.
            </summary>
        </member>
        <member name="P:CoreTweet.RelationshipTarget.ScreenName">
            <summary>
            Gets or sets the screen name of the user.
            </summary>
        </member>
        <member name="P:CoreTweet.RelationshipTarget.IsFollowing">
            <summary>
            Gets or sets a value that determines if you are following the user.
            </summary>
        </member>
        <member name="P:CoreTweet.RelationshipTarget.IsFollowedBy">
            <summary>
            Gets or sets a value that determines if the user is following you.
            </summary>
        </member>
        <member name="P:CoreTweet.RelationshipTarget.IsFollowingReceived">
            <summary>
            Gets or sets a value indicating whether the user has received a follower request from the other.
            </summary>
        </member>
        <member name="P:CoreTweet.RelationshipTarget.IsFollowingRequested">
            <summary>
            Gets or sets a value indicating whether the user has sent a follower request to the other.
            </summary>
        </member>
        <member name="T:CoreTweet.RelationshipSource">
            <summary>
            Represents a frienship.
            </summary>
        </member>
        <member name="P:CoreTweet.RelationshipSource.CanDM">
            <summary>
            Gets or sets a value that determines if you can send a direct message to the user.
            </summary>
        </member>
        <member name="P:CoreTweet.RelationshipSource.AllReplies">
            <summary>
            Gets or sets a value that determines if you get all replies.
            </summary>
        </member>
        <member name="P:CoreTweet.RelationshipSource.WantsRetweets">
            <summary>
            Gets or sets a value that determines if you want retweets or not.
            </summary>
        </member>
        <member name="P:CoreTweet.RelationshipSource.IsBlocking">
            <summary>
            Gets or sets a value that determines if you are blocking the user.
            </summary>
        </member>
        <member name="P:CoreTweet.RelationshipSource.IsBlockedBy">
            <summary>
            Gets or sets a value that determines if you are blocked by the user.
            </summary>
        </member>
        <member name="P:CoreTweet.RelationshipSource.IsMarkedSpam">
            <summary>
            Gets or sets a value that determines if you marked the user as spam.
            </summary>
        </member>
        <member name="P:CoreTweet.RelationshipSource.IsNotificationsEnabled">
            <summary>
            Gets or sets a value that determines if the notifications of the user enabled or not.
            </summary>
        </member>
        <member name="P:CoreTweet.RelationshipSource.IsMuting">
            <summary>
            Gets or sets a value that determines if you are muting the user.
            </summary>
        </member>
        <member name="T:CoreTweet.Friendship">
            <summary>
            Represents a frienship.
            </summary>
        </member>
        <member name="P:CoreTweet.Friendship.Id">
            <summary>
            Gets or sets the ID of the user.
            </summary>
        </member>
        <member name="P:CoreTweet.Friendship.ScreenName">
            <summary>
            Gets or sets the screen name of the user.
            </summary>
        </member>
        <member name="P:CoreTweet.Friendship.Name">
            <summary>
            Gets or sets the name of the user.
            </summary>
        </member>
        <member name="P:CoreTweet.Friendship.Connections">
            <summary>
            Gets or sets the connections.
            </summary>
        </member>
        <member name="T:CoreTweet.Category">
            <summary>
            Represents a category.
            </summary>
        </member>
        <member name="P:CoreTweet.Category.Name">
            <summary>
            Gets or sets the name of the category.
            </summary>
        </member>
        <member name="P:CoreTweet.Category.Slug">
            <summary>
            Gets or sets the slug of the category.
            </summary>
        </member>
        <member name="P:CoreTweet.Category.Size">
            <summary>
            Gets or sets the size of the category.
            </summary>
        </member>
        <member name="P:CoreTweet.Category.Users">
            <summary>
            Gets or sets the users in this category.
            </summary>
        </member>
        <member name="T:CoreTweet.CategoryResponse">
            <summary>
            Represents a category response with rate limit.
            </summary>
        </member>
        <member name="P:CoreTweet.CategoryResponse.RateLimit">
            <summary>
            Gets or sets the rate limit of the response.
            </summary>
            <remarks>
            This property will always be null when obtained from (most of) the POST endpoints, unless the rate is explicitly stated in the Twitter official documentation.
            </remarks>
        </member>
        <member name="P:CoreTweet.CategoryResponse.Json">
            <summary>
            Gets or sets the JSON of the response.
            </summary>
        </member>
        <member name="T:CoreTweet.ProfileBannerSizes">
            <summary>
            Represents the variations of a size of a profile banner.
            </summary>
        </member>
        <member name="P:CoreTweet.ProfileBannerSizes.RateLimit">
            <summary>
            Gets or sets the rate limit of the response.
            </summary>
            <remarks>
            This property will always be null when obtained from (most of) the POST endpoints, unless the rate is explicitly stated in the Twitter official documentation.
            </remarks>
        </member>
        <member name="P:CoreTweet.ProfileBannerSizes.Json">
            <summary>
            Gets or sets the JSON of the response.
            </summary>
        </member>
        <member name="T:CoreTweet.ProfileBannerSize">
            <summary>
            Represents a size of a profile banner.
            </summary>
        </member>
        <member name="P:CoreTweet.ProfileBannerSize.Width">
            <summary>
            Gets or sets the width in pixels of the size.
            </summary>
        </member>
        <member name="P:CoreTweet.ProfileBannerSize.Height">
            <summary>
            Gets or sets the height in pixels of the size.
            </summary>
        </member>
        <member name="P:CoreTweet.ProfileBannerSize.Url">
            <summary>
            Gets or sets the URL of the size.
            </summary>
        </member>
        <member name="T:CoreTweet.UserEntities">
            <summary>
            Represents an entity object for user.
            </summary>
        </member>
        <member name="P:CoreTweet.UserEntities.Url">
            <summary>
            Gets or sets the entities for <see cref="P:CoreTweet.User.Url"/> field.
            </summary>
        </member>
        <member name="P:CoreTweet.UserEntities.Description">
            <summary>
            Gets or sets the entities for <see cref="P:CoreTweet.User.Description"/> field.
            </summary>
        </member>
        <member name="T:CoreTweet.MethodType">
            <summary>
            Provides the type of the HTTP method.
            </summary>
        </member>
        <member name="F:CoreTweet.MethodType.Get">
            <summary>
            GET method.
            </summary>
        </member>
        <member name="F:CoreTweet.MethodType.Post">
            <summary>
            POST method.
            </summary>
        </member>
        <member name="F:CoreTweet.MethodType.Put">
            <summary>
            PUT method.
            </summary>
        </member>
        <member name="F:CoreTweet.MethodType.Delete">
            <summary>
            DELETE method.
            </summary>
        </member>
        <member name="M:CoreTweet.WelcomeMessage.ToString">
            <summary>
            Returns the ID of this instance.
            </summary>
            <returns>The ID of this instance.</returns>
        </member>
        <member name="P:CoreTweet.WelcomeMessageResponse.RateLimit">
            <summary>
            Gets or sets the rate limit of the response.
            </summary>
            <remarks>
            This property will always be null when obtained from (most of) the POST endpoints, unless the rate is explicitly stated in the Twitter official documentation.
            </remarks>
        </member>
        <member name="P:CoreTweet.WelcomeMessageResponse.Json">
            <summary>
            Gets or sets the JSON of the response.
            </summary>
        </member>
        <member name="P:CoreTweet.CursoredWelcomeMessages.NextCursor">
            <summary>
            Gets or sets the next cursor.
            </summary>
        </member>
        <member name="P:CoreTweet.CursoredWelcomeMessages.RateLimit">
            <summary>
            Gets or sets the rate limit of the response.
            </summary>
            <remarks>
            This property will always be null when obtained from (most of) the POST endpoints, unless the rate is explicitly stated in the Twitter official documentation.
            </remarks>
        </member>
        <member name="P:CoreTweet.CursoredWelcomeMessages.Json">
            <summary>
            Gets or sets the JSON of the response.
            </summary>
        </member>
        <member name="M:CoreTweet.CursoredWelcomeMessages.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An IEnumerator object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:CoreTweet.WelcomeMessageRule.ToString">
            <summary>
            Returns the ID of this instance.
            </summary>
            <returns>The ID of this instance.</returns>
        </member>
        <member name="P:CoreTweet.WelcomeMessageRuleResponse.RateLimit">
            <summary>
            Gets or sets the rate limit of the response.
            </summary>
            <remarks>
            This property will always be null when obtained from (most of) the POST endpoints, unless the rate is explicitly stated in the Twitter official documentation.
            </remarks>
        </member>
        <member name="P:CoreTweet.WelcomeMessageRuleResponse.Json">
            <summary>
            Gets or sets the JSON of the response.
            </summary>
        </member>
        <member name="P:CoreTweet.CursoredWelcomeMessageRules.NextCursor">
            <summary>
            Gets or sets the next cursor.
            </summary>
        </member>
        <member name="P:CoreTweet.CursoredWelcomeMessageRules.RateLimit">
            <summary>
            Gets or sets the rate limit of the response.
            </summary>
            <remarks>
            This property will always be null when obtained from (most of) the POST endpoints, unless the rate is explicitly stated in the Twitter official documentation.
            </remarks>
        </member>
        <member name="P:CoreTweet.CursoredWelcomeMessageRules.Json">
            <summary>
            Gets or sets the JSON of the response.
            </summary>
        </member>
        <member name="M:CoreTweet.CursoredWelcomeMessageRules.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An IEnumerator object that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:CoreTweet.Rest.Account">
            <summary>
            Provides a set of methods for the wrapper of GET/POST account.
            </summary>
        </member>
        <member name="M:CoreTweet.Rest.Account.VerifyCredentials(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a representation of the requesting user if authentication was successful.</para>
            <para>Available parameters:</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_email (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.VerifyCredentials(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns a representation of the requesting user if authentication was successful.</para>
            <para>Available parameters:</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_email (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.VerifyCredentials(System.Object)">
            <summary>
            <para>Returns a representation of the requesting user if authentication was successful.</para>
            <para>Available parameters:</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_email (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.VerifyCredentials(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Returns a representation of the requesting user if authentication was successful.</para>
            </summary>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_email">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.VerifyCredentialsAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a representation of the requesting user if authentication was successful.</para>
            <para>Available parameters:</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_email (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.VerifyCredentialsAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a representation of the requesting user if authentication was successful.</para>
            <para>Available parameters:</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_email (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.VerifyCredentialsAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns a representation of the requesting user if authentication was successful.</para>
            <para>Available parameters:</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_email (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.VerifyCredentialsAsync(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a representation of the requesting user if authentication was successful.</para>
            </summary>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_email">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.Settings(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns settings (including current trend, geo and sleep time information) for the authenticating user or updates the authenticating user's settings.</para>
            <para>Available parameters:</para>
            <para>- <c>int</c> trend_location_woeid (optional)</para>
            <para>- <c>bool</c> sleep_time_enabled (optional)</para>
            <para>- <c>int</c> start_sleep_time (optional)</para>
            <para>- <c>int</c> end_sleep_time (optional)</para>
            <para>- <c>string</c> time_zone (optional)</para>
            <para>- <c>string</c> lang (optional)</para>
            <para>- <c>string</c> allow_contributor_request (optional)</para>
            <para>- <c>string</c> current_password (optional)</para>
            <para>- <c>string</c> allow_dms_from (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The settings of the user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.Settings(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns settings (including current trend, geo and sleep time information) for the authenticating user or updates the authenticating user's settings.</para>
            <para>Available parameters:</para>
            <para>- <c>int</c> trend_location_woeid (optional)</para>
            <para>- <c>bool</c> sleep_time_enabled (optional)</para>
            <para>- <c>int</c> start_sleep_time (optional)</para>
            <para>- <c>int</c> end_sleep_time (optional)</para>
            <para>- <c>string</c> time_zone (optional)</para>
            <para>- <c>string</c> lang (optional)</para>
            <para>- <c>string</c> allow_contributor_request (optional)</para>
            <para>- <c>string</c> current_password (optional)</para>
            <para>- <c>string</c> allow_dms_from (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The settings of the user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.Settings(System.Object)">
            <summary>
            <para>Returns settings (including current trend, geo and sleep time information) for the authenticating user or updates the authenticating user's settings.</para>
            <para>Available parameters:</para>
            <para>- <c>int</c> trend_location_woeid (optional)</para>
            <para>- <c>bool</c> sleep_time_enabled (optional)</para>
            <para>- <c>int</c> start_sleep_time (optional)</para>
            <para>- <c>int</c> end_sleep_time (optional)</para>
            <para>- <c>string</c> time_zone (optional)</para>
            <para>- <c>string</c> lang (optional)</para>
            <para>- <c>string</c> allow_contributor_request (optional)</para>
            <para>- <c>string</c> current_password (optional)</para>
            <para>- <c>string</c> allow_dms_from (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The settings of the user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.Settings(System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String)">
            <summary>
            <para>Returns settings (including current trend, geo and sleep time information) for the authenticating user or updates the authenticating user's settings.</para>
            </summary>
            <param name="trend_location_woeid">optional.</param>
            <param name="sleep_time_enabled">optional.</param>
            <param name="start_sleep_time">optional.</param>
            <param name="end_sleep_time">optional.</param>
            <param name="time_zone">optional.</param>
            <param name="lang">optional.</param>
            <param name="allow_contributor_request">optional.</param>
            <param name="current_password">optional.</param>
            <param name="allow_dms_from">optional.</param>
            <returns>The settings of the user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.SettingsAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns settings (including current trend, geo and sleep time information) for the authenticating user or updates the authenticating user's settings.</para>
            <para>Available parameters:</para>
            <para>- <c>int</c> trend_location_woeid (optional)</para>
            <para>- <c>bool</c> sleep_time_enabled (optional)</para>
            <para>- <c>int</c> start_sleep_time (optional)</para>
            <para>- <c>int</c> end_sleep_time (optional)</para>
            <para>- <c>string</c> time_zone (optional)</para>
            <para>- <c>string</c> lang (optional)</para>
            <para>- <c>string</c> allow_contributor_request (optional)</para>
            <para>- <c>string</c> current_password (optional)</para>
            <para>- <c>string</c> allow_dms_from (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The settings of the user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.SettingsAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns settings (including current trend, geo and sleep time information) for the authenticating user or updates the authenticating user's settings.</para>
            <para>Available parameters:</para>
            <para>- <c>int</c> trend_location_woeid (optional)</para>
            <para>- <c>bool</c> sleep_time_enabled (optional)</para>
            <para>- <c>int</c> start_sleep_time (optional)</para>
            <para>- <c>int</c> end_sleep_time (optional)</para>
            <para>- <c>string</c> time_zone (optional)</para>
            <para>- <c>string</c> lang (optional)</para>
            <para>- <c>string</c> allow_contributor_request (optional)</para>
            <para>- <c>string</c> current_password (optional)</para>
            <para>- <c>string</c> allow_dms_from (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The settings of the user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.SettingsAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns settings (including current trend, geo and sleep time information) for the authenticating user or updates the authenticating user's settings.</para>
            <para>Available parameters:</para>
            <para>- <c>int</c> trend_location_woeid (optional)</para>
            <para>- <c>bool</c> sleep_time_enabled (optional)</para>
            <para>- <c>int</c> start_sleep_time (optional)</para>
            <para>- <c>int</c> end_sleep_time (optional)</para>
            <para>- <c>string</c> time_zone (optional)</para>
            <para>- <c>string</c> lang (optional)</para>
            <para>- <c>string</c> allow_contributor_request (optional)</para>
            <para>- <c>string</c> current_password (optional)</para>
            <para>- <c>string</c> allow_dms_from (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The settings of the user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.SettingsAsync(System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Returns settings (including current trend, geo and sleep time information) for the authenticating user or updates the authenticating user's settings.</para>
            </summary>
            <param name="trend_location_woeid">optional.</param>
            <param name="sleep_time_enabled">optional.</param>
            <param name="start_sleep_time">optional.</param>
            <param name="end_sleep_time">optional.</param>
            <param name="time_zone">optional.</param>
            <param name="lang">optional.</param>
            <param name="allow_contributor_request">optional.</param>
            <param name="current_password">optional.</param>
            <param name="allow_dms_from">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The settings of the user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfile(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Sets values that users are able to set under the "Account" tab of their settings page.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> name (optional)</para>
            <para>- <c>string</c> url (optional)</para>
            <para>- <c>string</c> location (optional)</para>
            <para>- <c>string</c> description (optional)</para>
            <para>- <c>string</c> profile_link_color (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfile(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Sets values that users are able to set under the "Account" tab of their settings page.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> name (optional)</para>
            <para>- <c>string</c> url (optional)</para>
            <para>- <c>string</c> location (optional)</para>
            <para>- <c>string</c> description (optional)</para>
            <para>- <c>string</c> profile_link_color (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfile(System.Object)">
            <summary>
            <para>Sets values that users are able to set under the "Account" tab of their settings page.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> name (optional)</para>
            <para>- <c>string</c> url (optional)</para>
            <para>- <c>string</c> location (optional)</para>
            <para>- <c>string</c> description (optional)</para>
            <para>- <c>string</c> profile_link_color (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfile(System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Sets values that users are able to set under the "Account" tab of their settings page.</para>
            </summary>
            <param name="name">optional.</param>
            <param name="url">optional.</param>
            <param name="location">optional.</param>
            <param name="description">optional.</param>
            <param name="profile_link_color">optional.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Sets values that users are able to set under the "Account" tab of their settings page.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> name (optional)</para>
            <para>- <c>string</c> url (optional)</para>
            <para>- <c>string</c> location (optional)</para>
            <para>- <c>string</c> description (optional)</para>
            <para>- <c>string</c> profile_link_color (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Sets values that users are able to set under the "Account" tab of their settings page.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> name (optional)</para>
            <para>- <c>string</c> url (optional)</para>
            <para>- <c>string</c> location (optional)</para>
            <para>- <c>string</c> description (optional)</para>
            <para>- <c>string</c> profile_link_color (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Sets values that users are able to set under the "Account" tab of their settings page.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> name (optional)</para>
            <para>- <c>string</c> url (optional)</para>
            <para>- <c>string</c> location (optional)</para>
            <para>- <c>string</c> description (optional)</para>
            <para>- <c>string</c> profile_link_color (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileAsync(System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Sets values that users are able to set under the "Account" tab of their settings page.</para>
            </summary>
            <param name="name">optional.</param>
            <param name="url">optional.</param>
            <param name="location">optional.</param>
            <param name="description">optional.</param>
            <param name="profile_link_color">optional.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileBackgroundImage(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Updates the authenticating user’s profile background image.</para>
            <para>Although each parameter is marked as optional, at least one of image or media_id must be provided when making this request.</para>
            <para>Available parameters:</para>
            <para>- <c>Stream</c> image (any one is required)</para>
            <para>- <c>IEnumerable&lt;byte&gt;</c> image (any one is required)</para>
            <para>- <c>FileInfo</c> image (any one is required)</para>
            <para>- <c>long</c> media_id (any one is required)</para>
            <para>- <c>bool</c> tile (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileBackgroundImage(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Updates the authenticating user’s profile background image.</para>
            <para>Although each parameter is marked as optional, at least one of image or media_id must be provided when making this request.</para>
            <para>Available parameters:</para>
            <para>- <c>Stream</c> image (any one is required)</para>
            <para>- <c>IEnumerable&lt;byte&gt;</c> image (any one is required)</para>
            <para>- <c>FileInfo</c> image (any one is required)</para>
            <para>- <c>long</c> media_id (any one is required)</para>
            <para>- <c>bool</c> tile (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileBackgroundImage(System.Object)">
            <summary>
            <para>Updates the authenticating user’s profile background image.</para>
            <para>Although each parameter is marked as optional, at least one of image or media_id must be provided when making this request.</para>
            <para>Available parameters:</para>
            <para>- <c>Stream</c> image (any one is required)</para>
            <para>- <c>IEnumerable&lt;byte&gt;</c> image (any one is required)</para>
            <para>- <c>FileInfo</c> image (any one is required)</para>
            <para>- <c>long</c> media_id (any one is required)</para>
            <para>- <c>bool</c> tile (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileBackgroundImage(System.IO.Stream,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Updates the authenticating user’s profile background image.</para>
            <para>Although each parameter is marked as optional, at least one of image or media_id must be provided when making this request.</para>
            </summary>
            <param name="image">any one is required.</param>
            <param name="tile">optional.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileBackgroundImage(System.Collections.Generic.IEnumerable{System.Byte},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Updates the authenticating user’s profile background image.</para>
            <para>Although each parameter is marked as optional, at least one of image or media_id must be provided when making this request.</para>
            </summary>
            <param name="image">any one is required.</param>
            <param name="tile">optional.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileBackgroundImage(System.IO.FileInfo,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Updates the authenticating user’s profile background image.</para>
            <para>Although each parameter is marked as optional, at least one of image or media_id must be provided when making this request.</para>
            </summary>
            <param name="image">any one is required.</param>
            <param name="tile">optional.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileBackgroundImage(System.Int64,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Updates the authenticating user’s profile background image.</para>
            <para>Although each parameter is marked as optional, at least one of image or media_id must be provided when making this request.</para>
            </summary>
            <param name="media_id">any one is required.</param>
            <param name="tile">optional.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileBackgroundImage(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Updates the authenticating user’s profile background image.</para>
            <para>Although each parameter is marked as optional, at least one of image or media_id must be provided when making this request.</para>
            </summary>
            <param name="tile">optional.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileBackgroundImageAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Updates the authenticating user’s profile background image.</para>
            <para>Although each parameter is marked as optional, at least one of image or media_id must be provided when making this request.</para>
            <para>Available parameters:</para>
            <para>- <c>Stream</c> image (any one is required)</para>
            <para>- <c>IEnumerable&lt;byte&gt;</c> image (any one is required)</para>
            <para>- <c>FileInfo</c> image (any one is required)</para>
            <para>- <c>long</c> media_id (any one is required)</para>
            <para>- <c>bool</c> tile (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileBackgroundImageAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Updates the authenticating user’s profile background image.</para>
            <para>Although each parameter is marked as optional, at least one of image or media_id must be provided when making this request.</para>
            <para>Available parameters:</para>
            <para>- <c>Stream</c> image (any one is required)</para>
            <para>- <c>IEnumerable&lt;byte&gt;</c> image (any one is required)</para>
            <para>- <c>FileInfo</c> image (any one is required)</para>
            <para>- <c>long</c> media_id (any one is required)</para>
            <para>- <c>bool</c> tile (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileBackgroundImageAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Updates the authenticating user’s profile background image.</para>
            <para>Although each parameter is marked as optional, at least one of image or media_id must be provided when making this request.</para>
            <para>Available parameters:</para>
            <para>- <c>Stream</c> image (any one is required)</para>
            <para>- <c>IEnumerable&lt;byte&gt;</c> image (any one is required)</para>
            <para>- <c>FileInfo</c> image (any one is required)</para>
            <para>- <c>long</c> media_id (any one is required)</para>
            <para>- <c>bool</c> tile (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileBackgroundImageAsync(System.IO.Stream,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Updates the authenticating user’s profile background image.</para>
            <para>Although each parameter is marked as optional, at least one of image or media_id must be provided when making this request.</para>
            </summary>
            <param name="image">any one is required.</param>
            <param name="tile">optional.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileBackgroundImageAsync(System.Collections.Generic.IEnumerable{System.Byte},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Updates the authenticating user’s profile background image.</para>
            <para>Although each parameter is marked as optional, at least one of image or media_id must be provided when making this request.</para>
            </summary>
            <param name="image">any one is required.</param>
            <param name="tile">optional.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileBackgroundImageAsync(System.IO.FileInfo,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Updates the authenticating user’s profile background image.</para>
            <para>Although each parameter is marked as optional, at least one of image or media_id must be provided when making this request.</para>
            </summary>
            <param name="image">any one is required.</param>
            <param name="tile">optional.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileBackgroundImageAsync(System.Int64,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Updates the authenticating user’s profile background image.</para>
            <para>Although each parameter is marked as optional, at least one of image or media_id must be provided when making this request.</para>
            </summary>
            <param name="media_id">any one is required.</param>
            <param name="tile">optional.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileBackgroundImageAsync(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Updates the authenticating user’s profile background image.</para>
            <para>Although each parameter is marked as optional, at least one of image or media_id must be provided when making this request.</para>
            </summary>
            <param name="tile">optional.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileBanner(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Uploads a profile banner on behalf of the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>Stream</c> image (any one is required)</para>
            <para>- <c>IEnumerable&lt;byte&gt;</c> image (any one is required)</para>
            <para>- <c>FileInfo</c> image (any one is required)</para>
            <para>- <c>string</c> banner (any one is required)</para>
            <para>- <c>string</c> width (optional)</para>
            <para>- <c>string</c> height (optional)</para>
            <para>- <c>string</c> offset_left (optional)</para>
            <para>- <c>string</c> offset_top (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileBanner(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Uploads a profile banner on behalf of the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>Stream</c> image (any one is required)</para>
            <para>- <c>IEnumerable&lt;byte&gt;</c> image (any one is required)</para>
            <para>- <c>FileInfo</c> image (any one is required)</para>
            <para>- <c>string</c> banner (any one is required)</para>
            <para>- <c>string</c> width (optional)</para>
            <para>- <c>string</c> height (optional)</para>
            <para>- <c>string</c> offset_left (optional)</para>
            <para>- <c>string</c> offset_top (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileBanner(System.Object)">
            <summary>
            <para>Uploads a profile banner on behalf of the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>Stream</c> image (any one is required)</para>
            <para>- <c>IEnumerable&lt;byte&gt;</c> image (any one is required)</para>
            <para>- <c>FileInfo</c> image (any one is required)</para>
            <para>- <c>string</c> banner (any one is required)</para>
            <para>- <c>string</c> width (optional)</para>
            <para>- <c>string</c> height (optional)</para>
            <para>- <c>string</c> offset_left (optional)</para>
            <para>- <c>string</c> offset_top (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileBanner(System.IO.Stream,System.String,System.String,System.String,System.String)">
            <summary>
            <para>Uploads a profile banner on behalf of the authenticating user.</para>
            </summary>
            <param name="image">any one is required.</param>
            <param name="width">optional.</param>
            <param name="height">optional.</param>
            <param name="offset_left">optional.</param>
            <param name="offset_top">optional.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileBanner(System.Collections.Generic.IEnumerable{System.Byte},System.String,System.String,System.String,System.String)">
            <summary>
            <para>Uploads a profile banner on behalf of the authenticating user.</para>
            </summary>
            <param name="image">any one is required.</param>
            <param name="width">optional.</param>
            <param name="height">optional.</param>
            <param name="offset_left">optional.</param>
            <param name="offset_top">optional.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileBanner(System.IO.FileInfo,System.String,System.String,System.String,System.String)">
            <summary>
            <para>Uploads a profile banner on behalf of the authenticating user.</para>
            </summary>
            <param name="image">any one is required.</param>
            <param name="width">optional.</param>
            <param name="height">optional.</param>
            <param name="offset_left">optional.</param>
            <param name="offset_top">optional.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileBanner(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            <para>Uploads a profile banner on behalf of the authenticating user.</para>
            </summary>
            <param name="banner">any one is required.</param>
            <param name="width">optional.</param>
            <param name="height">optional.</param>
            <param name="offset_left">optional.</param>
            <param name="offset_top">optional.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileBannerAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Uploads a profile banner on behalf of the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>Stream</c> image (any one is required)</para>
            <para>- <c>IEnumerable&lt;byte&gt;</c> image (any one is required)</para>
            <para>- <c>FileInfo</c> image (any one is required)</para>
            <para>- <c>string</c> banner (any one is required)</para>
            <para>- <c>string</c> width (optional)</para>
            <para>- <c>string</c> height (optional)</para>
            <para>- <c>string</c> offset_left (optional)</para>
            <para>- <c>string</c> offset_top (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileBannerAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Uploads a profile banner on behalf of the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>Stream</c> image (any one is required)</para>
            <para>- <c>IEnumerable&lt;byte&gt;</c> image (any one is required)</para>
            <para>- <c>FileInfo</c> image (any one is required)</para>
            <para>- <c>string</c> banner (any one is required)</para>
            <para>- <c>string</c> width (optional)</para>
            <para>- <c>string</c> height (optional)</para>
            <para>- <c>string</c> offset_left (optional)</para>
            <para>- <c>string</c> offset_top (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileBannerAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Uploads a profile banner on behalf of the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>Stream</c> image (any one is required)</para>
            <para>- <c>IEnumerable&lt;byte&gt;</c> image (any one is required)</para>
            <para>- <c>FileInfo</c> image (any one is required)</para>
            <para>- <c>string</c> banner (any one is required)</para>
            <para>- <c>string</c> width (optional)</para>
            <para>- <c>string</c> height (optional)</para>
            <para>- <c>string</c> offset_left (optional)</para>
            <para>- <c>string</c> offset_top (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileBannerAsync(System.IO.Stream,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Uploads a profile banner on behalf of the authenticating user.</para>
            </summary>
            <param name="image">any one is required.</param>
            <param name="width">optional.</param>
            <param name="height">optional.</param>
            <param name="offset_left">optional.</param>
            <param name="offset_top">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileBannerAsync(System.Collections.Generic.IEnumerable{System.Byte},System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Uploads a profile banner on behalf of the authenticating user.</para>
            </summary>
            <param name="image">any one is required.</param>
            <param name="width">optional.</param>
            <param name="height">optional.</param>
            <param name="offset_left">optional.</param>
            <param name="offset_top">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileBannerAsync(System.IO.FileInfo,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Uploads a profile banner on behalf of the authenticating user.</para>
            </summary>
            <param name="image">any one is required.</param>
            <param name="width">optional.</param>
            <param name="height">optional.</param>
            <param name="offset_left">optional.</param>
            <param name="offset_top">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileBannerAsync(System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Uploads a profile banner on behalf of the authenticating user.</para>
            </summary>
            <param name="banner">any one is required.</param>
            <param name="width">optional.</param>
            <param name="height">optional.</param>
            <param name="offset_left">optional.</param>
            <param name="offset_top">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.RemoveProfileBanner(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Removes the uploaded profile banner for the authenticating user.</para>
            <para>Available parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.RemoveProfileBanner(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Removes the uploaded profile banner for the authenticating user.</para>
            <para>Available parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.RemoveProfileBanner(System.Object)">
            <summary>
            <para>Removes the uploaded profile banner for the authenticating user.</para>
            <para>Available parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.RemoveProfileBanner">
            <summary>
            <para>Removes the uploaded profile banner for the authenticating user.</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.RemoveProfileBannerAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Removes the uploaded profile banner for the authenticating user.</para>
            <para>Available parameters:</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.RemoveProfileBannerAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Removes the uploaded profile banner for the authenticating user.</para>
            <para>Available parameters:</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.RemoveProfileBannerAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Removes the uploaded profile banner for the authenticating user.</para>
            <para>Available parameters:</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.RemoveProfileBannerAsync(System.Threading.CancellationToken)">
            <summary>
            <para>Removes the uploaded profile banner for the authenticating user.</para>
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileImage(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Updates the authenticating user's profile image.</para>
            <para>Available parameters:</para>
            <para>- <c>Stream</c> image (any one is required)</para>
            <para>- <c>IEnumerable&lt;byte&gt;</c> image (any one is required)</para>
            <para>- <c>FileInfo</c> image (any one is required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileImage(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Updates the authenticating user's profile image.</para>
            <para>Available parameters:</para>
            <para>- <c>Stream</c> image (any one is required)</para>
            <para>- <c>IEnumerable&lt;byte&gt;</c> image (any one is required)</para>
            <para>- <c>FileInfo</c> image (any one is required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileImage(System.Object)">
            <summary>
            <para>Updates the authenticating user's profile image.</para>
            <para>Available parameters:</para>
            <para>- <c>Stream</c> image (any one is required)</para>
            <para>- <c>IEnumerable&lt;byte&gt;</c> image (any one is required)</para>
            <para>- <c>FileInfo</c> image (any one is required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileImage(System.IO.Stream,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Updates the authenticating user's profile image.</para>
            </summary>
            <param name="image">any one is required.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileImage(System.Collections.Generic.IEnumerable{System.Byte},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Updates the authenticating user's profile image.</para>
            </summary>
            <param name="image">any one is required.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileImage(System.IO.FileInfo,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Updates the authenticating user's profile image.</para>
            </summary>
            <param name="image">any one is required.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileImageAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Updates the authenticating user's profile image.</para>
            <para>Available parameters:</para>
            <para>- <c>Stream</c> image (any one is required)</para>
            <para>- <c>IEnumerable&lt;byte&gt;</c> image (any one is required)</para>
            <para>- <c>FileInfo</c> image (any one is required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileImageAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Updates the authenticating user's profile image.</para>
            <para>Available parameters:</para>
            <para>- <c>Stream</c> image (any one is required)</para>
            <para>- <c>IEnumerable&lt;byte&gt;</c> image (any one is required)</para>
            <para>- <c>FileInfo</c> image (any one is required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileImageAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Updates the authenticating user's profile image.</para>
            <para>Available parameters:</para>
            <para>- <c>Stream</c> image (any one is required)</para>
            <para>- <c>IEnumerable&lt;byte&gt;</c> image (any one is required)</para>
            <para>- <c>FileInfo</c> image (any one is required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileImageAsync(System.IO.Stream,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Updates the authenticating user's profile image.</para>
            </summary>
            <param name="image">any one is required.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileImageAsync(System.Collections.Generic.IEnumerable{System.Byte},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Updates the authenticating user's profile image.</para>
            </summary>
            <param name="image">any one is required.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Account.UpdateProfileImageAsync(System.IO.FileInfo,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Updates the authenticating user's profile image.</para>
            </summary>
            <param name="image">any one is required.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The user object.</returns>
        </member>
        <member name="T:CoreTweet.Rest.Application">
            <summary>
            Provides a set of methods for the wrapper of GET application.
            </summary>
        </member>
        <member name="M:CoreTweet.Rest.Application.RateLimitStatus(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the current rate limits for methods belonging to the specified resource families.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> resources (any one is required)</para>
            <para>- <c>IEnumerable&lt;string&gt;</c> resources (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The dictionary.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Application.RateLimitStatus(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns the current rate limits for methods belonging to the specified resource families.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> resources (any one is required)</para>
            <para>- <c>IEnumerable&lt;string&gt;</c> resources (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The dictionary.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Application.RateLimitStatus(System.Object)">
            <summary>
            <para>Returns the current rate limits for methods belonging to the specified resource families.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> resources (any one is required)</para>
            <para>- <c>IEnumerable&lt;string&gt;</c> resources (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The dictionary.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Application.RateLimitStatus">
            <summary>
            <para>Returns the current rate limits for methods belonging to the specified resource families.</para>
            </summary>
            <returns>The dictionary.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Application.RateLimitStatus(System.String)">
            <summary>
            <para>Returns the current rate limits for methods belonging to the specified resource families.</para>
            </summary>
            <param name="resources">any one is required.</param>
            <returns>The dictionary.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Application.RateLimitStatus(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            <para>Returns the current rate limits for methods belonging to the specified resource families.</para>
            </summary>
            <param name="resources">any one is required.</param>
            <returns>The dictionary.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Application.RateLimitStatusAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the current rate limits for methods belonging to the specified resource families.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> resources (any one is required)</para>
            <para>- <c>IEnumerable&lt;string&gt;</c> resources (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The dictionary.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Application.RateLimitStatusAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns the current rate limits for methods belonging to the specified resource families.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> resources (any one is required)</para>
            <para>- <c>IEnumerable&lt;string&gt;</c> resources (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The dictionary.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Application.RateLimitStatusAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns the current rate limits for methods belonging to the specified resource families.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> resources (any one is required)</para>
            <para>- <c>IEnumerable&lt;string&gt;</c> resources (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The dictionary.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Application.RateLimitStatusAsync(System.Threading.CancellationToken)">
            <summary>
            <para>Returns the current rate limits for methods belonging to the specified resource families.</para>
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The dictionary.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Application.RateLimitStatusAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Returns the current rate limits for methods belonging to the specified resource families.</para>
            </summary>
            <param name="resources">any one is required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The dictionary.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Application.RateLimitStatusAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            <para>Returns the current rate limits for methods belonging to the specified resource families.</para>
            </summary>
            <param name="resources">any one is required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The dictionary.</returns>
        </member>
        <member name="T:CoreTweet.Rest.Blocks">
            <summary>
            Provides a set of methods for the wrapper of GET/POST blocks.
            </summary>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.Ids(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns an array of numeric user ids the authenticating user is blocking.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.Ids(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns an array of numeric user ids the authenticating user is blocking.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.Ids(System.Object)">
            <summary>
            <para>Returns an array of numeric user ids the authenticating user is blocking.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.EnumerateIds(CoreTweet.EnumerateMode,System.Nullable{System.Int64})">
            <summary>
            <para>Returns an array of numeric user ids the authenticating user is blocking.</para>
            </summary>
            <param name="cursor">semi-optional.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.Ids(System.Nullable{System.Int64})">
            <summary>
            <para>Returns an array of numeric user ids the authenticating user is blocking.</para>
            </summary>
            <param name="cursor">semi-optional.</param>
            <returns>IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.EnumerateIds(CoreTweet.EnumerateMode,System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns an array of numeric user ids the authenticating user is blocking.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.EnumerateIds(CoreTweet.EnumerateMode,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns an array of numeric user ids the authenticating user is blocking.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.EnumerateIds(CoreTweet.EnumerateMode,System.Object)">
            <summary>
            <para>Returns an array of numeric user ids the authenticating user is blocking.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.IdsAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns an array of numeric user ids the authenticating user is blocking.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.IdsAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns an array of numeric user ids the authenticating user is blocking.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.IdsAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns an array of numeric user ids the authenticating user is blocking.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.IdsAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            <para>Returns an array of numeric user ids the authenticating user is blocking.</para>
            </summary>
            <param name="cursor">semi-optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.List(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a collection of user objects that the authenticating user is blocking.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.List(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns a collection of user objects that the authenticating user is blocking.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.List(System.Object)">
            <summary>
            <para>Returns a collection of user objects that the authenticating user is blocking.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.EnumerateList(CoreTweet.EnumerateMode,System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Returns a collection of user objects that the authenticating user is blocking.</para>
            </summary>
            <param name="cursor">semi-optional.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.List(System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Returns a collection of user objects that the authenticating user is blocking.</para>
            </summary>
            <param name="cursor">semi-optional.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.EnumerateList(CoreTweet.EnumerateMode,System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a collection of user objects that the authenticating user is blocking.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.EnumerateList(CoreTweet.EnumerateMode,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns a collection of user objects that the authenticating user is blocking.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.EnumerateList(CoreTweet.EnumerateMode,System.Object)">
            <summary>
            <para>Returns a collection of user objects that the authenticating user is blocking.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.ListAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a collection of user objects that the authenticating user is blocking.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.ListAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a collection of user objects that the authenticating user is blocking.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.ListAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns a collection of user objects that the authenticating user is blocking.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.ListAsync(System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a collection of user objects that the authenticating user is blocking.</para>
            </summary>
            <param name="cursor">semi-optional.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.Create(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Blocks the specified user from following the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.Create(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Blocks the specified user from following the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.Create(System.Object)">
            <summary>
            <para>Blocks the specified user from following the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.Create(System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Blocks the specified user from following the authenticating user.</para>
            </summary>
            <param name="screen_name">any one is required.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.Create(System.Int64,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Blocks the specified user from following the authenticating user.</para>
            </summary>
            <param name="user_id">any one is required.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.CreateAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Blocks the specified user from following the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.CreateAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Blocks the specified user from following the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.CreateAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Blocks the specified user from following the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.CreateAsync(System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Blocks the specified user from following the authenticating user.</para>
            </summary>
            <param name="screen_name">any one is required.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.CreateAsync(System.Int64,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Blocks the specified user from following the authenticating user.</para>
            </summary>
            <param name="user_id">any one is required.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.Destroy(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Un-blocks the user specified in the ID parameter for the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.Destroy(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Un-blocks the user specified in the ID parameter for the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.Destroy(System.Object)">
            <summary>
            <para>Un-blocks the user specified in the ID parameter for the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.Destroy(System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Un-blocks the user specified in the ID parameter for the authenticating user.</para>
            </summary>
            <param name="screen_name">any one is required.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.Destroy(System.Int64,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Un-blocks the user specified in the ID parameter for the authenticating user.</para>
            </summary>
            <param name="user_id">any one is required.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.DestroyAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Un-blocks the user specified in the ID parameter for the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.DestroyAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Un-blocks the user specified in the ID parameter for the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.DestroyAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Un-blocks the user specified in the ID parameter for the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.DestroyAsync(System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Un-blocks the user specified in the ID parameter for the authenticating user.</para>
            </summary>
            <param name="screen_name">any one is required.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The user object.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Blocks.DestroyAsync(System.Int64,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Un-blocks the user specified in the ID parameter for the authenticating user.</para>
            </summary>
            <param name="user_id">any one is required.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The user object.</returns>
        </member>
        <member name="T:CoreTweet.Rest.Collections">
            <summary>
            Provides a set of methods for the wrapper of GET/POST collections.
            </summary>
        </member>
        <member name="M:CoreTweet.Rest.Collections.List(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Find Collections created by a specific user or containing a specific curated Tweet.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>long</c> tweet_id (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>string</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The timelines.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.List(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Find Collections created by a specific user or containing a specific curated Tweet.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>long</c> tweet_id (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>string</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The timelines.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.List(System.Object)">
            <summary>
            <para>Find Collections created by a specific user or containing a specific curated Tweet.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>long</c> tweet_id (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>string</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The timelines.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.List(System.Nullable{System.Int64},System.String,System.Nullable{System.Int64},System.Nullable{System.Int32},System.String)">
            <summary>
            <para>Find Collections created by a specific user or containing a specific curated Tweet.</para>
            </summary>
            <param name="user_id">optional.</param>
            <param name="screen_name">optional.</param>
            <param name="tweet_id">optional.</param>
            <param name="count">optional.</param>
            <param name="cursor">optional.</param>
            <returns>The timelines.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.ListAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Find Collections created by a specific user or containing a specific curated Tweet.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>long</c> tweet_id (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>string</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The timelines.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.ListAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Find Collections created by a specific user or containing a specific curated Tweet.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>long</c> tweet_id (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>string</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The timelines.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.ListAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Find Collections created by a specific user or containing a specific curated Tweet.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>long</c> tweet_id (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>string</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The timelines.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.ListAsync(System.Nullable{System.Int64},System.String,System.Nullable{System.Int64},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Find Collections created by a specific user or containing a specific curated Tweet.</para>
            </summary>
            <param name="user_id">optional.</param>
            <param name="screen_name">optional.</param>
            <param name="tweet_id">optional.</param>
            <param name="count">optional.</param>
            <param name="cursor">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The timelines.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.Show(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Retrieve information associated with a specific Collection.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The timeline.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.Show(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Retrieve information associated with a specific Collection.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The timeline.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.Show(System.Object)">
            <summary>
            <para>Retrieve information associated with a specific Collection.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The timeline.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.Show(System.String)">
            <summary>
            <para>Retrieve information associated with a specific Collection.</para>
            </summary>
            <param name="id">required.</param>
            <returns>The timeline.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.ShowAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Retrieve information associated with a specific Collection.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The timeline.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.ShowAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Retrieve information associated with a specific Collection.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The timeline.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.ShowAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Retrieve information associated with a specific Collection.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The timeline.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.ShowAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Retrieve information associated with a specific Collection.</para>
            </summary>
            <param name="id">required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The timeline.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.Entries(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Retrieve the identified Collection, presented as a list of the Tweets curated within.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> max_position (optional)</para>
            <para>- <c>long</c> min_position (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The entries.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.Entries(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Retrieve the identified Collection, presented as a list of the Tweets curated within.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> max_position (optional)</para>
            <para>- <c>long</c> min_position (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The entries.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.Entries(System.Object)">
            <summary>
            <para>Retrieve the identified Collection, presented as a list of the Tweets curated within.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> max_position (optional)</para>
            <para>- <c>long</c> min_position (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The entries.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.Entries(System.String,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Retrieve the identified Collection, presented as a list of the Tweets curated within.</para>
            </summary>
            <param name="id">required.</param>
            <param name="count">optional.</param>
            <param name="max_position">optional.</param>
            <param name="min_position">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The entries.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.EntriesAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Retrieve the identified Collection, presented as a list of the Tweets curated within.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> max_position (optional)</para>
            <para>- <c>long</c> min_position (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The entries.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.EntriesAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Retrieve the identified Collection, presented as a list of the Tweets curated within.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> max_position (optional)</para>
            <para>- <c>long</c> min_position (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The entries.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.EntriesAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Retrieve the identified Collection, presented as a list of the Tweets curated within.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> max_position (optional)</para>
            <para>- <c>long</c> min_position (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The entries.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.EntriesAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Retrieve the identified Collection, presented as a list of the Tweets curated within.</para>
            </summary>
            <param name="id">required.</param>
            <param name="count">optional.</param>
            <param name="max_position">optional.</param>
            <param name="min_position">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The entries.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.Create(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Create a Collection owned by the currently authenticated user.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> name (required)</para>
            <para>- <c>string</c> description (optional)</para>
            <para>- <c>string</c> url (optional)</para>
            <para>- <c>string</c> timeline_order (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The timeline.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.Create(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Create a Collection owned by the currently authenticated user.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> name (required)</para>
            <para>- <c>string</c> description (optional)</para>
            <para>- <c>string</c> url (optional)</para>
            <para>- <c>string</c> timeline_order (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The timeline.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.Create(System.Object)">
            <summary>
            <para>Create a Collection owned by the currently authenticated user.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> name (required)</para>
            <para>- <c>string</c> description (optional)</para>
            <para>- <c>string</c> url (optional)</para>
            <para>- <c>string</c> timeline_order (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The timeline.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.Create(System.String,System.String,System.String,System.String)">
            <summary>
            <para>Create a Collection owned by the currently authenticated user.</para>
            </summary>
            <param name="name">required.</param>
            <param name="description">optional.</param>
            <param name="url">optional.</param>
            <param name="timeline_order">optional.</param>
            <returns>The timeline.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.CreateAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Create a Collection owned by the currently authenticated user.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> name (required)</para>
            <para>- <c>string</c> description (optional)</para>
            <para>- <c>string</c> url (optional)</para>
            <para>- <c>string</c> timeline_order (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The timeline.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.CreateAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Create a Collection owned by the currently authenticated user.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> name (required)</para>
            <para>- <c>string</c> description (optional)</para>
            <para>- <c>string</c> url (optional)</para>
            <para>- <c>string</c> timeline_order (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The timeline.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.CreateAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Create a Collection owned by the currently authenticated user.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> name (required)</para>
            <para>- <c>string</c> description (optional)</para>
            <para>- <c>string</c> url (optional)</para>
            <para>- <c>string</c> timeline_order (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The timeline.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.CreateAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Create a Collection owned by the currently authenticated user.</para>
            </summary>
            <param name="name">required.</param>
            <param name="description">optional.</param>
            <param name="url">optional.</param>
            <param name="timeline_order">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The timeline.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.Update(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Update information concerning a Collection owned by the currently authenticated user.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            <para>- <c>string</c> name (optional)</para>
            <para>- <c>string</c> description (optional)</para>
            <para>- <c>string</c> url (optional)</para>
            <para>- <c>string</c> timeline_order (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The timeline.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.Update(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Update information concerning a Collection owned by the currently authenticated user.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            <para>- <c>string</c> name (optional)</para>
            <para>- <c>string</c> description (optional)</para>
            <para>- <c>string</c> url (optional)</para>
            <para>- <c>string</c> timeline_order (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The timeline.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.Update(System.Object)">
            <summary>
            <para>Update information concerning a Collection owned by the currently authenticated user.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            <para>- <c>string</c> name (optional)</para>
            <para>- <c>string</c> description (optional)</para>
            <para>- <c>string</c> url (optional)</para>
            <para>- <c>string</c> timeline_order (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The timeline.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.Update(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            <para>Update information concerning a Collection owned by the currently authenticated user.</para>
            </summary>
            <param name="id">required.</param>
            <param name="name">optional.</param>
            <param name="description">optional.</param>
            <param name="url">optional.</param>
            <param name="timeline_order">optional.</param>
            <returns>The timeline.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.UpdateAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Update information concerning a Collection owned by the currently authenticated user.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            <para>- <c>string</c> name (optional)</para>
            <para>- <c>string</c> description (optional)</para>
            <para>- <c>string</c> url (optional)</para>
            <para>- <c>string</c> timeline_order (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The timeline.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.UpdateAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Update information concerning a Collection owned by the currently authenticated user.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            <para>- <c>string</c> name (optional)</para>
            <para>- <c>string</c> description (optional)</para>
            <para>- <c>string</c> url (optional)</para>
            <para>- <c>string</c> timeline_order (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The timeline.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.UpdateAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Update information concerning a Collection owned by the currently authenticated user.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            <para>- <c>string</c> name (optional)</para>
            <para>- <c>string</c> description (optional)</para>
            <para>- <c>string</c> url (optional)</para>
            <para>- <c>string</c> timeline_order (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The timeline.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.UpdateAsync(System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Update information concerning a Collection owned by the currently authenticated user.</para>
            </summary>
            <param name="id">required.</param>
            <param name="name">optional.</param>
            <param name="description">optional.</param>
            <param name="url">optional.</param>
            <param name="timeline_order">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The timeline.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.Destroy(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Permanently delete a Collection owned by the currently authenticated user.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The value that indicates whether the operation has been succeeded.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.Destroy(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Permanently delete a Collection owned by the currently authenticated user.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The value that indicates whether the operation has been succeeded.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.Destroy(System.Object)">
            <summary>
            <para>Permanently delete a Collection owned by the currently authenticated user.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The value that indicates whether the operation has been succeeded.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.Destroy(System.String)">
            <summary>
            <para>Permanently delete a Collection owned by the currently authenticated user.</para>
            </summary>
            <param name="id">required.</param>
            <returns>The value that indicates whether the operation has been succeeded.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.DestroyAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Permanently delete a Collection owned by the currently authenticated user.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The value that indicates whether the operation has been succeeded.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.DestroyAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Permanently delete a Collection owned by the currently authenticated user.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The value that indicates whether the operation has been succeeded.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.DestroyAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Permanently delete a Collection owned by the currently authenticated user.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The value that indicates whether the operation has been succeeded.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.DestroyAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Permanently delete a Collection owned by the currently authenticated user.</para>
            </summary>
            <param name="id">required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The value that indicates whether the operation has been succeeded.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.EntriesAdd(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Add a specified Tweet to a Collection.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            <para>- <c>long</c> tweet_id (required)</para>
            <para>- <c>long</c> relative_to (optional)</para>
            <para>- <c>bool</c> above (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The errors.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.EntriesAdd(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Add a specified Tweet to a Collection.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            <para>- <c>long</c> tweet_id (required)</para>
            <para>- <c>long</c> relative_to (optional)</para>
            <para>- <c>bool</c> above (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The errors.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.EntriesAdd(System.Object)">
            <summary>
            <para>Add a specified Tweet to a Collection.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            <para>- <c>long</c> tweet_id (required)</para>
            <para>- <c>long</c> relative_to (optional)</para>
            <para>- <c>bool</c> above (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The errors.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.EntriesAdd(System.String,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Boolean})">
            <summary>
            <para>Add a specified Tweet to a Collection.</para>
            </summary>
            <param name="id">required.</param>
            <param name="tweet_id">required.</param>
            <param name="relative_to">optional.</param>
            <param name="above">optional.</param>
            <returns>The errors.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.EntriesAddAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Add a specified Tweet to a Collection.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            <para>- <c>long</c> tweet_id (required)</para>
            <para>- <c>long</c> relative_to (optional)</para>
            <para>- <c>bool</c> above (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The errors.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.EntriesAddAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Add a specified Tweet to a Collection.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            <para>- <c>long</c> tweet_id (required)</para>
            <para>- <c>long</c> relative_to (optional)</para>
            <para>- <c>bool</c> above (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The errors.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.EntriesAddAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Add a specified Tweet to a Collection.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            <para>- <c>long</c> tweet_id (required)</para>
            <para>- <c>long</c> relative_to (optional)</para>
            <para>- <c>bool</c> above (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The errors.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.EntriesAddAsync(System.String,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            <para>Add a specified Tweet to a Collection.</para>
            </summary>
            <param name="id">required.</param>
            <param name="tweet_id">required.</param>
            <param name="relative_to">optional.</param>
            <param name="above">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The errors.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.EntriesRemove(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Remove the specified Tweet from a Collection.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            <para>- <c>long</c> tweet_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The errors.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.EntriesRemove(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Remove the specified Tweet from a Collection.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            <para>- <c>long</c> tweet_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The errors.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.EntriesRemove(System.Object)">
            <summary>
            <para>Remove the specified Tweet from a Collection.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            <para>- <c>long</c> tweet_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The errors.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.EntriesRemove(System.String,System.Int64)">
            <summary>
            <para>Remove the specified Tweet from a Collection.</para>
            </summary>
            <param name="id">required.</param>
            <param name="tweet_id">required.</param>
            <returns>The errors.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.EntriesRemoveAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Remove the specified Tweet from a Collection.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            <para>- <c>long</c> tweet_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The errors.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.EntriesRemoveAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Remove the specified Tweet from a Collection.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            <para>- <c>long</c> tweet_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The errors.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.EntriesRemoveAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Remove the specified Tweet from a Collection.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            <para>- <c>long</c> tweet_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The errors.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.EntriesRemoveAsync(System.String,System.Int64,System.Threading.CancellationToken)">
            <summary>
            <para>Remove the specified Tweet from a Collection.</para>
            </summary>
            <param name="id">required.</param>
            <param name="tweet_id">required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The errors.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.EntriesMove(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Move a specified Tweet to a new position in a curation_reverse_chron ordered collection.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            <para>- <c>long</c> tweet_id (required)</para>
            <para>- <c>long</c> relative_to (required)</para>
            <para>- <c>bool</c> above (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The errors.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.EntriesMove(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Move a specified Tweet to a new position in a curation_reverse_chron ordered collection.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            <para>- <c>long</c> tweet_id (required)</para>
            <para>- <c>long</c> relative_to (required)</para>
            <para>- <c>bool</c> above (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The errors.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.EntriesMove(System.Object)">
            <summary>
            <para>Move a specified Tweet to a new position in a curation_reverse_chron ordered collection.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            <para>- <c>long</c> tweet_id (required)</para>
            <para>- <c>long</c> relative_to (required)</para>
            <para>- <c>bool</c> above (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The errors.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.EntriesMove(System.String,System.Int64,System.Int64,System.Nullable{System.Boolean})">
            <summary>
            <para>Move a specified Tweet to a new position in a curation_reverse_chron ordered collection.</para>
            </summary>
            <param name="id">required.</param>
            <param name="tweet_id">required.</param>
            <param name="relative_to">required.</param>
            <param name="above">optional.</param>
            <returns>The errors.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.EntriesMoveAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Move a specified Tweet to a new position in a curation_reverse_chron ordered collection.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            <para>- <c>long</c> tweet_id (required)</para>
            <para>- <c>long</c> relative_to (required)</para>
            <para>- <c>bool</c> above (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The errors.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.EntriesMoveAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Move a specified Tweet to a new position in a curation_reverse_chron ordered collection.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            <para>- <c>long</c> tweet_id (required)</para>
            <para>- <c>long</c> relative_to (required)</para>
            <para>- <c>bool</c> above (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The errors.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.EntriesMoveAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Move a specified Tweet to a new position in a curation_reverse_chron ordered collection.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            <para>- <c>long</c> tweet_id (required)</para>
            <para>- <c>long</c> relative_to (required)</para>
            <para>- <c>bool</c> above (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The errors.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.EntriesMoveAsync(System.String,System.Int64,System.Int64,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            <para>Move a specified Tweet to a new position in a curation_reverse_chron ordered collection.</para>
            </summary>
            <param name="id">required.</param>
            <param name="tweet_id">required.</param>
            <param name="relative_to">required.</param>
            <param name="above">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The errors.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.EntriesCurate(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Curate a Collection by adding or removing Tweets in bulk.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            <para>- <c>IEnumerable&lt;CollectionEntryChange&gt;</c> changes (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The errors.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.EntriesCurate(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Curate a Collection by adding or removing Tweets in bulk.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            <para>- <c>IEnumerable&lt;CollectionEntryChange&gt;</c> changes (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The errors.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.EntriesCurate(System.Object)">
            <summary>
            <para>Curate a Collection by adding or removing Tweets in bulk.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            <para>- <c>IEnumerable&lt;CollectionEntryChange&gt;</c> changes (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The errors.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.EntriesCurate(System.String,System.Collections.Generic.IEnumerable{CoreTweet.CollectionEntryChange})">
            <summary>
            <para>Curate a Collection by adding or removing Tweets in bulk.</para>
            </summary>
            <param name="id">required.</param>
            <param name="changes">required.</param>
            <returns>The errors.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.EntriesCurateAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Curate a Collection by adding or removing Tweets in bulk.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            <para>- <c>IEnumerable&lt;CollectionEntryChange&gt;</c> changes (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The errors.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.EntriesCurateAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Curate a Collection by adding or removing Tweets in bulk.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            <para>- <c>IEnumerable&lt;CollectionEntryChange&gt;</c> changes (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The errors.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.EntriesCurateAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Curate a Collection by adding or removing Tweets in bulk.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            <para>- <c>IEnumerable&lt;CollectionEntryChange&gt;</c> changes (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The errors.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Collections.EntriesCurateAsync(System.String,System.Collections.Generic.IEnumerable{CoreTweet.CollectionEntryChange},System.Threading.CancellationToken)">
            <summary>
            <para>Curate a Collection by adding or removing Tweets in bulk.</para>
            </summary>
            <param name="id">required.</param>
            <param name="changes">required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The errors.</returns>
        </member>
        <member name="T:CoreTweet.Rest.DirectMessages">
            <summary>
            Provides a set of methods for the wrapper of GET/POST direct_messages.
            </summary>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.Received(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the most recent direct messages sent to the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> since_id (optional)</para>
            <para>- <c>long</c> max_id (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>int</c> page (optional)</para>
            <para>- <c>bool</c> full_text (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The direct messages.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.Received(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns the most recent direct messages sent to the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> since_id (optional)</para>
            <para>- <c>long</c> max_id (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>int</c> page (optional)</para>
            <para>- <c>bool</c> full_text (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The direct messages.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.Received(System.Object)">
            <summary>
            <para>Returns the most recent direct messages sent to the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> since_id (optional)</para>
            <para>- <c>long</c> max_id (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>int</c> page (optional)</para>
            <para>- <c>bool</c> full_text (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The direct messages.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.Received(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            <para>Returns the most recent direct messages sent to the authenticating user.</para>
            </summary>
            <param name="since_id">optional.</param>
            <param name="max_id">optional.</param>
            <param name="count">optional.</param>
            <param name="page">optional.</param>
            <param name="full_text">optional.</param>
            <param name="include_entities">optional.</param>
            <returns>The direct messages.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.ReceivedAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the most recent direct messages sent to the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> since_id (optional)</para>
            <para>- <c>long</c> max_id (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>int</c> page (optional)</para>
            <para>- <c>bool</c> full_text (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The direct messages.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.ReceivedAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns the most recent direct messages sent to the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> since_id (optional)</para>
            <para>- <c>long</c> max_id (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>int</c> page (optional)</para>
            <para>- <c>bool</c> full_text (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The direct messages.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.ReceivedAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns the most recent direct messages sent to the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> since_id (optional)</para>
            <para>- <c>long</c> max_id (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>int</c> page (optional)</para>
            <para>- <c>bool</c> full_text (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The direct messages.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.ReceivedAsync(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            <para>Returns the most recent direct messages sent to the authenticating user.</para>
            </summary>
            <param name="since_id">optional.</param>
            <param name="max_id">optional.</param>
            <param name="count">optional.</param>
            <param name="page">optional.</param>
            <param name="full_text">optional.</param>
            <param name="include_entities">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The direct messages.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.Sent(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the most recent direct messages sent by the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> since_id (optional)</para>
            <para>- <c>long</c> max_id (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>int</c> page (optional)</para>
            <para>- <c>bool</c> full_text (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The direct messages.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.Sent(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns the most recent direct messages sent by the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> since_id (optional)</para>
            <para>- <c>long</c> max_id (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>int</c> page (optional)</para>
            <para>- <c>bool</c> full_text (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The direct messages.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.Sent(System.Object)">
            <summary>
            <para>Returns the most recent direct messages sent by the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> since_id (optional)</para>
            <para>- <c>long</c> max_id (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>int</c> page (optional)</para>
            <para>- <c>bool</c> full_text (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The direct messages.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.Sent(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            <para>Returns the most recent direct messages sent by the authenticating user.</para>
            </summary>
            <param name="since_id">optional.</param>
            <param name="max_id">optional.</param>
            <param name="count">optional.</param>
            <param name="page">optional.</param>
            <param name="full_text">optional.</param>
            <param name="include_entities">optional.</param>
            <returns>The direct messages.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.SentAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the most recent direct messages sent by the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> since_id (optional)</para>
            <para>- <c>long</c> max_id (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>int</c> page (optional)</para>
            <para>- <c>bool</c> full_text (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The direct messages.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.SentAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns the most recent direct messages sent by the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> since_id (optional)</para>
            <para>- <c>long</c> max_id (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>int</c> page (optional)</para>
            <para>- <c>bool</c> full_text (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The direct messages.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.SentAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns the most recent direct messages sent by the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> since_id (optional)</para>
            <para>- <c>long</c> max_id (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>int</c> page (optional)</para>
            <para>- <c>bool</c> full_text (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The direct messages.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.SentAsync(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            <para>Returns the most recent direct messages sent by the authenticating user.</para>
            </summary>
            <param name="since_id">optional.</param>
            <param name="max_id">optional.</param>
            <param name="count">optional.</param>
            <param name="page">optional.</param>
            <param name="full_text">optional.</param>
            <param name="include_entities">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The direct messages.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.Show(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a single direct message, specified by an id parameter.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> full_text (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The direct message.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.Show(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns a single direct message, specified by an id parameter.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> full_text (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The direct message.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.Show(System.Object)">
            <summary>
            <para>Returns a single direct message, specified by an id parameter.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> full_text (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The direct message.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.Show(System.Int64,System.Nullable{System.Boolean})">
            <summary>
            <para>Returns a single direct message, specified by an id parameter.</para>
            </summary>
            <param name="id">required.</param>
            <param name="full_text">optional.</param>
            <returns>The direct message.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.ShowAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a single direct message, specified by an id parameter.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> full_text (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The direct message.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.ShowAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a single direct message, specified by an id parameter.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> full_text (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The direct message.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.ShowAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns a single direct message, specified by an id parameter.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> full_text (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The direct message.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.ShowAsync(System.Int64,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a single direct message, specified by an id parameter.</para>
            </summary>
            <param name="id">required.</param>
            <param name="full_text">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The direct message.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.New(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Sends a new direct message to the specified user from the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>string</c> text (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The direct message.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.New(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Sends a new direct message to the specified user from the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>string</c> text (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The direct message.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.New(System.Object)">
            <summary>
            <para>Sends a new direct message to the specified user from the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>string</c> text (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The direct message.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.New(System.Int64,System.String)">
            <summary>
            <para>Sends a new direct message to the specified user from the authenticating user.</para>
            </summary>
            <param name="user_id">any one is required.</param>
            <param name="text">required.</param>
            <returns>The direct message.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.New(System.String,System.String)">
            <summary>
            <para>Sends a new direct message to the specified user from the authenticating user.</para>
            </summary>
            <param name="screen_name">any one is required.</param>
            <param name="text">required.</param>
            <returns>The direct message.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.NewAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Sends a new direct message to the specified user from the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>string</c> text (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The direct message.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.NewAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Sends a new direct message to the specified user from the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>string</c> text (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The direct message.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.NewAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Sends a new direct message to the specified user from the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>string</c> text (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The direct message.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.NewAsync(System.Int64,System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Sends a new direct message to the specified user from the authenticating user.</para>
            </summary>
            <param name="user_id">any one is required.</param>
            <param name="text">required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The direct message.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.NewAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Sends a new direct message to the specified user from the authenticating user.</para>
            </summary>
            <param name="screen_name">any one is required.</param>
            <param name="text">required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The direct message.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.Destroy(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Destroys the direct message specified in the required ID parameter.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The direct message.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.Destroy(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Destroys the direct message specified in the required ID parameter.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The direct message.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.Destroy(System.Object)">
            <summary>
            <para>Destroys the direct message specified in the required ID parameter.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The direct message.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.Destroy(System.Int64,System.Nullable{System.Boolean})">
            <summary>
            <para>Destroys the direct message specified in the required ID parameter.</para>
            </summary>
            <param name="id">required.</param>
            <param name="include_entities">optional.</param>
            <returns>The direct message.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.DestroyAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Destroys the direct message specified in the required ID parameter.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The direct message.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.DestroyAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Destroys the direct message specified in the required ID parameter.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The direct message.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.DestroyAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Destroys the direct message specified in the required ID parameter.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The direct message.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.DestroyAsync(System.Int64,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            <para>Destroys the direct message specified in the required ID parameter.</para>
            </summary>
            <param name="id">required.</param>
            <param name="include_entities">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The direct message.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.MarkRead(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Marks a message as read in the recipient’s Direct Message conversation view with the sender.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> last_read_event_id (required)</para>
            <para>- <c>long</c> recipient_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.MarkRead(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Marks a message as read in the recipient’s Direct Message conversation view with the sender.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> last_read_event_id (required)</para>
            <para>- <c>long</c> recipient_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.MarkRead(System.Object)">
            <summary>
            <para>Marks a message as read in the recipient’s Direct Message conversation view with the sender.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> last_read_event_id (required)</para>
            <para>- <c>long</c> recipient_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.MarkRead(System.Int64,System.Int64)">
            <summary>
            <para>Marks a message as read in the recipient’s Direct Message conversation view with the sender.</para>
            </summary>
            <param name="last_read_event_id">required.</param>
            <param name="recipient_id">required.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.MarkReadAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Marks a message as read in the recipient’s Direct Message conversation view with the sender.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> last_read_event_id (required)</para>
            <para>- <c>long</c> recipient_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.MarkReadAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Marks a message as read in the recipient’s Direct Message conversation view with the sender.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> last_read_event_id (required)</para>
            <para>- <c>long</c> recipient_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.MarkReadAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Marks a message as read in the recipient’s Direct Message conversation view with the sender.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> last_read_event_id (required)</para>
            <para>- <c>long</c> recipient_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.MarkReadAsync(System.Int64,System.Int64,System.Threading.CancellationToken)">
            <summary>
            <para>Marks a message as read in the recipient’s Direct Message conversation view with the sender.</para>
            </summary>
            <param name="last_read_event_id">required.</param>
            <param name="recipient_id">required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.IndicateTyping(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Displays a visual typing indicator in the recipient’s Direct Message conversation view with the sender.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> recipient_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.IndicateTyping(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Displays a visual typing indicator in the recipient’s Direct Message conversation view with the sender.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> recipient_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.IndicateTyping(System.Object)">
            <summary>
            <para>Displays a visual typing indicator in the recipient’s Direct Message conversation view with the sender.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> recipient_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.IndicateTyping(System.Int64)">
            <summary>
            <para>Displays a visual typing indicator in the recipient’s Direct Message conversation view with the sender.</para>
            </summary>
            <param name="recipient_id">required.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.IndicateTypingAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Displays a visual typing indicator in the recipient’s Direct Message conversation view with the sender.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> recipient_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.IndicateTypingAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Displays a visual typing indicator in the recipient’s Direct Message conversation view with the sender.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> recipient_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.IndicateTypingAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Displays a visual typing indicator in the recipient’s Direct Message conversation view with the sender.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> recipient_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessages.IndicateTypingAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            <para>Displays a visual typing indicator in the recipient’s Direct Message conversation view with the sender.</para>
            </summary>
            <param name="recipient_id">required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="P:CoreTweet.Rest.DirectMessages.Events">
            <summary>
            Gets the wrapper of direct_messages/events.
            </summary>
        </member>
        <member name="P:CoreTweet.Rest.DirectMessages.WelcomeMessages">
            <summary>
            Gets the wrapper of direct_messages/welcome_messages.
            </summary>
        </member>
        <member name="T:CoreTweet.Rest.DirectMessagesEvents">
            <summary>
            Provides a set of methods for the wrapper of GET/POST direct_messages/events.
            </summary>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessagesEvents.New(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Publishes a new message_create event resulting in a Direct Message sent to a specified user from the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> text (required)</para>
            <para>- <c>long</c> recipient_id (required)</para>
            <para>- <c>QuickReply</c> quick_reply (optional)</para>
            <para>- <c>string</c> attachment_type (optional)</para>
            <para>- <c>long</c> attachment_media_id (optional)</para>
            <para>- <c>IEnumerable&lt;MessageCallToAction&gt;</c> ctas (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The published event.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessagesEvents.New(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Publishes a new message_create event resulting in a Direct Message sent to a specified user from the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> text (required)</para>
            <para>- <c>long</c> recipient_id (required)</para>
            <para>- <c>QuickReply</c> quick_reply (optional)</para>
            <para>- <c>string</c> attachment_type (optional)</para>
            <para>- <c>long</c> attachment_media_id (optional)</para>
            <para>- <c>IEnumerable&lt;MessageCallToAction&gt;</c> ctas (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The published event.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessagesEvents.New(System.Object)">
            <summary>
            <para>Publishes a new message_create event resulting in a Direct Message sent to a specified user from the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> text (required)</para>
            <para>- <c>long</c> recipient_id (required)</para>
            <para>- <c>QuickReply</c> quick_reply (optional)</para>
            <para>- <c>string</c> attachment_type (optional)</para>
            <para>- <c>long</c> attachment_media_id (optional)</para>
            <para>- <c>IEnumerable&lt;MessageCallToAction&gt;</c> ctas (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The published event.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessagesEvents.New(System.String,System.Int64,CoreTweet.QuickReply,System.String,System.Nullable{System.Int64},System.Collections.Generic.IEnumerable{CoreTweet.MessageCallToAction})">
            <summary>
            <para>Publishes a new message_create event resulting in a Direct Message sent to a specified user from the authenticating user.</para>
            </summary>
            <param name="text">required.</param>
            <param name="recipient_id">required.</param>
            <param name="quick_reply">optional.</param>
            <param name="attachment_type">optional.</param>
            <param name="attachment_media_id">optional.</param>
            <param name="ctas">optional.</param>
            <returns>The published event.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessagesEvents.NewAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Publishes a new message_create event resulting in a Direct Message sent to a specified user from the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> text (required)</para>
            <para>- <c>long</c> recipient_id (required)</para>
            <para>- <c>QuickReply</c> quick_reply (optional)</para>
            <para>- <c>string</c> attachment_type (optional)</para>
            <para>- <c>long</c> attachment_media_id (optional)</para>
            <para>- <c>IEnumerable&lt;MessageCallToAction&gt;</c> ctas (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The published event.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessagesEvents.NewAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Publishes a new message_create event resulting in a Direct Message sent to a specified user from the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> text (required)</para>
            <para>- <c>long</c> recipient_id (required)</para>
            <para>- <c>QuickReply</c> quick_reply (optional)</para>
            <para>- <c>string</c> attachment_type (optional)</para>
            <para>- <c>long</c> attachment_media_id (optional)</para>
            <para>- <c>IEnumerable&lt;MessageCallToAction&gt;</c> ctas (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The published event.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessagesEvents.NewAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Publishes a new message_create event resulting in a Direct Message sent to a specified user from the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> text (required)</para>
            <para>- <c>long</c> recipient_id (required)</para>
            <para>- <c>QuickReply</c> quick_reply (optional)</para>
            <para>- <c>string</c> attachment_type (optional)</para>
            <para>- <c>long</c> attachment_media_id (optional)</para>
            <para>- <c>IEnumerable&lt;MessageCallToAction&gt;</c> ctas (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The published event.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessagesEvents.NewAsync(System.String,System.Int64,CoreTweet.QuickReply,System.String,System.Nullable{System.Int64},System.Collections.Generic.IEnumerable{CoreTweet.MessageCallToAction},System.Threading.CancellationToken)">
            <summary>
            <para>Publishes a new message_create event resulting in a Direct Message sent to a specified user from the authenticating user.</para>
            </summary>
            <param name="text">required.</param>
            <param name="recipient_id">required.</param>
            <param name="quick_reply">optional.</param>
            <param name="attachment_type">optional.</param>
            <param name="attachment_media_id">optional.</param>
            <param name="ctas">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The published event.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessagesEvents.List(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns all Direct Message events (both sent and received) within the last 30 days. Sorted in reverse-chronological order.</para>
            <para>Available parameters:</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>string</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The Direct Messages.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessagesEvents.List(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns all Direct Message events (both sent and received) within the last 30 days. Sorted in reverse-chronological order.</para>
            <para>Available parameters:</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>string</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The Direct Messages.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessagesEvents.List(System.Object)">
            <summary>
            <para>Returns all Direct Message events (both sent and received) within the last 30 days. Sorted in reverse-chronological order.</para>
            <para>Available parameters:</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>string</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The Direct Messages.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessagesEvents.EnumerateList(System.Nullable{System.Int32},System.String)">
            <summary>
            <para>Returns all Direct Message events (both sent and received) within the last 30 days. Sorted in reverse-chronological order.</para>
            </summary>
            <param name="count">optional.</param>
            <param name="cursor">optional.</param>
            <returns>The Direct Messages.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessagesEvents.List(System.Nullable{System.Int32},System.String)">
            <summary>
            <para>Returns all Direct Message events (both sent and received) within the last 30 days. Sorted in reverse-chronological order.</para>
            </summary>
            <param name="count">optional.</param>
            <param name="cursor">optional.</param>
            <returns>The Direct Messages.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessagesEvents.EnumerateList(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns all Direct Message events (both sent and received) within the last 30 days. Sorted in reverse-chronological order.</para>
            <para>Available parameters:</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>string</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The Direct Messages.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessagesEvents.EnumerateList(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns all Direct Message events (both sent and received) within the last 30 days. Sorted in reverse-chronological order.</para>
            <para>Available parameters:</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>string</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The Direct Messages.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessagesEvents.EnumerateList(System.Object)">
            <summary>
            <para>Returns all Direct Message events (both sent and received) within the last 30 days. Sorted in reverse-chronological order.</para>
            <para>Available parameters:</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>string</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The Direct Messages.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessagesEvents.ListAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns all Direct Message events (both sent and received) within the last 30 days. Sorted in reverse-chronological order.</para>
            <para>Available parameters:</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>string</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The Direct Messages.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessagesEvents.ListAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns all Direct Message events (both sent and received) within the last 30 days. Sorted in reverse-chronological order.</para>
            <para>Available parameters:</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>string</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The Direct Messages.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessagesEvents.ListAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns all Direct Message events (both sent and received) within the last 30 days. Sorted in reverse-chronological order.</para>
            <para>Available parameters:</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>string</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The Direct Messages.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessagesEvents.ListAsync(System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Returns all Direct Message events (both sent and received) within the last 30 days. Sorted in reverse-chronological order.</para>
            </summary>
            <param name="count">optional.</param>
            <param name="cursor">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The Direct Messages.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessagesEvents.Show(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a single Direct Message event by the given id.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The Direct Message.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessagesEvents.Show(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns a single Direct Message event by the given id.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The Direct Message.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessagesEvents.Show(System.Object)">
            <summary>
            <para>Returns a single Direct Message event by the given id.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The Direct Message.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessagesEvents.Show(System.String)">
            <summary>
            <para>Returns a single Direct Message event by the given id.</para>
            </summary>
            <param name="id">required.</param>
            <returns>The Direct Message.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessagesEvents.ShowAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a single Direct Message event by the given id.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The Direct Message.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessagesEvents.ShowAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a single Direct Message event by the given id.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The Direct Message.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessagesEvents.ShowAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns a single Direct Message event by the given id.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The Direct Message.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessagesEvents.ShowAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Returns a single Direct Message event by the given id.</para>
            </summary>
            <param name="id">required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The Direct Message.</returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessagesEvents.Destroy(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Deletes the direct message specified in the required ID parameter.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessagesEvents.Destroy(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Deletes the direct message specified in the required ID parameter.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessagesEvents.Destroy(System.Object)">
            <summary>
            <para>Deletes the direct message specified in the required ID parameter.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessagesEvents.Destroy(System.String)">
            <summary>
            <para>Deletes the direct message specified in the required ID parameter.</para>
            </summary>
            <param name="id">required.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessagesEvents.DestroyAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Deletes the direct message specified in the required ID parameter.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessagesEvents.DestroyAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Deletes the direct message specified in the required ID parameter.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessagesEvents.DestroyAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Deletes the direct message specified in the required ID parameter.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.DirectMessagesEvents.DestroyAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Deletes the direct message specified in the required ID parameter.</para>
            </summary>
            <param name="id">required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="T:CoreTweet.Rest.Favorites">
            <summary>
            Provides a set of methods for the wrapper of GET/POST favorites.
            </summary>
        </member>
        <member name="M:CoreTweet.Rest.Favorites.List(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the 20 most recent Tweets favorited by the authenticating or specified user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> since_id (optional)</para>
            <para>- <c>long</c> max_id (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Favorites.List(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns the 20 most recent Tweets favorited by the authenticating or specified user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> since_id (optional)</para>
            <para>- <c>long</c> max_id (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Favorites.List(System.Object)">
            <summary>
            <para>Returns the 20 most recent Tweets favorited by the authenticating or specified user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> since_id (optional)</para>
            <para>- <c>long</c> max_id (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Favorites.List(System.Nullable{System.Int64},System.String,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Returns the 20 most recent Tweets favorited by the authenticating or specified user.</para>
            </summary>
            <param name="id">optional.</param>
            <param name="screen_name">optional.</param>
            <param name="count">optional.</param>
            <param name="since_id">optional.</param>
            <param name="max_id">optional.</param>
            <param name="include_entities">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Favorites.ListAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the 20 most recent Tweets favorited by the authenticating or specified user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> since_id (optional)</para>
            <para>- <c>long</c> max_id (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Favorites.ListAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns the 20 most recent Tweets favorited by the authenticating or specified user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> since_id (optional)</para>
            <para>- <c>long</c> max_id (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Favorites.ListAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns the 20 most recent Tweets favorited by the authenticating or specified user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (optional)</para>
            <para>- <c>string</c> screen_name (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> since_id (optional)</para>
            <para>- <c>long</c> max_id (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Favorites.ListAsync(System.Nullable{System.Int64},System.String,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Returns the 20 most recent Tweets favorited by the authenticating or specified user.</para>
            </summary>
            <param name="id">optional.</param>
            <param name="screen_name">optional.</param>
            <param name="count">optional.</param>
            <param name="since_id">optional.</param>
            <param name="max_id">optional.</param>
            <param name="include_entities">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Favorites.Create(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Favorites the status specified in the ID parameter as the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The favorited status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Favorites.Create(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Favorites the status specified in the ID parameter as the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The favorited status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Favorites.Create(System.Object)">
            <summary>
            <para>Favorites the status specified in the ID parameter as the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The favorited status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Favorites.Create(System.Int64,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Favorites the status specified in the ID parameter as the authenticating user.</para>
            </summary>
            <param name="id">required.</param>
            <param name="include_entities">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The favorited status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Favorites.CreateAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Favorites the status specified in the ID parameter as the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The favorited status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Favorites.CreateAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Favorites the status specified in the ID parameter as the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The favorited status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Favorites.CreateAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Favorites the status specified in the ID parameter as the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The favorited status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Favorites.CreateAsync(System.Int64,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Favorites the status specified in the ID parameter as the authenticating user.</para>
            </summary>
            <param name="id">required.</param>
            <param name="include_entities">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The favorited status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Favorites.Destroy(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Un-favorites the status specified in the ID parameter as the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The unfavorited status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Favorites.Destroy(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Un-favorites the status specified in the ID parameter as the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The unfavorited status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Favorites.Destroy(System.Object)">
            <summary>
            <para>Un-favorites the status specified in the ID parameter as the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The unfavorited status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Favorites.Destroy(System.Int64,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Un-favorites the status specified in the ID parameter as the authenticating user.</para>
            </summary>
            <param name="id">required.</param>
            <param name="include_entities">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The unfavorited status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Favorites.DestroyAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Un-favorites the status specified in the ID parameter as the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The unfavorited status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Favorites.DestroyAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Un-favorites the status specified in the ID parameter as the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The unfavorited status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Favorites.DestroyAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Un-favorites the status specified in the ID parameter as the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The unfavorited status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Favorites.DestroyAsync(System.Int64,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Un-favorites the status specified in the ID parameter as the authenticating user.</para>
            </summary>
            <param name="id">required.</param>
            <param name="include_entities">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The unfavorited status.</returns>
        </member>
        <member name="T:CoreTweet.Rest.Followers">
            <summary>
            Provides a set of methods for the wrapper of GET followers.
            </summary>
        </member>
        <member name="M:CoreTweet.Rest.Followers.Ids(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a cursored collection of user IDs for every user following the specified user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>int</c> count (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Followers.Ids(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns a cursored collection of user IDs for every user following the specified user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>int</c> count (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Followers.Ids(System.Object)">
            <summary>
            <para>Returns a cursored collection of user IDs for every user following the specified user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>int</c> count (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Followers.EnumerateIds(CoreTweet.EnumerateMode,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int32})">
            <summary>
            <para>Returns a cursored collection of user IDs for every user following the specified user.</para>
            </summary>
            <param name="user_id">any one is required.</param>
            <param name="cursor">semi-optional.</param>
            <param name="count">optional.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Followers.Ids(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int32})">
            <summary>
            <para>Returns a cursored collection of user IDs for every user following the specified user.</para>
            </summary>
            <param name="user_id">any one is required.</param>
            <param name="cursor">semi-optional.</param>
            <param name="count">optional.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Followers.EnumerateIds(CoreTweet.EnumerateMode,System.String,System.Nullable{System.Int64},System.Nullable{System.Int32})">
            <summary>
            <para>Returns a cursored collection of user IDs for every user following the specified user.</para>
            </summary>
            <param name="screen_name">any one is required.</param>
            <param name="cursor">semi-optional.</param>
            <param name="count">optional.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Followers.Ids(System.String,System.Nullable{System.Int64},System.Nullable{System.Int32})">
            <summary>
            <para>Returns a cursored collection of user IDs for every user following the specified user.</para>
            </summary>
            <param name="screen_name">any one is required.</param>
            <param name="cursor">semi-optional.</param>
            <param name="count">optional.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Followers.EnumerateIds(CoreTweet.EnumerateMode,System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a cursored collection of user IDs for every user following the specified user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>int</c> count (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Followers.EnumerateIds(CoreTweet.EnumerateMode,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns a cursored collection of user IDs for every user following the specified user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>int</c> count (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Followers.EnumerateIds(CoreTweet.EnumerateMode,System.Object)">
            <summary>
            <para>Returns a cursored collection of user IDs for every user following the specified user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>int</c> count (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Followers.IdsAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a cursored collection of user IDs for every user following the specified user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>int</c> count (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Followers.IdsAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a cursored collection of user IDs for every user following the specified user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>int</c> count (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Followers.IdsAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns a cursored collection of user IDs for every user following the specified user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>int</c> count (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Followers.IdsAsync(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a cursored collection of user IDs for every user following the specified user.</para>
            </summary>
            <param name="user_id">any one is required.</param>
            <param name="cursor">semi-optional.</param>
            <param name="count">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Followers.IdsAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a cursored collection of user IDs for every user following the specified user.</para>
            </summary>
            <param name="screen_name">any one is required.</param>
            <param name="cursor">semi-optional.</param>
            <param name="count">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Followers.List(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a cursored collection of user objects for users following the specified user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_user_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Followers.List(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns a cursored collection of user objects for users following the specified user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_user_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Followers.List(System.Object)">
            <summary>
            <para>Returns a cursored collection of user objects for users following the specified user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_user_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Followers.EnumerateList(CoreTweet.EnumerateMode,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Returns a cursored collection of user objects for users following the specified user.</para>
            </summary>
            <param name="user_id">any one is required.</param>
            <param name="cursor">semi-optional.</param>
            <param name="count">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_user_entities">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Followers.List(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Returns a cursored collection of user objects for users following the specified user.</para>
            </summary>
            <param name="user_id">any one is required.</param>
            <param name="cursor">semi-optional.</param>
            <param name="count">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_user_entities">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Followers.EnumerateList(CoreTweet.EnumerateMode,System.String,System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Returns a cursored collection of user objects for users following the specified user.</para>
            </summary>
            <param name="screen_name">any one is required.</param>
            <param name="cursor">semi-optional.</param>
            <param name="count">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_user_entities">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Followers.List(System.String,System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Returns a cursored collection of user objects for users following the specified user.</para>
            </summary>
            <param name="screen_name">any one is required.</param>
            <param name="cursor">semi-optional.</param>
            <param name="count">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_user_entities">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Followers.EnumerateList(CoreTweet.EnumerateMode,System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a cursored collection of user objects for users following the specified user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_user_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Followers.EnumerateList(CoreTweet.EnumerateMode,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns a cursored collection of user objects for users following the specified user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_user_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Followers.EnumerateList(CoreTweet.EnumerateMode,System.Object)">
            <summary>
            <para>Returns a cursored collection of user objects for users following the specified user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_user_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Followers.ListAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a cursored collection of user objects for users following the specified user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_user_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Followers.ListAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a cursored collection of user objects for users following the specified user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_user_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Followers.ListAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns a cursored collection of user objects for users following the specified user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_user_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Followers.ListAsync(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a cursored collection of user objects for users following the specified user.</para>
            </summary>
            <param name="user_id">any one is required.</param>
            <param name="cursor">semi-optional.</param>
            <param name="count">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_user_entities">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Followers.ListAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a cursored collection of user objects for users following the specified user.</para>
            </summary>
            <param name="screen_name">any one is required.</param>
            <param name="cursor">semi-optional.</param>
            <param name="count">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_user_entities">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The users.</returns>
        </member>
        <member name="T:CoreTweet.Rest.Friends">
            <summary>
            Provides a set of methods for the wrapper of GET friends.
            </summary>
        </member>
        <member name="M:CoreTweet.Rest.Friends.Ids(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a cursored collection of user IDs for every user the specified user is following (otherwise known as their "friends").</para>
            <para>At this time, results are ordered with the most recent following first; however this ordering is subject to unannounced change and eventual consistency issues.</para>
            <para>Results are given in groups of 5,000 user IDs and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests.</para>
            <para>This method is especially powerful when used in conjunction with GET users/lookup, a method that allows you to convert user IDs into full user objects in bulk.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>int</c> count (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friends.Ids(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns a cursored collection of user IDs for every user the specified user is following (otherwise known as their "friends").</para>
            <para>At this time, results are ordered with the most recent following first; however this ordering is subject to unannounced change and eventual consistency issues.</para>
            <para>Results are given in groups of 5,000 user IDs and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests.</para>
            <para>This method is especially powerful when used in conjunction with GET users/lookup, a method that allows you to convert user IDs into full user objects in bulk.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>int</c> count (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friends.Ids(System.Object)">
            <summary>
            <para>Returns a cursored collection of user IDs for every user the specified user is following (otherwise known as their "friends").</para>
            <para>At this time, results are ordered with the most recent following first; however this ordering is subject to unannounced change and eventual consistency issues.</para>
            <para>Results are given in groups of 5,000 user IDs and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests.</para>
            <para>This method is especially powerful when used in conjunction with GET users/lookup, a method that allows you to convert user IDs into full user objects in bulk.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>int</c> count (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friends.EnumerateIds(CoreTweet.EnumerateMode,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int32})">
            <summary>
            <para>Returns a cursored collection of user IDs for every user the specified user is following (otherwise known as their "friends").</para>
            <para>At this time, results are ordered with the most recent following first; however this ordering is subject to unannounced change and eventual consistency issues.</para>
            <para>Results are given in groups of 5,000 user IDs and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests.</para>
            <para>This method is especially powerful when used in conjunction with GET users/lookup, a method that allows you to convert user IDs into full user objects in bulk.</para>
            </summary>
            <param name="user_id">any one is required.</param>
            <param name="cursor">semi-optional.</param>
            <param name="count">optional.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friends.Ids(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int32})">
            <summary>
            <para>Returns a cursored collection of user IDs for every user the specified user is following (otherwise known as their "friends").</para>
            <para>At this time, results are ordered with the most recent following first; however this ordering is subject to unannounced change and eventual consistency issues.</para>
            <para>Results are given in groups of 5,000 user IDs and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests.</para>
            <para>This method is especially powerful when used in conjunction with GET users/lookup, a method that allows you to convert user IDs into full user objects in bulk.</para>
            </summary>
            <param name="user_id">any one is required.</param>
            <param name="cursor">semi-optional.</param>
            <param name="count">optional.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friends.EnumerateIds(CoreTweet.EnumerateMode,System.String,System.Nullable{System.Int64},System.Nullable{System.Int32})">
            <summary>
            <para>Returns a cursored collection of user IDs for every user the specified user is following (otherwise known as their "friends").</para>
            <para>At this time, results are ordered with the most recent following first; however this ordering is subject to unannounced change and eventual consistency issues.</para>
            <para>Results are given in groups of 5,000 user IDs and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests.</para>
            <para>This method is especially powerful when used in conjunction with GET users/lookup, a method that allows you to convert user IDs into full user objects in bulk.</para>
            </summary>
            <param name="screen_name">any one is required.</param>
            <param name="cursor">semi-optional.</param>
            <param name="count">optional.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friends.Ids(System.String,System.Nullable{System.Int64},System.Nullable{System.Int32})">
            <summary>
            <para>Returns a cursored collection of user IDs for every user the specified user is following (otherwise known as their "friends").</para>
            <para>At this time, results are ordered with the most recent following first; however this ordering is subject to unannounced change and eventual consistency issues.</para>
            <para>Results are given in groups of 5,000 user IDs and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests.</para>
            <para>This method is especially powerful when used in conjunction with GET users/lookup, a method that allows you to convert user IDs into full user objects in bulk.</para>
            </summary>
            <param name="screen_name">any one is required.</param>
            <param name="cursor">semi-optional.</param>
            <param name="count">optional.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friends.EnumerateIds(CoreTweet.EnumerateMode,System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a cursored collection of user IDs for every user the specified user is following (otherwise known as their "friends").</para>
            <para>At this time, results are ordered with the most recent following first; however this ordering is subject to unannounced change and eventual consistency issues.</para>
            <para>Results are given in groups of 5,000 user IDs and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests.</para>
            <para>This method is especially powerful when used in conjunction with GET users/lookup, a method that allows you to convert user IDs into full user objects in bulk.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>int</c> count (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friends.EnumerateIds(CoreTweet.EnumerateMode,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns a cursored collection of user IDs for every user the specified user is following (otherwise known as their "friends").</para>
            <para>At this time, results are ordered with the most recent following first; however this ordering is subject to unannounced change and eventual consistency issues.</para>
            <para>Results are given in groups of 5,000 user IDs and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests.</para>
            <para>This method is especially powerful when used in conjunction with GET users/lookup, a method that allows you to convert user IDs into full user objects in bulk.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>int</c> count (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friends.EnumerateIds(CoreTweet.EnumerateMode,System.Object)">
            <summary>
            <para>Returns a cursored collection of user IDs for every user the specified user is following (otherwise known as their "friends").</para>
            <para>At this time, results are ordered with the most recent following first; however this ordering is subject to unannounced change and eventual consistency issues.</para>
            <para>Results are given in groups of 5,000 user IDs and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests.</para>
            <para>This method is especially powerful when used in conjunction with GET users/lookup, a method that allows you to convert user IDs into full user objects in bulk.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>int</c> count (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friends.IdsAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a cursored collection of user IDs for every user the specified user is following (otherwise known as their "friends").</para>
            <para>At this time, results are ordered with the most recent following first; however this ordering is subject to unannounced change and eventual consistency issues.</para>
            <para>Results are given in groups of 5,000 user IDs and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests.</para>
            <para>This method is especially powerful when used in conjunction with GET users/lookup, a method that allows you to convert user IDs into full user objects in bulk.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>int</c> count (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friends.IdsAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a cursored collection of user IDs for every user the specified user is following (otherwise known as their "friends").</para>
            <para>At this time, results are ordered with the most recent following first; however this ordering is subject to unannounced change and eventual consistency issues.</para>
            <para>Results are given in groups of 5,000 user IDs and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests.</para>
            <para>This method is especially powerful when used in conjunction with GET users/lookup, a method that allows you to convert user IDs into full user objects in bulk.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>int</c> count (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friends.IdsAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns a cursored collection of user IDs for every user the specified user is following (otherwise known as their "friends").</para>
            <para>At this time, results are ordered with the most recent following first; however this ordering is subject to unannounced change and eventual consistency issues.</para>
            <para>Results are given in groups of 5,000 user IDs and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests.</para>
            <para>This method is especially powerful when used in conjunction with GET users/lookup, a method that allows you to convert user IDs into full user objects in bulk.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>int</c> count (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friends.IdsAsync(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a cursored collection of user IDs for every user the specified user is following (otherwise known as their "friends").</para>
            <para>At this time, results are ordered with the most recent following first; however this ordering is subject to unannounced change and eventual consistency issues.</para>
            <para>Results are given in groups of 5,000 user IDs and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests.</para>
            <para>This method is especially powerful when used in conjunction with GET users/lookup, a method that allows you to convert user IDs into full user objects in bulk.</para>
            </summary>
            <param name="user_id">any one is required.</param>
            <param name="cursor">semi-optional.</param>
            <param name="count">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friends.IdsAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a cursored collection of user IDs for every user the specified user is following (otherwise known as their "friends").</para>
            <para>At this time, results are ordered with the most recent following first; however this ordering is subject to unannounced change and eventual consistency issues.</para>
            <para>Results are given in groups of 5,000 user IDs and multiple "pages" of results can be navigated through using the next_cursor value in subsequent requests.</para>
            <para>This method is especially powerful when used in conjunction with GET users/lookup, a method that allows you to convert user IDs into full user objects in bulk.</para>
            </summary>
            <param name="screen_name">any one is required.</param>
            <param name="cursor">semi-optional.</param>
            <param name="count">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friends.List(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their "friends").</para>
            <para>At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. </para>
            <para>Results are given in groups of 20 users and multiple “pages” of results can be navigated through using the next_cursor value in subsequent requests. </para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_user_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friends.List(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their "friends").</para>
            <para>At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. </para>
            <para>Results are given in groups of 20 users and multiple “pages” of results can be navigated through using the next_cursor value in subsequent requests. </para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_user_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friends.List(System.Object)">
            <summary>
            <para>Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their "friends").</para>
            <para>At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. </para>
            <para>Results are given in groups of 20 users and multiple “pages” of results can be navigated through using the next_cursor value in subsequent requests. </para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_user_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friends.EnumerateList(CoreTweet.EnumerateMode,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their "friends").</para>
            <para>At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. </para>
            <para>Results are given in groups of 20 users and multiple “pages” of results can be navigated through using the next_cursor value in subsequent requests. </para>
            </summary>
            <param name="user_id">any one is required.</param>
            <param name="cursor">semi-optional.</param>
            <param name="count">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_user_entities">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friends.List(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their "friends").</para>
            <para>At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. </para>
            <para>Results are given in groups of 20 users and multiple “pages” of results can be navigated through using the next_cursor value in subsequent requests. </para>
            </summary>
            <param name="user_id">any one is required.</param>
            <param name="cursor">semi-optional.</param>
            <param name="count">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_user_entities">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friends.EnumerateList(CoreTweet.EnumerateMode,System.String,System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their "friends").</para>
            <para>At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. </para>
            <para>Results are given in groups of 20 users and multiple “pages” of results can be navigated through using the next_cursor value in subsequent requests. </para>
            </summary>
            <param name="screen_name">any one is required.</param>
            <param name="cursor">semi-optional.</param>
            <param name="count">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_user_entities">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friends.List(System.String,System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their "friends").</para>
            <para>At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. </para>
            <para>Results are given in groups of 20 users and multiple “pages” of results can be navigated through using the next_cursor value in subsequent requests. </para>
            </summary>
            <param name="screen_name">any one is required.</param>
            <param name="cursor">semi-optional.</param>
            <param name="count">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_user_entities">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friends.EnumerateList(CoreTweet.EnumerateMode,System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their "friends").</para>
            <para>At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. </para>
            <para>Results are given in groups of 20 users and multiple “pages” of results can be navigated through using the next_cursor value in subsequent requests. </para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_user_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friends.EnumerateList(CoreTweet.EnumerateMode,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their "friends").</para>
            <para>At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. </para>
            <para>Results are given in groups of 20 users and multiple “pages” of results can be navigated through using the next_cursor value in subsequent requests. </para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_user_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friends.EnumerateList(CoreTweet.EnumerateMode,System.Object)">
            <summary>
            <para>Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their "friends").</para>
            <para>At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. </para>
            <para>Results are given in groups of 20 users and multiple “pages” of results can be navigated through using the next_cursor value in subsequent requests. </para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_user_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friends.ListAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their "friends").</para>
            <para>At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. </para>
            <para>Results are given in groups of 20 users and multiple “pages” of results can be navigated through using the next_cursor value in subsequent requests. </para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_user_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friends.ListAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their "friends").</para>
            <para>At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. </para>
            <para>Results are given in groups of 20 users and multiple “pages” of results can be navigated through using the next_cursor value in subsequent requests. </para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_user_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friends.ListAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their "friends").</para>
            <para>At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. </para>
            <para>Results are given in groups of 20 users and multiple “pages” of results can be navigated through using the next_cursor value in subsequent requests. </para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_user_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friends.ListAsync(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their "friends").</para>
            <para>At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. </para>
            <para>Results are given in groups of 20 users and multiple “pages” of results can be navigated through using the next_cursor value in subsequent requests. </para>
            </summary>
            <param name="user_id">any one is required.</param>
            <param name="cursor">semi-optional.</param>
            <param name="count">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_user_entities">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friends.ListAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their "friends").</para>
            <para>At this time, results are ordered with the most recent following first — however, this ordering is subject to unannounced change and eventual consistency issues. </para>
            <para>Results are given in groups of 20 users and multiple “pages” of results can be navigated through using the next_cursor value in subsequent requests. </para>
            </summary>
            <param name="screen_name">any one is required.</param>
            <param name="cursor">semi-optional.</param>
            <param name="count">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_user_entities">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The users.</returns>
        </member>
        <member name="T:CoreTweet.Rest.Friendships">
            <summary>
            Provides a set of methods for the wrapper of GET/POST friendships.
            </summary>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.NoRetweetsIds(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a collection of user_ids that the currently authenticated user does not want to receive retweets from.</para>
            <para>Use POST friendships/update to set the "no retweets" status for a given user account on behalf of the current user.</para>
            <para>Available parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.NoRetweetsIds(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns a collection of user_ids that the currently authenticated user does not want to receive retweets from.</para>
            <para>Use POST friendships/update to set the "no retweets" status for a given user account on behalf of the current user.</para>
            <para>Available parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.NoRetweetsIds(System.Object)">
            <summary>
            <para>Returns a collection of user_ids that the currently authenticated user does not want to receive retweets from.</para>
            <para>Use POST friendships/update to set the "no retweets" status for a given user account on behalf of the current user.</para>
            <para>Available parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.NoRetweetsIds">
            <summary>
            <para>Returns a collection of user_ids that the currently authenticated user does not want to receive retweets from.</para>
            <para>Use POST friendships/update to set the "no retweets" status for a given user account on behalf of the current user.</para>
            </summary>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.NoRetweetsIdsAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a collection of user_ids that the currently authenticated user does not want to receive retweets from.</para>
            <para>Use POST friendships/update to set the "no retweets" status for a given user account on behalf of the current user.</para>
            <para>Available parameters:</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.NoRetweetsIdsAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a collection of user_ids that the currently authenticated user does not want to receive retweets from.</para>
            <para>Use POST friendships/update to set the "no retweets" status for a given user account on behalf of the current user.</para>
            <para>Available parameters:</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.NoRetweetsIdsAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns a collection of user_ids that the currently authenticated user does not want to receive retweets from.</para>
            <para>Use POST friendships/update to set the "no retweets" status for a given user account on behalf of the current user.</para>
            <para>Available parameters:</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.NoRetweetsIdsAsync(System.Threading.CancellationToken)">
            <summary>
            <para>Returns a collection of user_ids that the currently authenticated user does not want to receive retweets from.</para>
            <para>Use POST friendships/update to set the "no retweets" status for a given user account on behalf of the current user.</para>
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.Incoming(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a collection of numeric IDs for every user who has a pending request to follow the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.Incoming(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns a collection of numeric IDs for every user who has a pending request to follow the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.Incoming(System.Object)">
            <summary>
            <para>Returns a collection of numeric IDs for every user who has a pending request to follow the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.EnumerateIncoming(CoreTweet.EnumerateMode,System.Nullable{System.Int64})">
            <summary>
            <para>Returns a collection of numeric IDs for every user who has a pending request to follow the authenticating user.</para>
            </summary>
            <param name="cursor">semi-optional.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.Incoming(System.Nullable{System.Int64})">
            <summary>
            <para>Returns a collection of numeric IDs for every user who has a pending request to follow the authenticating user.</para>
            </summary>
            <param name="cursor">semi-optional.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.EnumerateIncoming(CoreTweet.EnumerateMode,System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a collection of numeric IDs for every user who has a pending request to follow the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.EnumerateIncoming(CoreTweet.EnumerateMode,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns a collection of numeric IDs for every user who has a pending request to follow the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.EnumerateIncoming(CoreTweet.EnumerateMode,System.Object)">
            <summary>
            <para>Returns a collection of numeric IDs for every user who has a pending request to follow the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.IncomingAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a collection of numeric IDs for every user who has a pending request to follow the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.IncomingAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a collection of numeric IDs for every user who has a pending request to follow the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.IncomingAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns a collection of numeric IDs for every user who has a pending request to follow the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.IncomingAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a collection of numeric IDs for every user who has a pending request to follow the authenticating user.</para>
            </summary>
            <param name="cursor">semi-optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.Outgoing(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a collection of numeric IDs for every protected user for whom the authenticating user has a pending follow request.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.Outgoing(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns a collection of numeric IDs for every protected user for whom the authenticating user has a pending follow request.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.Outgoing(System.Object)">
            <summary>
            <para>Returns a collection of numeric IDs for every protected user for whom the authenticating user has a pending follow request.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.EnumerateOutgoing(CoreTweet.EnumerateMode,System.Nullable{System.Int64})">
            <summary>
            <para>Returns a collection of numeric IDs for every protected user for whom the authenticating user has a pending follow request.</para>
            </summary>
            <param name="cursor">semi-optional.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.Outgoing(System.Nullable{System.Int64})">
            <summary>
            <para>Returns a collection of numeric IDs for every protected user for whom the authenticating user has a pending follow request.</para>
            </summary>
            <param name="cursor">semi-optional.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.EnumerateOutgoing(CoreTweet.EnumerateMode,System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a collection of numeric IDs for every protected user for whom the authenticating user has a pending follow request.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.EnumerateOutgoing(CoreTweet.EnumerateMode,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns a collection of numeric IDs for every protected user for whom the authenticating user has a pending follow request.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.EnumerateOutgoing(CoreTweet.EnumerateMode,System.Object)">
            <summary>
            <para>Returns a collection of numeric IDs for every protected user for whom the authenticating user has a pending follow request.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.OutgoingAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a collection of numeric IDs for every protected user for whom the authenticating user has a pending follow request.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.OutgoingAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a collection of numeric IDs for every protected user for whom the authenticating user has a pending follow request.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.OutgoingAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns a collection of numeric IDs for every protected user for whom the authenticating user has a pending follow request.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.OutgoingAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a collection of numeric IDs for every protected user for whom the authenticating user has a pending follow request.</para>
            </summary>
            <param name="cursor">semi-optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.Lookup(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the relationships of the authenticating user to the comma-separated list of up to 100 screen_names or user_ids provided.</para>
            <para>Values for connections can be: following, following_requested, followed_by, none.</para>
            <para>Available parameters:</para>
            <para>- <c>IEnumerable&lt;string&gt;</c> screen_name (any one is required)</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> user_id (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The friendships.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.Lookup(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns the relationships of the authenticating user to the comma-separated list of up to 100 screen_names or user_ids provided.</para>
            <para>Values for connections can be: following, following_requested, followed_by, none.</para>
            <para>Available parameters:</para>
            <para>- <c>IEnumerable&lt;string&gt;</c> screen_name (any one is required)</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> user_id (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The friendships.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.Lookup(System.Object)">
            <summary>
            <para>Returns the relationships of the authenticating user to the comma-separated list of up to 100 screen_names or user_ids provided.</para>
            <para>Values for connections can be: following, following_requested, followed_by, none.</para>
            <para>Available parameters:</para>
            <para>- <c>IEnumerable&lt;string&gt;</c> screen_name (any one is required)</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> user_id (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The friendships.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.Lookup(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            <para>Returns the relationships of the authenticating user to the comma-separated list of up to 100 screen_names or user_ids provided.</para>
            <para>Values for connections can be: following, following_requested, followed_by, none.</para>
            </summary>
            <param name="screen_name">any one is required.</param>
            <returns>The friendships.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.Lookup(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            <para>Returns the relationships of the authenticating user to the comma-separated list of up to 100 screen_names or user_ids provided.</para>
            <para>Values for connections can be: following, following_requested, followed_by, none.</para>
            </summary>
            <param name="user_id">any one is required.</param>
            <returns>The friendships.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.LookupAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the relationships of the authenticating user to the comma-separated list of up to 100 screen_names or user_ids provided.</para>
            <para>Values for connections can be: following, following_requested, followed_by, none.</para>
            <para>Available parameters:</para>
            <para>- <c>IEnumerable&lt;string&gt;</c> screen_name (any one is required)</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> user_id (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The friendships.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.LookupAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns the relationships of the authenticating user to the comma-separated list of up to 100 screen_names or user_ids provided.</para>
            <para>Values for connections can be: following, following_requested, followed_by, none.</para>
            <para>Available parameters:</para>
            <para>- <c>IEnumerable&lt;string&gt;</c> screen_name (any one is required)</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> user_id (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The friendships.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.LookupAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns the relationships of the authenticating user to the comma-separated list of up to 100 screen_names or user_ids provided.</para>
            <para>Values for connections can be: following, following_requested, followed_by, none.</para>
            <para>Available parameters:</para>
            <para>- <c>IEnumerable&lt;string&gt;</c> screen_name (any one is required)</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> user_id (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The friendships.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.LookupAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            <para>Returns the relationships of the authenticating user to the comma-separated list of up to 100 screen_names or user_ids provided.</para>
            <para>Values for connections can be: following, following_requested, followed_by, none.</para>
            </summary>
            <param name="screen_name">any one is required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The friendships.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.LookupAsync(System.Collections.Generic.IEnumerable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            <para>Returns the relationships of the authenticating user to the comma-separated list of up to 100 screen_names or user_ids provided.</para>
            <para>Values for connections can be: following, following_requested, followed_by, none.</para>
            </summary>
            <param name="user_id">any one is required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The friendships.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.Show(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns detailed information about the relationship between two arbitrary users.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> source_id (any one is required)</para>
            <para>- <c>string</c> source_screen_name (any one is required)</para>
            <para>- <c>long</c> target_id (any one is required)</para>
            <para>- <c>string</c> target_screen_name (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The relationship.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.Show(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns detailed information about the relationship between two arbitrary users.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> source_id (any one is required)</para>
            <para>- <c>string</c> source_screen_name (any one is required)</para>
            <para>- <c>long</c> target_id (any one is required)</para>
            <para>- <c>string</c> target_screen_name (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The relationship.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.Show(System.Object)">
            <summary>
            <para>Returns detailed information about the relationship between two arbitrary users.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> source_id (any one is required)</para>
            <para>- <c>string</c> source_screen_name (any one is required)</para>
            <para>- <c>long</c> target_id (any one is required)</para>
            <para>- <c>string</c> target_screen_name (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The relationship.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.Show(System.Int64)">
            <summary>
            <para>Returns detailed information about the relationship between two arbitrary users.</para>
            </summary>
            <param name="target_id">any one is required.</param>
            <returns>The relationship.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.Show(System.String)">
            <summary>
            <para>Returns detailed information about the relationship between two arbitrary users.</para>
            </summary>
            <param name="target_screen_name">any one is required.</param>
            <returns>The relationship.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.Show(System.Int64,System.Int64)">
            <summary>
            <para>Returns detailed information about the relationship between two arbitrary users.</para>
            </summary>
            <param name="source_id">any one is required.</param>
            <param name="target_id">any one is required.</param>
            <returns>The relationship.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.Show(System.Int64,System.String)">
            <summary>
            <para>Returns detailed information about the relationship between two arbitrary users.</para>
            </summary>
            <param name="source_id">any one is required.</param>
            <param name="target_screen_name">any one is required.</param>
            <returns>The relationship.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.Show(System.String,System.Int64)">
            <summary>
            <para>Returns detailed information about the relationship between two arbitrary users.</para>
            </summary>
            <param name="source_screen_name">any one is required.</param>
            <param name="target_id">any one is required.</param>
            <returns>The relationship.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.Show(System.String,System.String)">
            <summary>
            <para>Returns detailed information about the relationship between two arbitrary users.</para>
            </summary>
            <param name="source_screen_name">any one is required.</param>
            <param name="target_screen_name">any one is required.</param>
            <returns>The relationship.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.ShowAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns detailed information about the relationship between two arbitrary users.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> source_id (any one is required)</para>
            <para>- <c>string</c> source_screen_name (any one is required)</para>
            <para>- <c>long</c> target_id (any one is required)</para>
            <para>- <c>string</c> target_screen_name (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The relationship.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.ShowAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns detailed information about the relationship between two arbitrary users.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> source_id (any one is required)</para>
            <para>- <c>string</c> source_screen_name (any one is required)</para>
            <para>- <c>long</c> target_id (any one is required)</para>
            <para>- <c>string</c> target_screen_name (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The relationship.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.ShowAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns detailed information about the relationship between two arbitrary users.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> source_id (any one is required)</para>
            <para>- <c>string</c> source_screen_name (any one is required)</para>
            <para>- <c>long</c> target_id (any one is required)</para>
            <para>- <c>string</c> target_screen_name (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The relationship.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.ShowAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            <para>Returns detailed information about the relationship between two arbitrary users.</para>
            </summary>
            <param name="target_id">any one is required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The relationship.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.ShowAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Returns detailed information about the relationship between two arbitrary users.</para>
            </summary>
            <param name="target_screen_name">any one is required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The relationship.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.ShowAsync(System.Int64,System.Int64,System.Threading.CancellationToken)">
            <summary>
            <para>Returns detailed information about the relationship between two arbitrary users.</para>
            </summary>
            <param name="source_id">any one is required.</param>
            <param name="target_id">any one is required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The relationship.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.ShowAsync(System.Int64,System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Returns detailed information about the relationship between two arbitrary users.</para>
            </summary>
            <param name="source_id">any one is required.</param>
            <param name="target_screen_name">any one is required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The relationship.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.ShowAsync(System.String,System.Int64,System.Threading.CancellationToken)">
            <summary>
            <para>Returns detailed information about the relationship between two arbitrary users.</para>
            </summary>
            <param name="source_screen_name">any one is required.</param>
            <param name="target_id">any one is required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The relationship.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.ShowAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Returns detailed information about the relationship between two arbitrary users.</para>
            </summary>
            <param name="source_screen_name">any one is required.</param>
            <param name="target_screen_name">any one is required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The relationship.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.Create(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Allows the authenticating users to follow the user specified in the ID parameter.</para>
            <para>Returns the befriended user in the requested format when successful.</para>
            <para>Returns a string describing the failure condition when unsuccessful.</para>
            <para>Actions taken in this method are asynchronous and changes will be eventually consistent.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>bool</c> follow (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.Create(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Allows the authenticating users to follow the user specified in the ID parameter.</para>
            <para>Returns the befriended user in the requested format when successful.</para>
            <para>Returns a string describing the failure condition when unsuccessful.</para>
            <para>Actions taken in this method are asynchronous and changes will be eventually consistent.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>bool</c> follow (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.Create(System.Object)">
            <summary>
            <para>Allows the authenticating users to follow the user specified in the ID parameter.</para>
            <para>Returns the befriended user in the requested format when successful.</para>
            <para>Returns a string describing the failure condition when unsuccessful.</para>
            <para>Actions taken in this method are asynchronous and changes will be eventually consistent.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>bool</c> follow (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.Create(System.Int64,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Allows the authenticating users to follow the user specified in the ID parameter.</para>
            <para>Returns the befriended user in the requested format when successful.</para>
            <para>Returns a string describing the failure condition when unsuccessful.</para>
            <para>Actions taken in this method are asynchronous and changes will be eventually consistent.</para>
            </summary>
            <param name="user_id">any one is required.</param>
            <param name="follow">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.Create(System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Allows the authenticating users to follow the user specified in the ID parameter.</para>
            <para>Returns the befriended user in the requested format when successful.</para>
            <para>Returns a string describing the failure condition when unsuccessful.</para>
            <para>Actions taken in this method are asynchronous and changes will be eventually consistent.</para>
            </summary>
            <param name="screen_name">any one is required.</param>
            <param name="follow">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.CreateAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Allows the authenticating users to follow the user specified in the ID parameter.</para>
            <para>Returns the befriended user in the requested format when successful.</para>
            <para>Returns a string describing the failure condition when unsuccessful.</para>
            <para>Actions taken in this method are asynchronous and changes will be eventually consistent.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>bool</c> follow (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.CreateAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Allows the authenticating users to follow the user specified in the ID parameter.</para>
            <para>Returns the befriended user in the requested format when successful.</para>
            <para>Returns a string describing the failure condition when unsuccessful.</para>
            <para>Actions taken in this method are asynchronous and changes will be eventually consistent.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>bool</c> follow (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.CreateAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Allows the authenticating users to follow the user specified in the ID parameter.</para>
            <para>Returns the befriended user in the requested format when successful.</para>
            <para>Returns a string describing the failure condition when unsuccessful.</para>
            <para>Actions taken in this method are asynchronous and changes will be eventually consistent.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>bool</c> follow (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.CreateAsync(System.Int64,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Allows the authenticating users to follow the user specified in the ID parameter.</para>
            <para>Returns the befriended user in the requested format when successful.</para>
            <para>Returns a string describing the failure condition when unsuccessful.</para>
            <para>Actions taken in this method are asynchronous and changes will be eventually consistent.</para>
            </summary>
            <param name="user_id">any one is required.</param>
            <param name="follow">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.CreateAsync(System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Allows the authenticating users to follow the user specified in the ID parameter.</para>
            <para>Returns the befriended user in the requested format when successful.</para>
            <para>Returns a string describing the failure condition when unsuccessful.</para>
            <para>Actions taken in this method are asynchronous and changes will be eventually consistent.</para>
            </summary>
            <param name="screen_name">any one is required.</param>
            <param name="follow">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.Destroy(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Allows the authenticating user to unfollow the user specified in the ID parameter.</para>
            <para>Returns the unfollowed user in the requested format when successful.</para>
            <para>Returns a string describing the failure condition when unsuccessful.</para>
            <para>Actions taken in this method are asynchronous and changes will be eventually consistent.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.Destroy(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Allows the authenticating user to unfollow the user specified in the ID parameter.</para>
            <para>Returns the unfollowed user in the requested format when successful.</para>
            <para>Returns a string describing the failure condition when unsuccessful.</para>
            <para>Actions taken in this method are asynchronous and changes will be eventually consistent.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.Destroy(System.Object)">
            <summary>
            <para>Allows the authenticating user to unfollow the user specified in the ID parameter.</para>
            <para>Returns the unfollowed user in the requested format when successful.</para>
            <para>Returns a string describing the failure condition when unsuccessful.</para>
            <para>Actions taken in this method are asynchronous and changes will be eventually consistent.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.Destroy(System.Int64,System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Allows the authenticating user to unfollow the user specified in the ID parameter.</para>
            <para>Returns the unfollowed user in the requested format when successful.</para>
            <para>Returns a string describing the failure condition when unsuccessful.</para>
            <para>Actions taken in this method are asynchronous and changes will be eventually consistent.</para>
            </summary>
            <param name="user_id">any one is required.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.Destroy(System.String,System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Allows the authenticating user to unfollow the user specified in the ID parameter.</para>
            <para>Returns the unfollowed user in the requested format when successful.</para>
            <para>Returns a string describing the failure condition when unsuccessful.</para>
            <para>Actions taken in this method are asynchronous and changes will be eventually consistent.</para>
            </summary>
            <param name="screen_name">any one is required.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.DestroyAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Allows the authenticating user to unfollow the user specified in the ID parameter.</para>
            <para>Returns the unfollowed user in the requested format when successful.</para>
            <para>Returns a string describing the failure condition when unsuccessful.</para>
            <para>Actions taken in this method are asynchronous and changes will be eventually consistent.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.DestroyAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Allows the authenticating user to unfollow the user specified in the ID parameter.</para>
            <para>Returns the unfollowed user in the requested format when successful.</para>
            <para>Returns a string describing the failure condition when unsuccessful.</para>
            <para>Actions taken in this method are asynchronous and changes will be eventually consistent.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.DestroyAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Allows the authenticating user to unfollow the user specified in the ID parameter.</para>
            <para>Returns the unfollowed user in the requested format when successful.</para>
            <para>Returns a string describing the failure condition when unsuccessful.</para>
            <para>Actions taken in this method are asynchronous and changes will be eventually consistent.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.DestroyAsync(System.Int64,System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Allows the authenticating user to unfollow the user specified in the ID parameter.</para>
            <para>Returns the unfollowed user in the requested format when successful.</para>
            <para>Returns a string describing the failure condition when unsuccessful.</para>
            <para>Actions taken in this method are asynchronous and changes will be eventually consistent.</para>
            </summary>
            <param name="user_id">any one is required.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.DestroyAsync(System.String,System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Allows the authenticating user to unfollow the user specified in the ID parameter.</para>
            <para>Returns the unfollowed user in the requested format when successful.</para>
            <para>Returns a string describing the failure condition when unsuccessful.</para>
            <para>Actions taken in this method are asynchronous and changes will be eventually consistent.</para>
            </summary>
            <param name="screen_name">any one is required.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.Update(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Allows one to enable or disable retweets and device notifications from the specified user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>bool</c> device (optional)</para>
            <para>- <c>bool</c> retweets (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The relationship.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.Update(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Allows one to enable or disable retweets and device notifications from the specified user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>bool</c> device (optional)</para>
            <para>- <c>bool</c> retweets (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The relationship.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.Update(System.Object)">
            <summary>
            <para>Allows one to enable or disable retweets and device notifications from the specified user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>bool</c> device (optional)</para>
            <para>- <c>bool</c> retweets (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The relationship.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.Update(System.Int64,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            <para>Allows one to enable or disable retweets and device notifications from the specified user.</para>
            </summary>
            <param name="user_id">any one is required.</param>
            <param name="device">optional.</param>
            <param name="retweets">optional.</param>
            <returns>The relationship.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.Update(System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            <para>Allows one to enable or disable retweets and device notifications from the specified user.</para>
            </summary>
            <param name="screen_name">any one is required.</param>
            <param name="device">optional.</param>
            <param name="retweets">optional.</param>
            <returns>The relationship.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.UpdateAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Allows one to enable or disable retweets and device notifications from the specified user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>bool</c> device (optional)</para>
            <para>- <c>bool</c> retweets (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The relationship.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.UpdateAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Allows one to enable or disable retweets and device notifications from the specified user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>bool</c> device (optional)</para>
            <para>- <c>bool</c> retweets (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The relationship.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.UpdateAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Allows one to enable or disable retweets and device notifications from the specified user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>bool</c> device (optional)</para>
            <para>- <c>bool</c> retweets (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The relationship.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.UpdateAsync(System.Int64,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            <para>Allows one to enable or disable retweets and device notifications from the specified user.</para>
            </summary>
            <param name="user_id">any one is required.</param>
            <param name="device">optional.</param>
            <param name="retweets">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The relationship.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Friendships.UpdateAsync(System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            <para>Allows one to enable or disable retweets and device notifications from the specified user.</para>
            </summary>
            <param name="screen_name">any one is required.</param>
            <param name="device">optional.</param>
            <param name="retweets">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The relationship.</returns>
        </member>
        <member name="T:CoreTweet.Rest.Geo">
            <summary>
            Provides a set of methods for the wrapper of GET/POST geo.
            </summary>
        </member>
        <member name="M:CoreTweet.Rest.Geo.Id(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns all the information about a known place.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> place_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The place.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Geo.Id(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns all the information about a known place.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> place_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The place.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Geo.Id(System.Object)">
            <summary>
            <para>Returns all the information about a known place.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> place_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The place.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Geo.Id(System.String)">
            <summary>
            <para>Returns all the information about a known place.</para>
            </summary>
            <param name="place_id">required.</param>
            <returns>The place.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Geo.IdAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns all the information about a known place.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> place_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The place.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Geo.IdAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns all the information about a known place.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> place_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The place.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Geo.IdAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns all the information about a known place.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> place_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The place.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Geo.IdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Returns all the information about a known place.</para>
            </summary>
            <param name="place_id">required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The place.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Geo.SimilarPlaces(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Locates places near the given coordinates which are similar in name.</para>
            <para>Available parameters:</para>
            <para>- <c>double</c> lat (required)</para>
            <para>- <c>double</c> long (required)</para>
            <para>- <c>string</c> name (required)</para>
            <para>- <c>string</c> contained_within (optional)</para>
            <para>- <c>string</c> street_address (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>Places and the token</returns>
        </member>
        <member name="M:CoreTweet.Rest.Geo.SimilarPlaces(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Locates places near the given coordinates which are similar in name.</para>
            <para>Available parameters:</para>
            <para>- <c>double</c> lat (required)</para>
            <para>- <c>double</c> long (required)</para>
            <para>- <c>string</c> name (required)</para>
            <para>- <c>string</c> contained_within (optional)</para>
            <para>- <c>string</c> street_address (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>Places and the token</returns>
        </member>
        <member name="M:CoreTweet.Rest.Geo.SimilarPlaces(System.Object)">
            <summary>
            <para>Locates places near the given coordinates which are similar in name.</para>
            <para>Available parameters:</para>
            <para>- <c>double</c> lat (required)</para>
            <para>- <c>double</c> long (required)</para>
            <para>- <c>string</c> name (required)</para>
            <para>- <c>string</c> contained_within (optional)</para>
            <para>- <c>string</c> street_address (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>Places and the token</returns>
        </member>
        <member name="M:CoreTweet.Rest.Geo.SimilarPlaces(System.Double,System.Double,System.String,System.String,System.String)">
            <summary>
            <para>Locates places near the given coordinates which are similar in name.</para>
            </summary>
            <param name="lat">required.</param>
            <param name="long">required.</param>
            <param name="name">required.</param>
            <param name="contained_within">optional.</param>
            <param name="street_address">optional.</param>
            <returns>Places and the token</returns>
        </member>
        <member name="M:CoreTweet.Rest.Geo.SimilarPlacesAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Locates places near the given coordinates which are similar in name.</para>
            <para>Available parameters:</para>
            <para>- <c>double</c> lat (required)</para>
            <para>- <c>double</c> long (required)</para>
            <para>- <c>string</c> name (required)</para>
            <para>- <c>string</c> contained_within (optional)</para>
            <para>- <c>string</c> street_address (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>Places and the token</returns>
        </member>
        <member name="M:CoreTweet.Rest.Geo.SimilarPlacesAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Locates places near the given coordinates which are similar in name.</para>
            <para>Available parameters:</para>
            <para>- <c>double</c> lat (required)</para>
            <para>- <c>double</c> long (required)</para>
            <para>- <c>string</c> name (required)</para>
            <para>- <c>string</c> contained_within (optional)</para>
            <para>- <c>string</c> street_address (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Places and the token</returns>
        </member>
        <member name="M:CoreTweet.Rest.Geo.SimilarPlacesAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Locates places near the given coordinates which are similar in name.</para>
            <para>Available parameters:</para>
            <para>- <c>double</c> lat (required)</para>
            <para>- <c>double</c> long (required)</para>
            <para>- <c>string</c> name (required)</para>
            <para>- <c>string</c> contained_within (optional)</para>
            <para>- <c>string</c> street_address (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Places and the token</returns>
        </member>
        <member name="M:CoreTweet.Rest.Geo.SimilarPlacesAsync(System.Double,System.Double,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Locates places near the given coordinates which are similar in name.</para>
            </summary>
            <param name="lat">required.</param>
            <param name="long">required.</param>
            <param name="name">required.</param>
            <param name="contained_within">optional.</param>
            <param name="street_address">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Places and the token</returns>
        </member>
        <member name="M:CoreTweet.Rest.Geo.Search(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Search for places that can be attached to a statuses/update.</para>
            <para>Note: At least one of the following parameters must be provided to this resource: lat, long, ip, or query</para>
            <para>Available parameters:</para>
            <para>- <c>double</c> lat (optional)</para>
            <para>- <c>double</c> long (optional)</para>
            <para>- <c>string</c> query (optional)</para>
            <para>- <c>string</c> ip (optional)</para>
            <para>- <c>string</c> granularity (optional)</para>
            <para>- <c>string</c> accuracy (optional)</para>
            <para>- <c>int</c> max_results (optional)</para>
            <para>- <c>string</c> contained_within (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>Places.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Geo.Search(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Search for places that can be attached to a statuses/update.</para>
            <para>Note: At least one of the following parameters must be provided to this resource: lat, long, ip, or query</para>
            <para>Available parameters:</para>
            <para>- <c>double</c> lat (optional)</para>
            <para>- <c>double</c> long (optional)</para>
            <para>- <c>string</c> query (optional)</para>
            <para>- <c>string</c> ip (optional)</para>
            <para>- <c>string</c> granularity (optional)</para>
            <para>- <c>string</c> accuracy (optional)</para>
            <para>- <c>int</c> max_results (optional)</para>
            <para>- <c>string</c> contained_within (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>Places.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Geo.Search(System.Object)">
            <summary>
            <para>Search for places that can be attached to a statuses/update.</para>
            <para>Note: At least one of the following parameters must be provided to this resource: lat, long, ip, or query</para>
            <para>Available parameters:</para>
            <para>- <c>double</c> lat (optional)</para>
            <para>- <c>double</c> long (optional)</para>
            <para>- <c>string</c> query (optional)</para>
            <para>- <c>string</c> ip (optional)</para>
            <para>- <c>string</c> granularity (optional)</para>
            <para>- <c>string</c> accuracy (optional)</para>
            <para>- <c>int</c> max_results (optional)</para>
            <para>- <c>string</c> contained_within (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>Places.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Geo.Search(System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            <para>Search for places that can be attached to a statuses/update.</para>
            <para>Note: At least one of the following parameters must be provided to this resource: lat, long, ip, or query</para>
            </summary>
            <param name="lat">optional.</param>
            <param name="long">optional.</param>
            <param name="query">optional.</param>
            <param name="ip">optional.</param>
            <param name="granularity">optional.</param>
            <param name="accuracy">optional.</param>
            <param name="max_results">optional.</param>
            <param name="contained_within">optional.</param>
            <returns>Places.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Geo.SearchAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Search for places that can be attached to a statuses/update.</para>
            <para>Note: At least one of the following parameters must be provided to this resource: lat, long, ip, or query</para>
            <para>Available parameters:</para>
            <para>- <c>double</c> lat (optional)</para>
            <para>- <c>double</c> long (optional)</para>
            <para>- <c>string</c> query (optional)</para>
            <para>- <c>string</c> ip (optional)</para>
            <para>- <c>string</c> granularity (optional)</para>
            <para>- <c>string</c> accuracy (optional)</para>
            <para>- <c>int</c> max_results (optional)</para>
            <para>- <c>string</c> contained_within (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>Places.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Geo.SearchAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Search for places that can be attached to a statuses/update.</para>
            <para>Note: At least one of the following parameters must be provided to this resource: lat, long, ip, or query</para>
            <para>Available parameters:</para>
            <para>- <c>double</c> lat (optional)</para>
            <para>- <c>double</c> long (optional)</para>
            <para>- <c>string</c> query (optional)</para>
            <para>- <c>string</c> ip (optional)</para>
            <para>- <c>string</c> granularity (optional)</para>
            <para>- <c>string</c> accuracy (optional)</para>
            <para>- <c>int</c> max_results (optional)</para>
            <para>- <c>string</c> contained_within (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Places.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Geo.SearchAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Search for places that can be attached to a statuses/update.</para>
            <para>Note: At least one of the following parameters must be provided to this resource: lat, long, ip, or query</para>
            <para>Available parameters:</para>
            <para>- <c>double</c> lat (optional)</para>
            <para>- <c>double</c> long (optional)</para>
            <para>- <c>string</c> query (optional)</para>
            <para>- <c>string</c> ip (optional)</para>
            <para>- <c>string</c> granularity (optional)</para>
            <para>- <c>string</c> accuracy (optional)</para>
            <para>- <c>int</c> max_results (optional)</para>
            <para>- <c>string</c> contained_within (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Places.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Geo.SearchAsync(System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Search for places that can be attached to a statuses/update.</para>
            <para>Note: At least one of the following parameters must be provided to this resource: lat, long, ip, or query</para>
            </summary>
            <param name="lat">optional.</param>
            <param name="long">optional.</param>
            <param name="query">optional.</param>
            <param name="ip">optional.</param>
            <param name="granularity">optional.</param>
            <param name="accuracy">optional.</param>
            <param name="max_results">optional.</param>
            <param name="contained_within">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Places.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Geo.ReverseGeocode(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Given a latitude and a longitude, searches for up to 20 places that can be used as a place_id when updating a status.</para>
            <para>This request is an informative call and will deliver generalized results about geography.</para>
            <para>Available parameters:</para>
            <para>- <c>double</c> lat (required)</para>
            <para>- <c>double</c> long (required)</para>
            <para>- <c>string</c> accuracy (optional)</para>
            <para>- <c>string</c> granularity (optional)</para>
            <para>- <c>int</c> max_results (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>Places.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Geo.ReverseGeocode(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Given a latitude and a longitude, searches for up to 20 places that can be used as a place_id when updating a status.</para>
            <para>This request is an informative call and will deliver generalized results about geography.</para>
            <para>Available parameters:</para>
            <para>- <c>double</c> lat (required)</para>
            <para>- <c>double</c> long (required)</para>
            <para>- <c>string</c> accuracy (optional)</para>
            <para>- <c>string</c> granularity (optional)</para>
            <para>- <c>int</c> max_results (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>Places.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Geo.ReverseGeocode(System.Object)">
            <summary>
            <para>Given a latitude and a longitude, searches for up to 20 places that can be used as a place_id when updating a status.</para>
            <para>This request is an informative call and will deliver generalized results about geography.</para>
            <para>Available parameters:</para>
            <para>- <c>double</c> lat (required)</para>
            <para>- <c>double</c> long (required)</para>
            <para>- <c>string</c> accuracy (optional)</para>
            <para>- <c>string</c> granularity (optional)</para>
            <para>- <c>int</c> max_results (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>Places.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Geo.ReverseGeocode(System.Double,System.Double,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            <para>Given a latitude and a longitude, searches for up to 20 places that can be used as a place_id when updating a status.</para>
            <para>This request is an informative call and will deliver generalized results about geography.</para>
            </summary>
            <param name="lat">required.</param>
            <param name="long">required.</param>
            <param name="accuracy">optional.</param>
            <param name="granularity">optional.</param>
            <param name="max_results">optional.</param>
            <returns>Places.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Geo.ReverseGeocodeAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Given a latitude and a longitude, searches for up to 20 places that can be used as a place_id when updating a status.</para>
            <para>This request is an informative call and will deliver generalized results about geography.</para>
            <para>Available parameters:</para>
            <para>- <c>double</c> lat (required)</para>
            <para>- <c>double</c> long (required)</para>
            <para>- <c>string</c> accuracy (optional)</para>
            <para>- <c>string</c> granularity (optional)</para>
            <para>- <c>int</c> max_results (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>Places.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Geo.ReverseGeocodeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Given a latitude and a longitude, searches for up to 20 places that can be used as a place_id when updating a status.</para>
            <para>This request is an informative call and will deliver generalized results about geography.</para>
            <para>Available parameters:</para>
            <para>- <c>double</c> lat (required)</para>
            <para>- <c>double</c> long (required)</para>
            <para>- <c>string</c> accuracy (optional)</para>
            <para>- <c>string</c> granularity (optional)</para>
            <para>- <c>int</c> max_results (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Places.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Geo.ReverseGeocodeAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Given a latitude and a longitude, searches for up to 20 places that can be used as a place_id when updating a status.</para>
            <para>This request is an informative call and will deliver generalized results about geography.</para>
            <para>Available parameters:</para>
            <para>- <c>double</c> lat (required)</para>
            <para>- <c>double</c> long (required)</para>
            <para>- <c>string</c> accuracy (optional)</para>
            <para>- <c>string</c> granularity (optional)</para>
            <para>- <c>int</c> max_results (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Places.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Geo.ReverseGeocodeAsync(System.Double,System.Double,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            <para>Given a latitude and a longitude, searches for up to 20 places that can be used as a place_id when updating a status.</para>
            <para>This request is an informative call and will deliver generalized results about geography.</para>
            </summary>
            <param name="lat">required.</param>
            <param name="long">required.</param>
            <param name="accuracy">optional.</param>
            <param name="granularity">optional.</param>
            <param name="max_results">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Places.</returns>
        </member>
        <member name="T:CoreTweet.Rest.Help">
            <summary>
            Provides a set of methods for the wrapper of GET help.
            </summary>
        </member>
        <member name="M:CoreTweet.Rest.Help.Configuration(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the current configuration used by Twitter including twitter.com slugs which are not usernames, maximum photo resolutions, and t.co URL lengths.</para>
            <para>Available parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>Configurations.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.Configuration(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns the current configuration used by Twitter including twitter.com slugs which are not usernames, maximum photo resolutions, and t.co URL lengths.</para>
            <para>Available parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>Configurations.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.Configuration(System.Object)">
            <summary>
            <para>Returns the current configuration used by Twitter including twitter.com slugs which are not usernames, maximum photo resolutions, and t.co URL lengths.</para>
            <para>Available parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>Configurations.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.Configuration">
            <summary>
            <para>Returns the current configuration used by Twitter including twitter.com slugs which are not usernames, maximum photo resolutions, and t.co URL lengths.</para>
            </summary>
            <returns>Configurations.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.ConfigurationAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the current configuration used by Twitter including twitter.com slugs which are not usernames, maximum photo resolutions, and t.co URL lengths.</para>
            <para>Available parameters:</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>Configurations.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.ConfigurationAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns the current configuration used by Twitter including twitter.com slugs which are not usernames, maximum photo resolutions, and t.co URL lengths.</para>
            <para>Available parameters:</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Configurations.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.ConfigurationAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns the current configuration used by Twitter including twitter.com slugs which are not usernames, maximum photo resolutions, and t.co URL lengths.</para>
            <para>Available parameters:</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Configurations.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.ConfigurationAsync(System.Threading.CancellationToken)">
            <summary>
            <para>Returns the current configuration used by Twitter including twitter.com slugs which are not usernames, maximum photo resolutions, and t.co URL lengths.</para>
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Configurations.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.Languages(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the list of languages supported by Twitter along with the language code supported by Twitter.</para>
            <para>Available parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>Languages.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.Languages(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns the list of languages supported by Twitter along with the language code supported by Twitter.</para>
            <para>Available parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>Languages.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.Languages(System.Object)">
            <summary>
            <para>Returns the list of languages supported by Twitter along with the language code supported by Twitter.</para>
            <para>Available parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>Languages.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.Languages">
            <summary>
            <para>Returns the list of languages supported by Twitter along with the language code supported by Twitter.</para>
            </summary>
            <returns>Languages.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.LanguagesAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the list of languages supported by Twitter along with the language code supported by Twitter.</para>
            <para>Available parameters:</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>Languages.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.LanguagesAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns the list of languages supported by Twitter along with the language code supported by Twitter.</para>
            <para>Available parameters:</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Languages.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.LanguagesAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns the list of languages supported by Twitter along with the language code supported by Twitter.</para>
            <para>Available parameters:</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Languages.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.LanguagesAsync(System.Threading.CancellationToken)">
            <summary>
            <para>Returns the list of languages supported by Twitter along with the language code supported by Twitter.</para>
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Languages.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.Privacy(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns Twitter’s Privacy Policy.</para>
            <para>Available parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The sentense.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.Privacy(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns Twitter’s Privacy Policy.</para>
            <para>Available parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The sentense.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.Privacy(System.Object)">
            <summary>
            <para>Returns Twitter’s Privacy Policy.</para>
            <para>Available parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The sentense.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.Privacy">
            <summary>
            <para>Returns Twitter’s Privacy Policy.</para>
            </summary>
            <returns>The sentense.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.PrivacyAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns Twitter’s Privacy Policy.</para>
            <para>Available parameters:</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The sentense.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.PrivacyAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns Twitter’s Privacy Policy.</para>
            <para>Available parameters:</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The sentense.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.PrivacyAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns Twitter’s Privacy Policy.</para>
            <para>Available parameters:</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The sentense.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.PrivacyAsync(System.Threading.CancellationToken)">
            <summary>
            <para>Returns Twitter’s Privacy Policy.</para>
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The sentense.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.Tos(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the Twitter Terms of Service.</para>
            <para>Available parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The sentense.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.Tos(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns the Twitter Terms of Service.</para>
            <para>Available parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The sentense.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.Tos(System.Object)">
            <summary>
            <para>Returns the Twitter Terms of Service.</para>
            <para>Available parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The sentense.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.Tos">
            <summary>
            <para>Returns the Twitter Terms of Service.</para>
            </summary>
            <returns>The sentense.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.TosAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the Twitter Terms of Service.</para>
            <para>Available parameters:</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The sentense.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.TosAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns the Twitter Terms of Service.</para>
            <para>Available parameters:</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The sentense.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.TosAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns the Twitter Terms of Service.</para>
            <para>Available parameters:</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The sentense.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.TosAsync(System.Threading.CancellationToken)">
            <summary>
            <para>Returns the Twitter Terms of Service.</para>
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The sentense.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.RateLimitStatus(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the current rate limits for methods belonging to the specified resource families.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> resources (any one is required)</para>
            <para>- <c>IEnumerable&lt;string&gt;</c> resources (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.RateLimitStatus(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns the current rate limits for methods belonging to the specified resource families.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> resources (any one is required)</para>
            <para>- <c>IEnumerable&lt;string&gt;</c> resources (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.RateLimitStatus(System.Object)">
            <summary>
            <para>Returns the current rate limits for methods belonging to the specified resource families.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> resources (any one is required)</para>
            <para>- <c>IEnumerable&lt;string&gt;</c> resources (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.RateLimitStatus">
            <summary>
            <para>Returns the current rate limits for methods belonging to the specified resource families.</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.RateLimitStatus(System.String)">
            <summary>
            <para>Returns the current rate limits for methods belonging to the specified resource families.</para>
            </summary>
            <param name="resources">any one is required.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.RateLimitStatus(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            <para>Returns the current rate limits for methods belonging to the specified resource families.</para>
            </summary>
            <param name="resources">any one is required.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.RateLimitStatusAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the current rate limits for methods belonging to the specified resource families.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> resources (any one is required)</para>
            <para>- <c>IEnumerable&lt;string&gt;</c> resources (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.RateLimitStatusAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns the current rate limits for methods belonging to the specified resource families.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> resources (any one is required)</para>
            <para>- <c>IEnumerable&lt;string&gt;</c> resources (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.RateLimitStatusAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns the current rate limits for methods belonging to the specified resource families.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> resources (any one is required)</para>
            <para>- <c>IEnumerable&lt;string&gt;</c> resources (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.RateLimitStatusAsync(System.Threading.CancellationToken)">
            <summary>
            <para>Returns the current rate limits for methods belonging to the specified resource families.</para>
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.RateLimitStatusAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Returns the current rate limits for methods belonging to the specified resource families.</para>
            </summary>
            <param name="resources">any one is required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.Help.RateLimitStatusAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            <para>Returns the current rate limits for methods belonging to the specified resource families.</para>
            </summary>
            <param name="resources">any one is required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="T:CoreTweet.Rest.Lists">
            <summary>
            Provides a set of methods for the wrapper of GET/POST lists.
            </summary>
        </member>
        <member name="M:CoreTweet.Rest.Lists.List(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns all lists the authenticating or specified user subscribes to, including their own.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>bool</c> reverse (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.List(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns all lists the authenticating or specified user subscribes to, including their own.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>bool</c> reverse (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.List(System.Object)">
            <summary>
            <para>Returns all lists the authenticating or specified user subscribes to, including their own.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>bool</c> reverse (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.List(System.Nullable{System.Boolean})">
            <summary>
            <para>Returns all lists the authenticating or specified user subscribes to, including their own.</para>
            </summary>
            <param name="reverse">optional.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.List(System.Int64,System.Nullable{System.Boolean})">
            <summary>
            <para>Returns all lists the authenticating or specified user subscribes to, including their own.</para>
            </summary>
            <param name="user_id">any one is required.</param>
            <param name="reverse">optional.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.List(System.String,System.Nullable{System.Boolean})">
            <summary>
            <para>Returns all lists the authenticating or specified user subscribes to, including their own.</para>
            </summary>
            <param name="screen_name">any one is required.</param>
            <param name="reverse">optional.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.ListAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns all lists the authenticating or specified user subscribes to, including their own.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>bool</c> reverse (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.ListAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns all lists the authenticating or specified user subscribes to, including their own.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>bool</c> reverse (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.ListAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns all lists the authenticating or specified user subscribes to, including their own.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>bool</c> reverse (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.ListAsync(System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            <para>Returns all lists the authenticating or specified user subscribes to, including their own.</para>
            </summary>
            <param name="reverse">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.ListAsync(System.Int64,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            <para>Returns all lists the authenticating or specified user subscribes to, including their own.</para>
            </summary>
            <param name="user_id">any one is required.</param>
            <param name="reverse">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.ListAsync(System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            <para>Returns all lists the authenticating or specified user subscribes to, including their own.</para>
            </summary>
            <param name="screen_name">any one is required.</param>
            <param name="reverse">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Memberships(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the lists the specified user has been added to.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> cursor (optional)</para>
            <para>- <c>bool</c> filter_to_owned_lists (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Memberships(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns the lists the specified user has been added to.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> cursor (optional)</para>
            <para>- <c>bool</c> filter_to_owned_lists (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Memberships(System.Object)">
            <summary>
            <para>Returns the lists the specified user has been added to.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> cursor (optional)</para>
            <para>- <c>bool</c> filter_to_owned_lists (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.EnumerateMemberships(CoreTweet.EnumerateMode,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Boolean})">
            <summary>
            <para>Returns the lists the specified user has been added to.</para>
            </summary>
            <param name="count">optional.</param>
            <param name="cursor">optional.</param>
            <param name="filter_to_owned_lists">optional.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Memberships(System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Boolean})">
            <summary>
            <para>Returns the lists the specified user has been added to.</para>
            </summary>
            <param name="count">optional.</param>
            <param name="cursor">optional.</param>
            <param name="filter_to_owned_lists">optional.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.EnumerateMemberships(CoreTweet.EnumerateMode,System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Boolean})">
            <summary>
            <para>Returns the lists the specified user has been added to.</para>
            </summary>
            <param name="user_id">any one is required.</param>
            <param name="count">optional.</param>
            <param name="cursor">optional.</param>
            <param name="filter_to_owned_lists">optional.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Memberships(System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Boolean})">
            <summary>
            <para>Returns the lists the specified user has been added to.</para>
            </summary>
            <param name="user_id">any one is required.</param>
            <param name="count">optional.</param>
            <param name="cursor">optional.</param>
            <param name="filter_to_owned_lists">optional.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.EnumerateMemberships(CoreTweet.EnumerateMode,System.String,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Boolean})">
            <summary>
            <para>Returns the lists the specified user has been added to.</para>
            </summary>
            <param name="screen_name">any one is required.</param>
            <param name="count">optional.</param>
            <param name="cursor">optional.</param>
            <param name="filter_to_owned_lists">optional.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Memberships(System.String,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Boolean})">
            <summary>
            <para>Returns the lists the specified user has been added to.</para>
            </summary>
            <param name="screen_name">any one is required.</param>
            <param name="count">optional.</param>
            <param name="cursor">optional.</param>
            <param name="filter_to_owned_lists">optional.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.EnumerateMemberships(CoreTweet.EnumerateMode,System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the lists the specified user has been added to.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> cursor (optional)</para>
            <para>- <c>bool</c> filter_to_owned_lists (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.EnumerateMemberships(CoreTweet.EnumerateMode,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns the lists the specified user has been added to.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> cursor (optional)</para>
            <para>- <c>bool</c> filter_to_owned_lists (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.EnumerateMemberships(CoreTweet.EnumerateMode,System.Object)">
            <summary>
            <para>Returns the lists the specified user has been added to.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> cursor (optional)</para>
            <para>- <c>bool</c> filter_to_owned_lists (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.MembershipsAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the lists the specified user has been added to.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> cursor (optional)</para>
            <para>- <c>bool</c> filter_to_owned_lists (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.MembershipsAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns the lists the specified user has been added to.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> cursor (optional)</para>
            <para>- <c>bool</c> filter_to_owned_lists (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.MembershipsAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns the lists the specified user has been added to.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> cursor (optional)</para>
            <para>- <c>bool</c> filter_to_owned_lists (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.MembershipsAsync(System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            <para>Returns the lists the specified user has been added to.</para>
            </summary>
            <param name="count">optional.</param>
            <param name="cursor">optional.</param>
            <param name="filter_to_owned_lists">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.MembershipsAsync(System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            <para>Returns the lists the specified user has been added to.</para>
            </summary>
            <param name="user_id">any one is required.</param>
            <param name="count">optional.</param>
            <param name="cursor">optional.</param>
            <param name="filter_to_owned_lists">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.MembershipsAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            <para>Returns the lists the specified user has been added to.</para>
            </summary>
            <param name="screen_name">any one is required.</param>
            <param name="count">optional.</param>
            <param name="cursor">optional.</param>
            <param name="filter_to_owned_lists">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Ownerships(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the lists owned by the specified Twitter user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Ownerships(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns the lists owned by the specified Twitter user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Ownerships(System.Object)">
            <summary>
            <para>Returns the lists owned by the specified Twitter user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.EnumerateOwnerships(CoreTweet.EnumerateMode,System.Nullable{System.Int32},System.Nullable{System.Int64})">
            <summary>
            <para>Returns the lists owned by the specified Twitter user.</para>
            </summary>
            <param name="count">optional.</param>
            <param name="cursor">optional.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Ownerships(System.Nullable{System.Int32},System.Nullable{System.Int64})">
            <summary>
            <para>Returns the lists owned by the specified Twitter user.</para>
            </summary>
            <param name="count">optional.</param>
            <param name="cursor">optional.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.EnumerateOwnerships(CoreTweet.EnumerateMode,System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int64})">
            <summary>
            <para>Returns the lists owned by the specified Twitter user.</para>
            </summary>
            <param name="user_id">any one is required.</param>
            <param name="count">optional.</param>
            <param name="cursor">optional.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Ownerships(System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int64})">
            <summary>
            <para>Returns the lists owned by the specified Twitter user.</para>
            </summary>
            <param name="user_id">any one is required.</param>
            <param name="count">optional.</param>
            <param name="cursor">optional.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.EnumerateOwnerships(CoreTweet.EnumerateMode,System.String,System.Nullable{System.Int32},System.Nullable{System.Int64})">
            <summary>
            <para>Returns the lists owned by the specified Twitter user.</para>
            </summary>
            <param name="screen_name">any one is required.</param>
            <param name="count">optional.</param>
            <param name="cursor">optional.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Ownerships(System.String,System.Nullable{System.Int32},System.Nullable{System.Int64})">
            <summary>
            <para>Returns the lists owned by the specified Twitter user.</para>
            </summary>
            <param name="screen_name">any one is required.</param>
            <param name="count">optional.</param>
            <param name="cursor">optional.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.EnumerateOwnerships(CoreTweet.EnumerateMode,System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the lists owned by the specified Twitter user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.EnumerateOwnerships(CoreTweet.EnumerateMode,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns the lists owned by the specified Twitter user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.EnumerateOwnerships(CoreTweet.EnumerateMode,System.Object)">
            <summary>
            <para>Returns the lists owned by the specified Twitter user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.OwnershipsAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the lists owned by the specified Twitter user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.OwnershipsAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns the lists owned by the specified Twitter user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.OwnershipsAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns the lists owned by the specified Twitter user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.OwnershipsAsync(System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            <para>Returns the lists owned by the specified Twitter user.</para>
            </summary>
            <param name="count">optional.</param>
            <param name="cursor">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.OwnershipsAsync(System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            <para>Returns the lists owned by the specified Twitter user.</para>
            </summary>
            <param name="user_id">any one is required.</param>
            <param name="count">optional.</param>
            <param name="cursor">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.OwnershipsAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            <para>Returns the lists owned by the specified Twitter user.</para>
            </summary>
            <param name="screen_name">any one is required.</param>
            <param name="count">optional.</param>
            <param name="cursor">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Show(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the specified list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Show(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns the specified list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Show(System.Object)">
            <summary>
            <para>Returns the specified list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Show(System.Int64)">
            <summary>
            <para>Returns the specified list.</para>
            </summary>
            <param name="list_id">any one is required.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Show(System.String,System.String)">
            <summary>
            <para>Returns the specified list.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_screen_name">any one is required.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Show(System.String,System.Int64)">
            <summary>
            <para>Returns the specified list.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_id">any one is required.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.ShowAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the specified list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.ShowAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns the specified list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.ShowAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns the specified list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.ShowAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            <para>Returns the specified list.</para>
            </summary>
            <param name="list_id">any one is required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.ShowAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Returns the specified list.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_screen_name">any one is required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.ShowAsync(System.String,System.Int64,System.Threading.CancellationToken)">
            <summary>
            <para>Returns the specified list.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_id">any one is required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Subscriptions(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Obtain a collection of the lists the specified user is subscribed to.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Subscriptions(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Obtain a collection of the lists the specified user is subscribed to.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Subscriptions(System.Object)">
            <summary>
            <para>Obtain a collection of the lists the specified user is subscribed to.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.EnumerateSubscriptions(CoreTweet.EnumerateMode,System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int64})">
            <summary>
            <para>Obtain a collection of the lists the specified user is subscribed to.</para>
            </summary>
            <param name="user_id">any one is required.</param>
            <param name="count">optional.</param>
            <param name="cursor">optional.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Subscriptions(System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int64})">
            <summary>
            <para>Obtain a collection of the lists the specified user is subscribed to.</para>
            </summary>
            <param name="user_id">any one is required.</param>
            <param name="count">optional.</param>
            <param name="cursor">optional.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.EnumerateSubscriptions(CoreTweet.EnumerateMode,System.String,System.Nullable{System.Int32},System.Nullable{System.Int64})">
            <summary>
            <para>Obtain a collection of the lists the specified user is subscribed to.</para>
            </summary>
            <param name="screen_name">any one is required.</param>
            <param name="count">optional.</param>
            <param name="cursor">optional.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Subscriptions(System.String,System.Nullable{System.Int32},System.Nullable{System.Int64})">
            <summary>
            <para>Obtain a collection of the lists the specified user is subscribed to.</para>
            </summary>
            <param name="screen_name">any one is required.</param>
            <param name="count">optional.</param>
            <param name="cursor">optional.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.EnumerateSubscriptions(CoreTweet.EnumerateMode,System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Obtain a collection of the lists the specified user is subscribed to.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.EnumerateSubscriptions(CoreTweet.EnumerateMode,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Obtain a collection of the lists the specified user is subscribed to.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.EnumerateSubscriptions(CoreTweet.EnumerateMode,System.Object)">
            <summary>
            <para>Obtain a collection of the lists the specified user is subscribed to.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.SubscriptionsAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Obtain a collection of the lists the specified user is subscribed to.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.SubscriptionsAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Obtain a collection of the lists the specified user is subscribed to.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.SubscriptionsAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Obtain a collection of the lists the specified user is subscribed to.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.SubscriptionsAsync(System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            <para>Obtain a collection of the lists the specified user is subscribed to.</para>
            </summary>
            <param name="user_id">any one is required.</param>
            <param name="count">optional.</param>
            <param name="cursor">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.SubscriptionsAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            <para>Obtain a collection of the lists the specified user is subscribed to.</para>
            </summary>
            <param name="screen_name">any one is required.</param>
            <param name="count">optional.</param>
            <param name="cursor">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The lists.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Statuses(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a timeline of tweets authored by members of the specified list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            <para>- <c>long</c> since_id (optional)</para>
            <para>- <c>long</c> max_id (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_rts (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Statuses(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns a timeline of tweets authored by members of the specified list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            <para>- <c>long</c> since_id (optional)</para>
            <para>- <c>long</c> max_id (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_rts (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Statuses(System.Object)">
            <summary>
            <para>Returns a timeline of tweets authored by members of the specified list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            <para>- <c>long</c> since_id (optional)</para>
            <para>- <c>long</c> max_id (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_rts (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Statuses(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Returns a timeline of tweets authored by members of the specified list.</para>
            </summary>
            <param name="list_id">any one is required.</param>
            <param name="since_id">optional.</param>
            <param name="max_id">optional.</param>
            <param name="count">optional.</param>
            <param name="include_entities">optional.</param>
            <param name="include_rts">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Statuses(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Returns a timeline of tweets authored by members of the specified list.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_screen_name">any one is required.</param>
            <param name="since_id">optional.</param>
            <param name="max_id">optional.</param>
            <param name="count">optional.</param>
            <param name="include_entities">optional.</param>
            <param name="include_rts">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Statuses(System.String,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Returns a timeline of tweets authored by members of the specified list.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_id">any one is required.</param>
            <param name="since_id">optional.</param>
            <param name="max_id">optional.</param>
            <param name="count">optional.</param>
            <param name="include_entities">optional.</param>
            <param name="include_rts">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.StatusesAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a timeline of tweets authored by members of the specified list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            <para>- <c>long</c> since_id (optional)</para>
            <para>- <c>long</c> max_id (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_rts (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.StatusesAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a timeline of tweets authored by members of the specified list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            <para>- <c>long</c> since_id (optional)</para>
            <para>- <c>long</c> max_id (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_rts (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.StatusesAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns a timeline of tweets authored by members of the specified list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            <para>- <c>long</c> since_id (optional)</para>
            <para>- <c>long</c> max_id (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_rts (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.StatusesAsync(System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a timeline of tweets authored by members of the specified list.</para>
            </summary>
            <param name="list_id">any one is required.</param>
            <param name="since_id">optional.</param>
            <param name="max_id">optional.</param>
            <param name="count">optional.</param>
            <param name="include_entities">optional.</param>
            <param name="include_rts">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.StatusesAsync(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a timeline of tweets authored by members of the specified list.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_screen_name">any one is required.</param>
            <param name="since_id">optional.</param>
            <param name="max_id">optional.</param>
            <param name="count">optional.</param>
            <param name="include_entities">optional.</param>
            <param name="include_rts">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.StatusesAsync(System.String,System.Int64,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a timeline of tweets authored by members of the specified list.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_id">any one is required.</param>
            <param name="since_id">optional.</param>
            <param name="max_id">optional.</param>
            <param name="count">optional.</param>
            <param name="include_entities">optional.</param>
            <param name="include_rts">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Create(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Creates a new list for the authenticated user.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> name (required)</para>
            <para>- <c>string</c> mode (optional)</para>
            <para>- <c>string</c> description (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Create(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Creates a new list for the authenticated user.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> name (required)</para>
            <para>- <c>string</c> mode (optional)</para>
            <para>- <c>string</c> description (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Create(System.Object)">
            <summary>
            <para>Creates a new list for the authenticated user.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> name (required)</para>
            <para>- <c>string</c> mode (optional)</para>
            <para>- <c>string</c> description (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Create(System.String,System.String,System.String)">
            <summary>
            <para>Creates a new list for the authenticated user.</para>
            </summary>
            <param name="name">required.</param>
            <param name="mode">optional.</param>
            <param name="description">optional.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.CreateAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Creates a new list for the authenticated user.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> name (required)</para>
            <para>- <c>string</c> mode (optional)</para>
            <para>- <c>string</c> description (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.CreateAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Creates a new list for the authenticated user.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> name (required)</para>
            <para>- <c>string</c> mode (optional)</para>
            <para>- <c>string</c> description (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.CreateAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Creates a new list for the authenticated user.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> name (required)</para>
            <para>- <c>string</c> mode (optional)</para>
            <para>- <c>string</c> description (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.CreateAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Creates a new list for the authenticated user.</para>
            </summary>
            <param name="name">required.</param>
            <param name="mode">optional.</param>
            <param name="description">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Destroy(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Deletes the specified list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The destroyed list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Destroy(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Deletes the specified list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The destroyed list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Destroy(System.Object)">
            <summary>
            <para>Deletes the specified list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The destroyed list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Destroy(System.Int64)">
            <summary>
            <para>Deletes the specified list.</para>
            </summary>
            <param name="list_id">any one is required.</param>
            <returns>The destroyed list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Destroy(System.String,System.String)">
            <summary>
            <para>Deletes the specified list.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_screen_name">any one is required.</param>
            <returns>The destroyed list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Destroy(System.String,System.Int64)">
            <summary>
            <para>Deletes the specified list.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_id">any one is required.</param>
            <returns>The destroyed list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.DestroyAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Deletes the specified list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The destroyed list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.DestroyAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Deletes the specified list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The destroyed list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.DestroyAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Deletes the specified list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The destroyed list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.DestroyAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            <para>Deletes the specified list.</para>
            </summary>
            <param name="list_id">any one is required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The destroyed list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.DestroyAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Deletes the specified list.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_screen_name">any one is required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The destroyed list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.DestroyAsync(System.String,System.Int64,System.Threading.CancellationToken)">
            <summary>
            <para>Deletes the specified list.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_id">any one is required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The destroyed list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Update(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Updates the specified list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            <para>- <c>string</c> name (optional)</para>
            <para>- <c>string</c> mode (optional)</para>
            <para>- <c>string</c> description (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Update(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Updates the specified list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            <para>- <c>string</c> name (optional)</para>
            <para>- <c>string</c> mode (optional)</para>
            <para>- <c>string</c> description (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Update(System.Object)">
            <summary>
            <para>Updates the specified list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            <para>- <c>string</c> name (optional)</para>
            <para>- <c>string</c> mode (optional)</para>
            <para>- <c>string</c> description (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Update(System.Int64,System.String,System.String,System.String)">
            <summary>
            <para>Updates the specified list.</para>
            </summary>
            <param name="list_id">any one is required.</param>
            <param name="name">optional.</param>
            <param name="mode">optional.</param>
            <param name="description">optional.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Update(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            <para>Updates the specified list.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_screen_name">any one is required.</param>
            <param name="name">optional.</param>
            <param name="mode">optional.</param>
            <param name="description">optional.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.Update(System.String,System.Int64,System.String,System.String,System.String)">
            <summary>
            <para>Updates the specified list.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_id">any one is required.</param>
            <param name="name">optional.</param>
            <param name="mode">optional.</param>
            <param name="description">optional.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.UpdateAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Updates the specified list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            <para>- <c>string</c> name (optional)</para>
            <para>- <c>string</c> mode (optional)</para>
            <para>- <c>string</c> description (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.UpdateAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Updates the specified list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            <para>- <c>string</c> name (optional)</para>
            <para>- <c>string</c> mode (optional)</para>
            <para>- <c>string</c> description (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.UpdateAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Updates the specified list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            <para>- <c>string</c> name (optional)</para>
            <para>- <c>string</c> mode (optional)</para>
            <para>- <c>string</c> description (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.UpdateAsync(System.Int64,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Updates the specified list.</para>
            </summary>
            <param name="list_id">any one is required.</param>
            <param name="name">optional.</param>
            <param name="mode">optional.</param>
            <param name="description">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.UpdateAsync(System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Updates the specified list.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_screen_name">any one is required.</param>
            <param name="name">optional.</param>
            <param name="mode">optional.</param>
            <param name="description">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Lists.UpdateAsync(System.String,System.Int64,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Updates the specified list.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_id">any one is required.</param>
            <param name="name">optional.</param>
            <param name="mode">optional.</param>
            <param name="description">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list.</returns>
        </member>
        <member name="P:CoreTweet.Rest.Lists.Members">
            <summary>
            Gets the wrapper of lists/members
            </summary>
        </member>
        <member name="P:CoreTweet.Rest.Lists.Subscribers">
            <summary>
            Gets the wrapper of lists/subscribers
            </summary>
        </member>
        <member name="T:CoreTweet.Rest.ListsMembers">
            <summary>
            Provides a set of methods for the wrapper of GET/POST lists/members.
            </summary>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.List(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the members of the specified list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.List(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns the members of the specified list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.List(System.Object)">
            <summary>
            <para>Returns the members of the specified list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.EnumerateList(CoreTweet.EnumerateMode,System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Returns the members of the specified list.</para>
            </summary>
            <param name="list_id">any one is required.</param>
            <param name="count">optional.</param>
            <param name="cursor">semi-optional.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.List(System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Returns the members of the specified list.</para>
            </summary>
            <param name="list_id">any one is required.</param>
            <param name="count">optional.</param>
            <param name="cursor">semi-optional.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.EnumerateList(CoreTweet.EnumerateMode,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Returns the members of the specified list.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_screen_name">any one is required.</param>
            <param name="count">optional.</param>
            <param name="cursor">semi-optional.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.List(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Returns the members of the specified list.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_screen_name">any one is required.</param>
            <param name="count">optional.</param>
            <param name="cursor">semi-optional.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.EnumerateList(CoreTweet.EnumerateMode,System.String,System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Returns the members of the specified list.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_id">any one is required.</param>
            <param name="count">optional.</param>
            <param name="cursor">semi-optional.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.List(System.String,System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Returns the members of the specified list.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_id">any one is required.</param>
            <param name="count">optional.</param>
            <param name="cursor">semi-optional.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.EnumerateList(CoreTweet.EnumerateMode,System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the members of the specified list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.EnumerateList(CoreTweet.EnumerateMode,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns the members of the specified list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.EnumerateList(CoreTweet.EnumerateMode,System.Object)">
            <summary>
            <para>Returns the members of the specified list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.ListAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the members of the specified list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.ListAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns the members of the specified list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.ListAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns the members of the specified list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.ListAsync(System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Returns the members of the specified list.</para>
            </summary>
            <param name="list_id">any one is required.</param>
            <param name="count">optional.</param>
            <param name="cursor">semi-optional.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.ListAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Returns the members of the specified list.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_screen_name">any one is required.</param>
            <param name="count">optional.</param>
            <param name="cursor">semi-optional.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.ListAsync(System.String,System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Returns the members of the specified list.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_id">any one is required.</param>
            <param name="count">optional.</param>
            <param name="cursor">semi-optional.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.Show(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Check if the specified user is a member of the specified list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.Show(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Check if the specified user is a member of the specified list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.Show(System.Object)">
            <summary>
            <para>Check if the specified user is a member of the specified list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.Show(System.Int64,System.Int64,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Check if the specified user is a member of the specified list.</para>
            </summary>
            <param name="list_id">any one is required.</param>
            <param name="user_id">any one is required.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.Show(System.Int64,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Check if the specified user is a member of the specified list.</para>
            </summary>
            <param name="list_id">any one is required.</param>
            <param name="screen_name">any one is required.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.Show(System.String,System.String,System.Int64,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Check if the specified user is a member of the specified list.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_screen_name">any one is required.</param>
            <param name="user_id">any one is required.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.Show(System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Check if the specified user is a member of the specified list.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_screen_name">any one is required.</param>
            <param name="screen_name">any one is required.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.Show(System.String,System.Int64,System.Int64,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Check if the specified user is a member of the specified list.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_id">any one is required.</param>
            <param name="user_id">any one is required.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.Show(System.String,System.Int64,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Check if the specified user is a member of the specified list.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_id">any one is required.</param>
            <param name="screen_name">any one is required.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.ShowAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Check if the specified user is a member of the specified list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.ShowAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Check if the specified user is a member of the specified list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.ShowAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Check if the specified user is a member of the specified list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.ShowAsync(System.Int64,System.Int64,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Check if the specified user is a member of the specified list.</para>
            </summary>
            <param name="list_id">any one is required.</param>
            <param name="user_id">any one is required.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.ShowAsync(System.Int64,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Check if the specified user is a member of the specified list.</para>
            </summary>
            <param name="list_id">any one is required.</param>
            <param name="screen_name">any one is required.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.ShowAsync(System.String,System.String,System.Int64,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Check if the specified user is a member of the specified list.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_screen_name">any one is required.</param>
            <param name="user_id">any one is required.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.ShowAsync(System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Check if the specified user is a member of the specified list.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_screen_name">any one is required.</param>
            <param name="screen_name">any one is required.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.ShowAsync(System.String,System.Int64,System.Int64,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Check if the specified user is a member of the specified list.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_id">any one is required.</param>
            <param name="user_id">any one is required.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.ShowAsync(System.String,System.Int64,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Check if the specified user is a member of the specified list.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_id">any one is required.</param>
            <param name="screen_name">any one is required.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.Create(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Add a member to a list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.Create(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Add a member to a list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.Create(System.Object)">
            <summary>
            <para>Add a member to a list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.Create(System.Int64,System.Int64)">
            <summary>
            <para>Add a member to a list.</para>
            </summary>
            <param name="list_id">any one is required.</param>
            <param name="user_id">any one is required.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.Create(System.Int64,System.String)">
            <summary>
            <para>Add a member to a list.</para>
            </summary>
            <param name="list_id">any one is required.</param>
            <param name="screen_name">any one is required.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.Create(System.String,System.String,System.Int64)">
            <summary>
            <para>Add a member to a list.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_screen_name">any one is required.</param>
            <param name="user_id">any one is required.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.Create(System.String,System.String,System.String)">
            <summary>
            <para>Add a member to a list.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_screen_name">any one is required.</param>
            <param name="screen_name">any one is required.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.Create(System.String,System.Int64,System.Int64)">
            <summary>
            <para>Add a member to a list.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_id">any one is required.</param>
            <param name="user_id">any one is required.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.Create(System.String,System.Int64,System.String)">
            <summary>
            <para>Add a member to a list.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_id">any one is required.</param>
            <param name="screen_name">any one is required.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.CreateAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Add a member to a list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.CreateAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Add a member to a list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.CreateAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Add a member to a list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.CreateAsync(System.Int64,System.Int64,System.Threading.CancellationToken)">
            <summary>
            <para>Add a member to a list.</para>
            </summary>
            <param name="list_id">any one is required.</param>
            <param name="user_id">any one is required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.CreateAsync(System.Int64,System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Add a member to a list.</para>
            </summary>
            <param name="list_id">any one is required.</param>
            <param name="screen_name">any one is required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.CreateAsync(System.String,System.String,System.Int64,System.Threading.CancellationToken)">
            <summary>
            <para>Add a member to a list.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_screen_name">any one is required.</param>
            <param name="user_id">any one is required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.CreateAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Add a member to a list.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_screen_name">any one is required.</param>
            <param name="screen_name">any one is required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.CreateAsync(System.String,System.Int64,System.Int64,System.Threading.CancellationToken)">
            <summary>
            <para>Add a member to a list.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_id">any one is required.</param>
            <param name="user_id">any one is required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.CreateAsync(System.String,System.Int64,System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Add a member to a list.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_id">any one is required.</param>
            <param name="screen_name">any one is required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.CreateAll(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> user_id (any one is required)</para>
            <para>- <c>IEnumerable&lt;string&gt;</c> screen_name (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.CreateAll(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> user_id (any one is required)</para>
            <para>- <c>IEnumerable&lt;string&gt;</c> screen_name (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.CreateAll(System.Object)">
            <summary>
            <para>Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> user_id (any one is required)</para>
            <para>- <c>IEnumerable&lt;string&gt;</c> screen_name (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.CreateAll(System.Int64,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            <para>Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names.</para>
            </summary>
            <param name="list_id">any one is required.</param>
            <param name="user_id">any one is required.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.CreateAll(System.Int64,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            <para>Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names.</para>
            </summary>
            <param name="list_id">any one is required.</param>
            <param name="screen_name">any one is required.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.CreateAll(System.String,System.String,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            <para>Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_screen_name">any one is required.</param>
            <param name="user_id">any one is required.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.CreateAll(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            <para>Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_screen_name">any one is required.</param>
            <param name="screen_name">any one is required.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.CreateAll(System.String,System.Int64,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            <para>Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_id">any one is required.</param>
            <param name="user_id">any one is required.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.CreateAll(System.String,System.Int64,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            <para>Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_id">any one is required.</param>
            <param name="screen_name">any one is required.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.CreateAllAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> user_id (any one is required)</para>
            <para>- <c>IEnumerable&lt;string&gt;</c> screen_name (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.CreateAllAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> user_id (any one is required)</para>
            <para>- <c>IEnumerable&lt;string&gt;</c> screen_name (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.CreateAllAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> user_id (any one is required)</para>
            <para>- <c>IEnumerable&lt;string&gt;</c> screen_name (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.CreateAllAsync(System.Int64,System.Collections.Generic.IEnumerable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            <para>Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names.</para>
            </summary>
            <param name="list_id">any one is required.</param>
            <param name="user_id">any one is required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.CreateAllAsync(System.Int64,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            <para>Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names.</para>
            </summary>
            <param name="list_id">any one is required.</param>
            <param name="screen_name">any one is required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.CreateAllAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            <para>Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_screen_name">any one is required.</param>
            <param name="user_id">any one is required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.CreateAllAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            <para>Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_screen_name">any one is required.</param>
            <param name="screen_name">any one is required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.CreateAllAsync(System.String,System.Int64,System.Collections.Generic.IEnumerable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            <para>Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_id">any one is required.</param>
            <param name="user_id">any one is required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.CreateAllAsync(System.String,System.Int64,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            <para>Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_id">any one is required.</param>
            <param name="screen_name">any one is required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.Destroy(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Removes the specified member from the list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.Destroy(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Removes the specified member from the list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.Destroy(System.Object)">
            <summary>
            <para>Removes the specified member from the list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.Destroy(System.Int64,System.Int64)">
            <summary>
            <para>Removes the specified member from the list.</para>
            </summary>
            <param name="list_id">any one is required.</param>
            <param name="user_id">any one is required.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.Destroy(System.Int64,System.String)">
            <summary>
            <para>Removes the specified member from the list.</para>
            </summary>
            <param name="list_id">any one is required.</param>
            <param name="screen_name">any one is required.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.Destroy(System.String,System.String,System.Int64)">
            <summary>
            <para>Removes the specified member from the list.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_screen_name">any one is required.</param>
            <param name="user_id">any one is required.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.Destroy(System.String,System.String,System.String)">
            <summary>
            <para>Removes the specified member from the list.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_screen_name">any one is required.</param>
            <param name="screen_name">any one is required.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.Destroy(System.String,System.Int64,System.Int64)">
            <summary>
            <para>Removes the specified member from the list.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_id">any one is required.</param>
            <param name="user_id">any one is required.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.Destroy(System.String,System.Int64,System.String)">
            <summary>
            <para>Removes the specified member from the list.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_id">any one is required.</param>
            <param name="screen_name">any one is required.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.DestroyAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Removes the specified member from the list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.DestroyAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Removes the specified member from the list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.DestroyAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Removes the specified member from the list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.DestroyAsync(System.Int64,System.Int64,System.Threading.CancellationToken)">
            <summary>
            <para>Removes the specified member from the list.</para>
            </summary>
            <param name="list_id">any one is required.</param>
            <param name="user_id">any one is required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.DestroyAsync(System.Int64,System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Removes the specified member from the list.</para>
            </summary>
            <param name="list_id">any one is required.</param>
            <param name="screen_name">any one is required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.DestroyAsync(System.String,System.String,System.Int64,System.Threading.CancellationToken)">
            <summary>
            <para>Removes the specified member from the list.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_screen_name">any one is required.</param>
            <param name="user_id">any one is required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.DestroyAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Removes the specified member from the list.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_screen_name">any one is required.</param>
            <param name="screen_name">any one is required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.DestroyAsync(System.String,System.Int64,System.Int64,System.Threading.CancellationToken)">
            <summary>
            <para>Removes the specified member from the list.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_id">any one is required.</param>
            <param name="user_id">any one is required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.DestroyAsync(System.String,System.Int64,System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Removes the specified member from the list.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_id">any one is required.</param>
            <param name="screen_name">any one is required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.DestroyAll(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Removes multiple members from a list, by specifying a comma-separated list of member ids or screen names.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> user_id (any one is required)</para>
            <para>- <c>IEnumerable&lt;string&gt;</c> screen_name (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.DestroyAll(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Removes multiple members from a list, by specifying a comma-separated list of member ids or screen names.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> user_id (any one is required)</para>
            <para>- <c>IEnumerable&lt;string&gt;</c> screen_name (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.DestroyAll(System.Object)">
            <summary>
            <para>Removes multiple members from a list, by specifying a comma-separated list of member ids or screen names.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> user_id (any one is required)</para>
            <para>- <c>IEnumerable&lt;string&gt;</c> screen_name (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.DestroyAll(System.Int64,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            <para>Removes multiple members from a list, by specifying a comma-separated list of member ids or screen names.</para>
            </summary>
            <param name="list_id">any one is required.</param>
            <param name="user_id">any one is required.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.DestroyAll(System.Int64,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            <para>Removes multiple members from a list, by specifying a comma-separated list of member ids or screen names.</para>
            </summary>
            <param name="list_id">any one is required.</param>
            <param name="screen_name">any one is required.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.DestroyAll(System.String,System.String,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            <para>Removes multiple members from a list, by specifying a comma-separated list of member ids or screen names.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_screen_name">any one is required.</param>
            <param name="user_id">any one is required.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.DestroyAll(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            <para>Removes multiple members from a list, by specifying a comma-separated list of member ids or screen names.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_screen_name">any one is required.</param>
            <param name="screen_name">any one is required.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.DestroyAll(System.String,System.Int64,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            <para>Removes multiple members from a list, by specifying a comma-separated list of member ids or screen names.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_id">any one is required.</param>
            <param name="user_id">any one is required.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.DestroyAll(System.String,System.Int64,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            <para>Removes multiple members from a list, by specifying a comma-separated list of member ids or screen names.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_id">any one is required.</param>
            <param name="screen_name">any one is required.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.DestroyAllAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Removes multiple members from a list, by specifying a comma-separated list of member ids or screen names.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> user_id (any one is required)</para>
            <para>- <c>IEnumerable&lt;string&gt;</c> screen_name (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.DestroyAllAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Removes multiple members from a list, by specifying a comma-separated list of member ids or screen names.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> user_id (any one is required)</para>
            <para>- <c>IEnumerable&lt;string&gt;</c> screen_name (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.DestroyAllAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Removes multiple members from a list, by specifying a comma-separated list of member ids or screen names.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> user_id (any one is required)</para>
            <para>- <c>IEnumerable&lt;string&gt;</c> screen_name (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.DestroyAllAsync(System.Int64,System.Collections.Generic.IEnumerable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            <para>Removes multiple members from a list, by specifying a comma-separated list of member ids or screen names.</para>
            </summary>
            <param name="list_id">any one is required.</param>
            <param name="user_id">any one is required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.DestroyAllAsync(System.Int64,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            <para>Removes multiple members from a list, by specifying a comma-separated list of member ids or screen names.</para>
            </summary>
            <param name="list_id">any one is required.</param>
            <param name="screen_name">any one is required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.DestroyAllAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            <para>Removes multiple members from a list, by specifying a comma-separated list of member ids or screen names.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_screen_name">any one is required.</param>
            <param name="user_id">any one is required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.DestroyAllAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            <para>Removes multiple members from a list, by specifying a comma-separated list of member ids or screen names.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_screen_name">any one is required.</param>
            <param name="screen_name">any one is required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.DestroyAllAsync(System.String,System.Int64,System.Collections.Generic.IEnumerable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            <para>Removes multiple members from a list, by specifying a comma-separated list of member ids or screen names.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_id">any one is required.</param>
            <param name="user_id">any one is required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsMembers.DestroyAllAsync(System.String,System.Int64,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            <para>Removes multiple members from a list, by specifying a comma-separated list of member ids or screen names.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_id">any one is required.</param>
            <param name="screen_name">any one is required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list.</returns>
        </member>
        <member name="T:CoreTweet.Rest.ListsSubscribers">
            <summary>
            Provides a set of methods for the wrapper of GET/POST lists/subscribers.
            </summary>
        </member>
        <member name="M:CoreTweet.Rest.ListsSubscribers.List(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the subscribers of the specified list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> cursor (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsSubscribers.List(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns the subscribers of the specified list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> cursor (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsSubscribers.List(System.Object)">
            <summary>
            <para>Returns the subscribers of the specified list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> cursor (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsSubscribers.EnumerateList(CoreTweet.EnumerateMode,System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Returns the subscribers of the specified list.</para>
            </summary>
            <param name="list_id">any one is required.</param>
            <param name="count">optional.</param>
            <param name="cursor">optional.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsSubscribers.List(System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Returns the subscribers of the specified list.</para>
            </summary>
            <param name="list_id">any one is required.</param>
            <param name="count">optional.</param>
            <param name="cursor">optional.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsSubscribers.EnumerateList(CoreTweet.EnumerateMode,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Returns the subscribers of the specified list.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_screen_name">any one is required.</param>
            <param name="count">optional.</param>
            <param name="cursor">optional.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsSubscribers.List(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Returns the subscribers of the specified list.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_screen_name">any one is required.</param>
            <param name="count">optional.</param>
            <param name="cursor">optional.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsSubscribers.EnumerateList(CoreTweet.EnumerateMode,System.String,System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Returns the subscribers of the specified list.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_id">any one is required.</param>
            <param name="count">optional.</param>
            <param name="cursor">optional.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsSubscribers.List(System.String,System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Returns the subscribers of the specified list.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_id">any one is required.</param>
            <param name="count">optional.</param>
            <param name="cursor">optional.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsSubscribers.EnumerateList(CoreTweet.EnumerateMode,System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the subscribers of the specified list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> cursor (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsSubscribers.EnumerateList(CoreTweet.EnumerateMode,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns the subscribers of the specified list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> cursor (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsSubscribers.EnumerateList(CoreTweet.EnumerateMode,System.Object)">
            <summary>
            <para>Returns the subscribers of the specified list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> cursor (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsSubscribers.ListAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the subscribers of the specified list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> cursor (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsSubscribers.ListAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns the subscribers of the specified list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> cursor (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsSubscribers.ListAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns the subscribers of the specified list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> cursor (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsSubscribers.ListAsync(System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Returns the subscribers of the specified list.</para>
            </summary>
            <param name="list_id">any one is required.</param>
            <param name="count">optional.</param>
            <param name="cursor">optional.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsSubscribers.ListAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Returns the subscribers of the specified list.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_screen_name">any one is required.</param>
            <param name="count">optional.</param>
            <param name="cursor">optional.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsSubscribers.ListAsync(System.String,System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Returns the subscribers of the specified list.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_id">any one is required.</param>
            <param name="count">optional.</param>
            <param name="cursor">optional.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsSubscribers.Show(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Check if the specified user is a subscriber of the specified list. Returns the user if they are subscriber.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsSubscribers.Show(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Check if the specified user is a subscriber of the specified list. Returns the user if they are subscriber.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsSubscribers.Show(System.Object)">
            <summary>
            <para>Check if the specified user is a subscriber of the specified list. Returns the user if they are subscriber.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsSubscribers.Show(System.Int64,System.Int64,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Check if the specified user is a subscriber of the specified list. Returns the user if they are subscriber.</para>
            </summary>
            <param name="list_id">any one is required.</param>
            <param name="user_id">any one is required.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsSubscribers.Show(System.Int64,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Check if the specified user is a subscriber of the specified list. Returns the user if they are subscriber.</para>
            </summary>
            <param name="list_id">any one is required.</param>
            <param name="screen_name">any one is required.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsSubscribers.Show(System.String,System.String,System.Int64,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Check if the specified user is a subscriber of the specified list. Returns the user if they are subscriber.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_screen_name">any one is required.</param>
            <param name="user_id">any one is required.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsSubscribers.Show(System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Check if the specified user is a subscriber of the specified list. Returns the user if they are subscriber.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_screen_name">any one is required.</param>
            <param name="screen_name">any one is required.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsSubscribers.Show(System.String,System.Int64,System.Int64,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Check if the specified user is a subscriber of the specified list. Returns the user if they are subscriber.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_id">any one is required.</param>
            <param name="user_id">any one is required.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsSubscribers.Show(System.String,System.Int64,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Check if the specified user is a subscriber of the specified list. Returns the user if they are subscriber.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_id">any one is required.</param>
            <param name="screen_name">any one is required.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsSubscribers.ShowAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Check if the specified user is a subscriber of the specified list. Returns the user if they are subscriber.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsSubscribers.ShowAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Check if the specified user is a subscriber of the specified list. Returns the user if they are subscriber.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsSubscribers.ShowAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Check if the specified user is a subscriber of the specified list. Returns the user if they are subscriber.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsSubscribers.ShowAsync(System.Int64,System.Int64,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Check if the specified user is a subscriber of the specified list. Returns the user if they are subscriber.</para>
            </summary>
            <param name="list_id">any one is required.</param>
            <param name="user_id">any one is required.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsSubscribers.ShowAsync(System.Int64,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Check if the specified user is a subscriber of the specified list. Returns the user if they are subscriber.</para>
            </summary>
            <param name="list_id">any one is required.</param>
            <param name="screen_name">any one is required.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsSubscribers.ShowAsync(System.String,System.String,System.Int64,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Check if the specified user is a subscriber of the specified list. Returns the user if they are subscriber.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_screen_name">any one is required.</param>
            <param name="user_id">any one is required.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsSubscribers.ShowAsync(System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Check if the specified user is a subscriber of the specified list. Returns the user if they are subscriber.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_screen_name">any one is required.</param>
            <param name="screen_name">any one is required.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsSubscribers.ShowAsync(System.String,System.Int64,System.Int64,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Check if the specified user is a subscriber of the specified list. Returns the user if they are subscriber.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_id">any one is required.</param>
            <param name="user_id">any one is required.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsSubscribers.ShowAsync(System.String,System.Int64,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Check if the specified user is a subscriber of the specified list. Returns the user if they are subscriber.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_id">any one is required.</param>
            <param name="screen_name">any one is required.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsSubscribers.Create(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Subscribes the authenticated user to the specified list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsSubscribers.Create(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Subscribes the authenticated user to the specified list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsSubscribers.Create(System.Object)">
            <summary>
            <para>Subscribes the authenticated user to the specified list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsSubscribers.Create(System.Int64)">
            <summary>
            <para>Subscribes the authenticated user to the specified list.</para>
            </summary>
            <param name="list_id">any one is required.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsSubscribers.Create(System.String,System.String)">
            <summary>
            <para>Subscribes the authenticated user to the specified list.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_screen_name">any one is required.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsSubscribers.Create(System.String,System.Int64)">
            <summary>
            <para>Subscribes the authenticated user to the specified list.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_id">any one is required.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsSubscribers.CreateAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Subscribes the authenticated user to the specified list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsSubscribers.CreateAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Subscribes the authenticated user to the specified list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsSubscribers.CreateAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Subscribes the authenticated user to the specified list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsSubscribers.CreateAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            <para>Subscribes the authenticated user to the specified list.</para>
            </summary>
            <param name="list_id">any one is required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsSubscribers.CreateAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Subscribes the authenticated user to the specified list.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_screen_name">any one is required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsSubscribers.CreateAsync(System.String,System.Int64,System.Threading.CancellationToken)">
            <summary>
            <para>Subscribes the authenticated user to the specified list.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_id">any one is required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsSubscribers.Destroy(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Unsubscribes the authenticated user from the specified list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsSubscribers.Destroy(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Unsubscribes the authenticated user from the specified list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsSubscribers.Destroy(System.Object)">
            <summary>
            <para>Unsubscribes the authenticated user from the specified list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsSubscribers.Destroy(System.Int64)">
            <summary>
            <para>Unsubscribes the authenticated user from the specified list.</para>
            </summary>
            <param name="list_id">any one is required.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsSubscribers.Destroy(System.String,System.String)">
            <summary>
            <para>Unsubscribes the authenticated user from the specified list.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_screen_name">any one is required.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsSubscribers.Destroy(System.String,System.Int64)">
            <summary>
            <para>Unsubscribes the authenticated user from the specified list.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_id">any one is required.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsSubscribers.DestroyAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Unsubscribes the authenticated user from the specified list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsSubscribers.DestroyAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Unsubscribes the authenticated user from the specified list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsSubscribers.DestroyAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Unsubscribes the authenticated user from the specified list.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> list_id (any one is required)</para>
            <para>- <c>string</c> slug (any one is required)</para>
            <para>- <c>string</c> owner_screen_name (any one is required)</para>
            <para>- <c>long</c> owner_id (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsSubscribers.DestroyAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            <para>Unsubscribes the authenticated user from the specified list.</para>
            </summary>
            <param name="list_id">any one is required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsSubscribers.DestroyAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Unsubscribes the authenticated user from the specified list.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_screen_name">any one is required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list.</returns>
        </member>
        <member name="M:CoreTweet.Rest.ListsSubscribers.DestroyAsync(System.String,System.Int64,System.Threading.CancellationToken)">
            <summary>
            <para>Unsubscribes the authenticated user from the specified list.</para>
            </summary>
            <param name="slug">any one is required.</param>
            <param name="owner_id">any one is required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The list.</returns>
        </member>
        <member name="T:CoreTweet.Rest.Media">
            <summary>
            Provides a set of methods for the wrapper of POST media.
            </summary>
        </member>
        <member name="M:CoreTweet.Rest.Media.Upload(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Upload media (images) to Twitter for use in a Tweet or Twitter-hosted Card.</para>
            <para>Available parameters:</para>
            <para>- <c>Stream</c> media (any one is required)</para>
            <para>- <c>IEnumerable&lt;byte&gt;</c> media (any one is required)</para>
            <para>- <c>FileInfo</c> media (any one is required)</para>
            <para>- <c>string</c> media_data (any one is required)</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> additional_owners (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The result for the uploaded media.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.Upload(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Upload media (images) to Twitter for use in a Tweet or Twitter-hosted Card.</para>
            <para>Available parameters:</para>
            <para>- <c>Stream</c> media (any one is required)</para>
            <para>- <c>IEnumerable&lt;byte&gt;</c> media (any one is required)</para>
            <para>- <c>FileInfo</c> media (any one is required)</para>
            <para>- <c>string</c> media_data (any one is required)</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> additional_owners (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The result for the uploaded media.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.Upload(System.Object)">
            <summary>
            <para>Upload media (images) to Twitter for use in a Tweet or Twitter-hosted Card.</para>
            <para>Available parameters:</para>
            <para>- <c>Stream</c> media (any one is required)</para>
            <para>- <c>IEnumerable&lt;byte&gt;</c> media (any one is required)</para>
            <para>- <c>FileInfo</c> media (any one is required)</para>
            <para>- <c>string</c> media_data (any one is required)</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> additional_owners (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The result for the uploaded media.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.Upload(System.IO.Stream,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            <para>Upload media (images) to Twitter for use in a Tweet or Twitter-hosted Card.</para>
            </summary>
            <param name="media">any one is required.</param>
            <param name="additional_owners">optional.</param>
            <returns>The result for the uploaded media.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.Upload(System.Collections.Generic.IEnumerable{System.Byte},System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            <para>Upload media (images) to Twitter for use in a Tweet or Twitter-hosted Card.</para>
            </summary>
            <param name="media">any one is required.</param>
            <param name="additional_owners">optional.</param>
            <returns>The result for the uploaded media.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.Upload(System.IO.FileInfo,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            <para>Upload media (images) to Twitter for use in a Tweet or Twitter-hosted Card.</para>
            </summary>
            <param name="media">any one is required.</param>
            <param name="additional_owners">optional.</param>
            <returns>The result for the uploaded media.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.Upload(System.String,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            <para>Upload media (images) to Twitter for use in a Tweet or Twitter-hosted Card.</para>
            </summary>
            <param name="media_data">any one is required.</param>
            <param name="additional_owners">optional.</param>
            <returns>The result for the uploaded media.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Upload media (images) to Twitter for use in a Tweet or Twitter-hosted Card.</para>
            <para>Available parameters:</para>
            <para>- <c>Stream</c> media (any one is required)</para>
            <para>- <c>IEnumerable&lt;byte&gt;</c> media (any one is required)</para>
            <para>- <c>FileInfo</c> media (any one is required)</para>
            <para>- <c>string</c> media_data (any one is required)</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> additional_owners (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The result for the uploaded media.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadInitCommand(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Initialize an upload.</para>
            <para>Available parameters:</para>
            <para>- <c>int</c> total_bytes (required)</para>
            <para>- <c>string</c> media_type (any one is required)</para>
            <para>- <c>UploadMediaType</c> media_type (any one is required)</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> additional_owners (optional)</para>
            <para>- <c>string</c> media_category (optional)</para>
            <para>- <c>bool</c> shared (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The result of INIT command.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadInitCommand(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Initialize an upload.</para>
            <para>Available parameters:</para>
            <para>- <c>int</c> total_bytes (required)</para>
            <para>- <c>string</c> media_type (any one is required)</para>
            <para>- <c>UploadMediaType</c> media_type (any one is required)</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> additional_owners (optional)</para>
            <para>- <c>string</c> media_category (optional)</para>
            <para>- <c>bool</c> shared (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The result of INIT command.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadInitCommand(System.Object)">
            <summary>
            <para>Initialize an upload.</para>
            <para>Available parameters:</para>
            <para>- <c>int</c> total_bytes (required)</para>
            <para>- <c>string</c> media_type (any one is required)</para>
            <para>- <c>UploadMediaType</c> media_type (any one is required)</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> additional_owners (optional)</para>
            <para>- <c>string</c> media_category (optional)</para>
            <para>- <c>bool</c> shared (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The result of INIT command.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadInitCommand(System.Int32,System.String,System.Collections.Generic.IEnumerable{System.Int64},System.String,System.Nullable{System.Boolean})">
            <summary>
            <para>Initialize an upload.</para>
            </summary>
            <param name="total_bytes">required.</param>
            <param name="media_type">any one is required.</param>
            <param name="additional_owners">optional.</param>
            <param name="media_category">optional.</param>
            <param name="shared">optional.</param>
            <returns>The result of INIT command.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadInitCommand(System.Int32,CoreTweet.UploadMediaType,System.Collections.Generic.IEnumerable{System.Int64},System.String,System.Nullable{System.Boolean})">
            <summary>
            <para>Initialize an upload.</para>
            </summary>
            <param name="total_bytes">required.</param>
            <param name="media_type">any one is required.</param>
            <param name="additional_owners">optional.</param>
            <param name="media_category">optional.</param>
            <param name="shared">optional.</param>
            <returns>The result of INIT command.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadInitCommandAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Initialize an upload.</para>
            <para>Available parameters:</para>
            <para>- <c>int</c> total_bytes (required)</para>
            <para>- <c>string</c> media_type (any one is required)</para>
            <para>- <c>UploadMediaType</c> media_type (any one is required)</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> additional_owners (optional)</para>
            <para>- <c>string</c> media_category (optional)</para>
            <para>- <c>bool</c> shared (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The result of INIT command.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadInitCommandAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Initialize an upload.</para>
            <para>Available parameters:</para>
            <para>- <c>int</c> total_bytes (required)</para>
            <para>- <c>string</c> media_type (any one is required)</para>
            <para>- <c>UploadMediaType</c> media_type (any one is required)</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> additional_owners (optional)</para>
            <para>- <c>string</c> media_category (optional)</para>
            <para>- <c>bool</c> shared (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The result of INIT command.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadInitCommandAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Initialize an upload.</para>
            <para>Available parameters:</para>
            <para>- <c>int</c> total_bytes (required)</para>
            <para>- <c>string</c> media_type (any one is required)</para>
            <para>- <c>UploadMediaType</c> media_type (any one is required)</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> additional_owners (optional)</para>
            <para>- <c>string</c> media_category (optional)</para>
            <para>- <c>bool</c> shared (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The result of INIT command.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadInitCommandAsync(System.Int32,System.String,System.Collections.Generic.IEnumerable{System.Int64},System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            <para>Initialize an upload.</para>
            </summary>
            <param name="total_bytes">required.</param>
            <param name="media_type">any one is required.</param>
            <param name="additional_owners">optional.</param>
            <param name="media_category">optional.</param>
            <param name="shared">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The result of INIT command.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadInitCommandAsync(System.Int32,CoreTweet.UploadMediaType,System.Collections.Generic.IEnumerable{System.Int64},System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            <para>Initialize an upload.</para>
            </summary>
            <param name="total_bytes">required.</param>
            <param name="media_type">any one is required.</param>
            <param name="additional_owners">optional.</param>
            <param name="media_category">optional.</param>
            <param name="shared">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The result of INIT command.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadAppendCommand(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Upload(s) of chunked data.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> media_id (required)</para>
            <para>- <c>int</c> segment_index (required)</para>
            <para>- <c>Stream</c> media (any one is required)</para>
            <para>- <c>IEnumerable&lt;byte&gt;</c> media (any one is required)</para>
            <para>- <c>FileInfo</c> media (any one is required)</para>
            <para>- <c>string</c> media_data (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadAppendCommand(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Upload(s) of chunked data.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> media_id (required)</para>
            <para>- <c>int</c> segment_index (required)</para>
            <para>- <c>Stream</c> media (any one is required)</para>
            <para>- <c>IEnumerable&lt;byte&gt;</c> media (any one is required)</para>
            <para>- <c>FileInfo</c> media (any one is required)</para>
            <para>- <c>string</c> media_data (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadAppendCommand(System.Object)">
            <summary>
            <para>Upload(s) of chunked data.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> media_id (required)</para>
            <para>- <c>int</c> segment_index (required)</para>
            <para>- <c>Stream</c> media (any one is required)</para>
            <para>- <c>IEnumerable&lt;byte&gt;</c> media (any one is required)</para>
            <para>- <c>FileInfo</c> media (any one is required)</para>
            <para>- <c>string</c> media_data (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadAppendCommand(System.Int64,System.Int32,System.IO.Stream)">
            <summary>
            <para>Upload(s) of chunked data.</para>
            </summary>
            <param name="media_id">required.</param>
            <param name="segment_index">required.</param>
            <param name="media">any one is required.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadAppendCommand(System.Int64,System.Int32,System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            <para>Upload(s) of chunked data.</para>
            </summary>
            <param name="media_id">required.</param>
            <param name="segment_index">required.</param>
            <param name="media">any one is required.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadAppendCommand(System.Int64,System.Int32,System.IO.FileInfo)">
            <summary>
            <para>Upload(s) of chunked data.</para>
            </summary>
            <param name="media_id">required.</param>
            <param name="segment_index">required.</param>
            <param name="media">any one is required.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadAppendCommand(System.Int64,System.Int32,System.String)">
            <summary>
            <para>Upload(s) of chunked data.</para>
            </summary>
            <param name="media_id">required.</param>
            <param name="segment_index">required.</param>
            <param name="media_data">any one is required.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadAppendCommandAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Upload(s) of chunked data.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> media_id (required)</para>
            <para>- <c>int</c> segment_index (required)</para>
            <para>- <c>Stream</c> media (any one is required)</para>
            <para>- <c>IEnumerable&lt;byte&gt;</c> media (any one is required)</para>
            <para>- <c>FileInfo</c> media (any one is required)</para>
            <para>- <c>string</c> media_data (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadFinalizeCommand(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Complete the upload.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> media_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The result for the uploaded media.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadFinalizeCommand(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Complete the upload.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> media_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The result for the uploaded media.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadFinalizeCommand(System.Object)">
            <summary>
            <para>Complete the upload.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> media_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The result for the uploaded media.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadFinalizeCommand(System.Int64)">
            <summary>
            <para>Complete the upload.</para>
            </summary>
            <param name="media_id">required.</param>
            <returns>The result for the uploaded media.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadFinalizeCommandAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Complete the upload.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> media_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The result for the uploaded media.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadFinalizeCommandAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Complete the upload.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> media_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The result for the uploaded media.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadFinalizeCommandAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Complete the upload.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> media_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The result for the uploaded media.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadFinalizeCommandAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            <para>Complete the upload.</para>
            </summary>
            <param name="media_id">required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The result for the uploaded media.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadStatusCommand(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Check the processing status of the upload (for async video uploads only).</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> media_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The status of the upload.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadStatusCommand(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Check the processing status of the upload (for async video uploads only).</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> media_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The status of the upload.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadStatusCommand(System.Object)">
            <summary>
            <para>Check the processing status of the upload (for async video uploads only).</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> media_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The status of the upload.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadStatusCommand(System.Int64)">
            <summary>
            <para>Check the processing status of the upload (for async video uploads only).</para>
            </summary>
            <param name="media_id">required.</param>
            <returns>The status of the upload.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadStatusCommandAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Check the processing status of the upload (for async video uploads only).</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> media_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The status of the upload.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadStatusCommandAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Check the processing status of the upload (for async video uploads only).</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> media_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The status of the upload.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadStatusCommandAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Check the processing status of the upload (for async video uploads only).</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> media_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The status of the upload.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadStatusCommandAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            <para>Check the processing status of the upload (for async video uploads only).</para>
            </summary>
            <param name="media_id">required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The status of the upload.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken,System.IProgress{CoreTweet.UploadProgressInfo})">
            <summary>
            <para>Upload media (images) to Twitter for use in a Tweet or Twitter-hosted Card.</para>
            <para>Available parameters:</para>
            <para>- <c>Stream</c> media (any one is required)</para>
            <para>- <c>IEnumerable&lt;byte&gt;</c> media (any one is required)</para>
            <para>- <c>FileInfo</c> media (any one is required)</para>
            <para>- <c>string</c> media_data (any one is required)</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> additional_owners (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The result for the uploaded media.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadAsync(System.Object,System.Threading.CancellationToken,System.IProgress{CoreTweet.UploadProgressInfo})">
            <summary>
            <para>Upload media (images) to Twitter for use in a Tweet or Twitter-hosted Card.</para>
            <para>Available parameters:</para>
            <para>- <c>Stream</c> media (any one is required)</para>
            <para>- <c>IEnumerable&lt;byte&gt;</c> media (any one is required)</para>
            <para>- <c>FileInfo</c> media (any one is required)</para>
            <para>- <c>string</c> media_data (any one is required)</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> additional_owners (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The result for the uploaded media.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadAsync(System.IO.Stream,System.Collections.Generic.IEnumerable{System.Int64},System.Threading.CancellationToken,System.IProgress{CoreTweet.UploadProgressInfo})">
            <summary>
            <para>Upload media (images) to Twitter for use in a Tweet or Twitter-hosted Card.</para>
            </summary>
            <param name="media">any one is required.</param>
            <param name="additional_owners">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The result for the uploaded media.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadAsync(System.Collections.Generic.IEnumerable{System.Byte},System.Collections.Generic.IEnumerable{System.Int64},System.Threading.CancellationToken,System.IProgress{CoreTweet.UploadProgressInfo})">
            <summary>
            <para>Upload media (images) to Twitter for use in a Tweet or Twitter-hosted Card.</para>
            </summary>
            <param name="media">any one is required.</param>
            <param name="additional_owners">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The result for the uploaded media.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadAsync(System.IO.FileInfo,System.Collections.Generic.IEnumerable{System.Int64},System.Threading.CancellationToken,System.IProgress{CoreTweet.UploadProgressInfo})">
            <summary>
            <para>Upload media (images) to Twitter for use in a Tweet or Twitter-hosted Card.</para>
            </summary>
            <param name="media">any one is required.</param>
            <param name="additional_owners">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The result for the uploaded media.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadAppendCommandAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken,System.IProgress{CoreTweet.UploadProgressInfo})">
            <summary>
            <para>Upload(s) of chunked data.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> media_id (required)</para>
            <para>- <c>int</c> segment_index (required)</para>
            <para>- <c>Stream</c> media (any one is required)</para>
            <para>- <c>IEnumerable&lt;byte&gt;</c> media (any one is required)</para>
            <para>- <c>FileInfo</c> media (any one is required)</para>
            <para>- <c>string</c> media_data (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadAppendCommandAsync(System.Object,System.Threading.CancellationToken,System.IProgress{CoreTweet.UploadProgressInfo})">
            <summary>
            <para>Upload(s) of chunked data.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> media_id (required)</para>
            <para>- <c>int</c> segment_index (required)</para>
            <para>- <c>Stream</c> media (any one is required)</para>
            <para>- <c>IEnumerable&lt;byte&gt;</c> media (any one is required)</para>
            <para>- <c>FileInfo</c> media (any one is required)</para>
            <para>- <c>string</c> media_data (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadAppendCommandAsync(System.Int64,System.Int32,System.IO.Stream,System.Threading.CancellationToken,System.IProgress{CoreTweet.UploadProgressInfo})">
            <summary>
            <para>Upload(s) of chunked data.</para>
            </summary>
            <param name="media_id">required.</param>
            <param name="segment_index">required.</param>
            <param name="media">any one is required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadAppendCommandAsync(System.Int64,System.Int32,System.Collections.Generic.IEnumerable{System.Byte},System.Threading.CancellationToken,System.IProgress{CoreTweet.UploadProgressInfo})">
            <summary>
            <para>Upload(s) of chunked data.</para>
            </summary>
            <param name="media_id">required.</param>
            <param name="segment_index">required.</param>
            <param name="media">any one is required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadAppendCommandAsync(System.Int64,System.Int32,System.IO.FileInfo,System.Threading.CancellationToken,System.IProgress{CoreTweet.UploadProgressInfo})">
            <summary>
            <para>Upload(s) of chunked data.</para>
            </summary>
            <param name="media_id">required.</param>
            <param name="segment_index">required.</param>
            <param name="media">any one is required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadChunkedAsync(System.IO.Stream,System.Int64,CoreTweet.UploadMediaType,System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Uploads videos or chunked images to Twitter for use in a Tweet or Twitter-hosted Card as an asynchronous operation.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> media_category (optional)</para>
            <para>- <c>IEnumerbale&lt;long&gt;</c> additional_owners (optional)</para>
            </summary>
            <param name="media">The raw binary file content being uploaded.</param>
            <param name="totalBytes">The size of the media being uploaded in bytes.</param>
            <param name="mediaType">The type of the media being uploaded.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the result for the uploaded media.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadChunkedAsync(System.IO.Stream,CoreTweet.UploadMediaType,System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Uploads videos or chunked images to Twitter for use in a Tweet or Twitter-hosted Card as an asynchronous operation.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> media_category (optional)</para>
            <para>- <c>IEnumerbale&lt;long&gt;</c> additional_owners (optional)</para>
            </summary>
            <param name="media">The raw binary file content being uploaded.</param>
            <param name="mediaType">The type of the media being uploaded.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the result for the uploaded media.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadChunkedAsync(System.IO.Stream,System.Int64,CoreTweet.UploadMediaType,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken,System.IProgress{CoreTweet.UploadChunkedProgressInfo})">
            <summary>
            <para>Uploads videos or chunked images to Twitter for use in a Tweet or Twitter-hosted Card as an asynchronous operation.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> media_category (optional)</para>
            <para>- <c>IEnumerbale&lt;long&gt;</c> additional_owners (optional)</para>
            </summary>
            <param name="media">The raw binary file content being uploaded.</param>
            <param name="totalBytes">The size of the media being uploaded in bytes.</param>
            <param name="mediaType">The type of the media being uploaded.</param>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the result for the uploaded media.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadChunkedAsync(System.IO.Stream,System.Int64,CoreTweet.UploadMediaType,System.Object,System.Threading.CancellationToken,System.IProgress{CoreTweet.UploadChunkedProgressInfo})">
            <summary>
            <para>Uploads videos or chunked images to Twitter for use in a Tweet or Twitter-hosted Card as an asynchronous operation.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> media_category (optional)</para>
            <para>- <c>IEnumerbale&lt;long&gt;</c> additional_owners (optional)</para>
            </summary>
            <param name="media">The raw binary file content being uploaded.</param>
            <param name="totalBytes">The size of the media being uploaded in bytes.</param>
            <param name="mediaType">The type of the media being uploaded.</param>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the result for the uploaded media.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadChunkedAsync(System.IO.Stream,System.Int64,CoreTweet.UploadMediaType,System.String,System.Collections.Generic.IEnumerable{System.Int64},System.Threading.CancellationToken,System.IProgress{CoreTweet.UploadChunkedProgressInfo})">
            <summary>
            Uploads videos or chunked images to Twitter for use in a Tweet or Twitter-hosted Card as an asynchronous operation.
            </summary>
            <param name="media">The raw binary file content being uploaded.</param>
            <param name="totalBytes">The size of the media being uploaded in bytes.</param>
            <param name="mediaType">The type of the media being uploaded.</param>
            <param name="media_category">A string enum value which identifies a media usecase.</param>
            <param name="additional_owners">A comma-separated string of user IDs to set as additional owners who are allowed to use the returned media_id in Tweets or Cards.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The result for the uploaded media.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadChunkedAsync(System.IO.Stream,CoreTweet.UploadMediaType,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken,System.IProgress{CoreTweet.UploadChunkedProgressInfo})">
            <summary>
            <para>Uploads videos or chunked images to Twitter for use in a Tweet or Twitter-hosted Card as an asynchronous operation.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> media_category (optional)</para>
            <para>- <c>IEnumerbale&lt;long&gt;</c> additional_owners (optional)</para>
            </summary>
            <param name="media">The raw binary file content being uploaded.</param>
            <param name="mediaType">The type of the media being uploaded.</param>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the result for the uploaded media.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadChunkedAsync(System.IO.Stream,CoreTweet.UploadMediaType,System.Object,System.Threading.CancellationToken,System.IProgress{CoreTweet.UploadChunkedProgressInfo})">
            <summary>
            <para>Uploads videos or chunked images to Twitter for use in a Tweet or Twitter-hosted Card as an asynchronous operation.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> media_category (optional)</para>
            <para>- <c>IEnumerbale&lt;long&gt;</c> additional_owners (optional)</para>
            </summary>
            <param name="media">The raw binary file content being uploaded.</param>
            <param name="mediaType">The type of the media being uploaded.</param>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the result for the uploaded media.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadChunkedAsync(System.IO.Stream,CoreTweet.UploadMediaType,System.String,System.Collections.Generic.IEnumerable{System.Int64},System.Threading.CancellationToken,System.IProgress{CoreTweet.UploadChunkedProgressInfo})">
            <summary>
            Uploads videos or chunked images to Twitter for use in a Tweet or Twitter-hosted Card as an asynchronous operation.
            </summary>
            <param name="media">The raw binary file content being uploaded.</param>
            <param name="mediaType">The type of the media being uploaded.</param>
            <param name="media_category">A string enum value which identifies a media usecase.</param>
            <param name="additional_owners">A comma-separated string of user IDs to set as additional owners who are allowed to use the returned media_id in Tweets or Cards.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The result for the uploaded media.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadChunkedWithRetryAsync(System.IO.Stream,System.Int64,CoreTweet.UploadMediaType,System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Uploads videos or chunked images to Twitter for use in a Tweet or Twitter-hosted Card as an asynchronous operation.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> media_category (optional)</para>
            <para>- <c>IEnumerbale&lt;long&gt;</c> additional_owners (optional)</para>
            </summary>
            <param name="media">The raw binary file content being uploaded.</param>
            <param name="totalBytes">The size of the media being uploaded in bytes.</param>
            <param name="mediaType">The type of the media being uploaded.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the result for the uploaded media.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadChunkedWithRetryAsync(System.IO.Stream,CoreTweet.UploadMediaType,System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Uploads videos or chunked images to Twitter for use in a Tweet or Twitter-hosted Card as an asynchronous operation.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> media_category (optional)</para>
            <para>- <c>IEnumerbale&lt;long&gt;</c> additional_owners (optional)</para>
            </summary>
            <param name="media">The raw binary file content being uploaded.</param>
            <param name="mediaType">The type of the media being uploaded.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the result for the uploaded media.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadChunkedWithRetryAsync(System.IO.Stream,System.Int64,CoreTweet.UploadMediaType,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken,System.IProgress{CoreTweet.UploadChunkedProgressInfo})">
            <summary>
            <para>Uploads videos or chunked images to Twitter for use in a Tweet or Twitter-hosted Card as an asynchronous operation.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> media_category (optional)</para>
            <para>- <c>IEnumerbale&lt;long&gt;</c> additional_owners (optional)</para>
            </summary>
            <param name="media">The raw binary file content being uploaded.</param>
            <param name="totalBytes">The size of the media being uploaded in bytes.</param>
            <param name="mediaType">The type of the media being uploaded.</param>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the result for the uploaded media.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadChunkedWithRetryAsync(System.IO.Stream,System.Int64,CoreTweet.UploadMediaType,System.Int32,System.Int32,System.Object,System.Threading.CancellationToken,System.IProgress{CoreTweet.UploadChunkedProgressInfo})">
            <summary>
            <para>Uploads videos or chunked images to Twitter for use in a Tweet or Twitter-hosted Card as an asynchronous operation.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> media_category (optional)</para>
            <para>- <c>IEnumerbale&lt;long&gt;</c> additional_owners (optional)</para>
            </summary>
            <param name="media">The raw binary file content being uploaded.</param>
            <param name="totalBytes">The size of the media being uploaded in bytes.</param>
            <param name="mediaType">The type of the media being uploaded.</param>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the result for the uploaded media.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadChunkedWithRetryAsync(System.IO.Stream,System.Int64,CoreTweet.UploadMediaType,System.Int32,System.Int32,System.String,System.Collections.Generic.IEnumerable{System.Int64},System.Threading.CancellationToken,System.IProgress{CoreTweet.UploadChunkedProgressInfo})">
            <summary>
            Uploads videos or chunked images to Twitter for use in a Tweet or Twitter-hosted Card as an asynchronous operation.
            </summary>
            <param name="media">The raw binary file content being uploaded.</param>
            <param name="totalBytes">The size of the media being uploaded in bytes.</param>
            <param name="mediaType">The type of the media being uploaded.</param>
            <param name="media_category">A string enum value which identifies a media usecase.</param>
            <param name="additional_owners">A comma-separated string of user IDs to set as additional owners who are allowed to use the returned media_id in Tweets or Cards.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The result for the uploaded media.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadChunkedWithRetryAsync(System.IO.Stream,CoreTweet.UploadMediaType,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken,System.IProgress{CoreTweet.UploadChunkedProgressInfo})">
            <summary>
            <para>Uploads videos or chunked images to Twitter for use in a Tweet or Twitter-hosted Card as an asynchronous operation.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> media_category (optional)</para>
            <para>- <c>IEnumerbale&lt;long&gt;</c> additional_owners (optional)</para>
            </summary>
            <param name="media">The raw binary file content being uploaded.</param>
            <param name="mediaType">The type of the media being uploaded.</param>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the result for the uploaded media.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadChunkedWithRetryAsync(System.IO.Stream,CoreTweet.UploadMediaType,System.Object,System.Int32,System.Int32,System.Threading.CancellationToken,System.IProgress{CoreTweet.UploadChunkedProgressInfo})">
            <summary>
            <para>Uploads videos or chunked images to Twitter for use in a Tweet or Twitter-hosted Card as an asynchronous operation.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> media_category (optional)</para>
            <para>- <c>IEnumerbale&lt;long&gt;</c> additional_owners (optional)</para>
            </summary>
            <param name="media">The raw binary file content being uploaded.</param>
            <param name="mediaType">The type of the media being uploaded.</param>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            <para>The task object representing the asynchronous operation.</para>
            <para>The Result property on the task object returns the result for the uploaded media.</para>
            </returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadChunkedWithRetryAsync(System.IO.Stream,CoreTweet.UploadMediaType,System.Int32,System.Int32,System.String,System.Collections.Generic.IEnumerable{System.Int64},System.Threading.CancellationToken,System.IProgress{CoreTweet.UploadChunkedProgressInfo})">
            <summary>
            Uploads videos or chunked images to Twitter for use in a Tweet or Twitter-hosted Card as an asynchronous operation.
            </summary>
            <param name="media">The raw binary file content being uploaded.</param>
            <param name="mediaType">The type of the media being uploaded.</param>
            <param name="media_category">A string enum value which identifies a media usecase.</param>
            <param name="additional_owners">A comma-separated string of user IDs to set as additional owners who are allowed to use the returned media_id in Tweets or Cards.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The result for the uploaded media.</returns>
        </member>
        <member name="P:CoreTweet.Rest.Media.Metadata">
            <summary>
            Gets the wrapper of media/metadata.
            </summary>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadChunked(System.IO.Stream,System.Int64,CoreTweet.UploadMediaType,System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Uploads videos or chunked images to Twitter for use in a Tweet or Twitter-hosted Card.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> media_category (optional)</para>
            <para>- <c>IEnumerbale&lt;long&gt;</c> additional_owners (optional)</para>
            </summary>
            <param name="media">The raw binary file content being uploaded.</param>
            <param name="totalBytes">The size of the media being uploaded in bytes.</param>
            <param name="mediaType">The type of the media being uploaded.</param>
            <param name="parameters">The parameters.</param>
            <returns>The result for the uploaded media.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadChunked(System.IO.Stream,System.Int64,CoreTweet.UploadMediaType,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Uploads videos or chunked images to Twitter for use in a Tweet or Twitter-hosted Card.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> media_category (optional)</para>
            <para>- <c>IEnumerbale&lt;long&gt;</c> additional_owners (optional)</para>
            </summary>
            <param name="media">The raw binary file content being uploaded.</param>
            <param name="totalBytes">The size of the media being uploaded in bytes.</param>
            <param name="mediaType">The type of the media being uploaded.</param>
            <param name="parameters">The parameters.</param>
            <returns>The result for the uploaded media.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadChunked(System.IO.Stream,System.Int64,CoreTweet.UploadMediaType,System.Object)">
            <summary>
            <para>Uploads videos or chunked images to Twitter for use in a Tweet or Twitter-hosted Card.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> media_category (optional)</para>
            <para>- <c>IEnumerbale&lt;long&gt;</c> additional_owners (optional)</para>
            </summary>
            <param name="media">The raw binary file content being uploaded.</param>
            <param name="totalBytes">The size of the media being uploaded in bytes.</param>
            <param name="mediaType">The type of the media being uploaded.</param>
            <param name="parameters">The parameters.</param>
            <returns>The result for the uploaded media.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadChunked(System.IO.Stream,System.Int64,CoreTweet.UploadMediaType,System.String,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Uploads videos or chunked images to Twitter for use in a Tweet or Twitter-hosted Card.
            </summary>
            <param name="media">The raw binary file content being uploaded.</param>
            <param name="totalBytes">The size of the media being uploaded in bytes.</param>
            <param name="mediaType">The type of the media being uploaded.</param>
            <param name="media_category">A string enum value which identifies a media usecase.</param>
            <param name="additional_owners">A comma-separated string of user IDs to set as additional owners who are allowed to use the returned media_id in Tweets or Cards.</param>
            <returns>The result for the uploaded media.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadChunked(System.IO.Stream,CoreTweet.UploadMediaType,System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Uploads videos or chunked images to Twitter for use in a Tweet or Twitter-hosted Card.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> media_category (optional)</para>
            <para>- <c>IEnumerbale&lt;long&gt;</c> additional_owners (optional)</para>
            </summary>
            <param name="media">The raw binary file content being uploaded.</param>
            <param name="mediaType">The type of the media being uploaded.</param>
            <param name="parameters">The parameters.</param>
            <returns>The result for the uploaded media.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadChunked(System.IO.Stream,CoreTweet.UploadMediaType,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Uploads videos or chunked images to Twitter for use in a Tweet or Twitter-hosted Card.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> media_category (optional)</para>
            <para>- <c>IEnumerbale&lt;long&gt;</c> additional_owners (optional)</para>
            </summary>
            <param name="media">The raw binary file content being uploaded.</param>
            <param name="mediaType">The type of the media being uploaded.</param>
            <param name="parameters">The parameters.</param>
            <returns>The result for the uploaded media.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadChunked(System.IO.Stream,CoreTweet.UploadMediaType,System.Object)">
            <summary>
            <para>Uploads videos or chunked images to Twitter for use in a Tweet or Twitter-hosted Card.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> media_category (optional)</para>
            <para>- <c>IEnumerbale&lt;long&gt;</c> additional_owners (optional)</para>
            </summary>
            <param name="media">The raw binary file content being uploaded.</param>
            <param name="mediaType">The type of the media being uploaded.</param>
            <param name="parameters">The parameters.</param>
            <returns>The result for the uploaded media.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Media.UploadChunked(System.IO.Stream,CoreTweet.UploadMediaType,System.String,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Uploads videos or chunked images to Twitter for use in a Tweet or Twitter-hosted Card.
            </summary>
            <param name="media">The raw binary file content being uploaded.</param>
            <param name="mediaType">The type of the media being uploaded.</param>
            <param name="media_category">A string enum value which identifies a media usecase.</param>
            <param name="additional_owners">A comma-separated string of user IDs to set as additional owners who are allowed to use the returned media_id in Tweets or Cards.</param>
            <returns>The result for the uploaded media.</returns>
        </member>
        <member name="T:CoreTweet.Rest.MediaMetadata">
            <summary>
            Provides a set of methods for the wrapper of POST media/metadata.
            </summary>
        </member>
        <member name="M:CoreTweet.Rest.MediaMetadata.Create(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Provides additional information about the uploaded media_id.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> media_id (required)</para>
            <para>- <c>string</c> alt_text (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.MediaMetadata.Create(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Provides additional information about the uploaded media_id.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> media_id (required)</para>
            <para>- <c>string</c> alt_text (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.MediaMetadata.Create(System.Object)">
            <summary>
            <para>Provides additional information about the uploaded media_id.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> media_id (required)</para>
            <para>- <c>string</c> alt_text (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.MediaMetadata.Create(System.String,System.String)">
            <summary>
            <para>Provides additional information about the uploaded media_id.</para>
            </summary>
            <param name="media_id">required.</param>
            <param name="alt_text">required.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.MediaMetadata.CreateAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Provides additional information about the uploaded media_id.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> media_id (required)</para>
            <para>- <c>string</c> alt_text (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.MediaMetadata.CreateAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Provides additional information about the uploaded media_id.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> media_id (required)</para>
            <para>- <c>string</c> alt_text (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.MediaMetadata.CreateAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Provides additional information about the uploaded media_id.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> media_id (required)</para>
            <para>- <c>string</c> alt_text (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.MediaMetadata.CreateAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Provides additional information about the uploaded media_id.</para>
            </summary>
            <param name="media_id">required.</param>
            <param name="alt_text">required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="T:CoreTweet.Rest.MutesUsers">
            <summary>
            Provides a set of methods for the wrapper of GET/POST mutes/users.
            </summary>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.Ids(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns an array of numeric user ids the authenticating user has muted.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.Ids(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns an array of numeric user ids the authenticating user has muted.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.Ids(System.Object)">
            <summary>
            <para>Returns an array of numeric user ids the authenticating user has muted.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.EnumerateIds(CoreTweet.EnumerateMode,System.Nullable{System.Int64})">
            <summary>
            <para>Returns an array of numeric user ids the authenticating user has muted.</para>
            </summary>
            <param name="cursor">optional.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.Ids(System.Nullable{System.Int64})">
            <summary>
            <para>Returns an array of numeric user ids the authenticating user has muted.</para>
            </summary>
            <param name="cursor">optional.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.EnumerateIds(CoreTweet.EnumerateMode,System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns an array of numeric user ids the authenticating user has muted.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.EnumerateIds(CoreTweet.EnumerateMode,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns an array of numeric user ids the authenticating user has muted.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.EnumerateIds(CoreTweet.EnumerateMode,System.Object)">
            <summary>
            <para>Returns an array of numeric user ids the authenticating user has muted.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.IdsAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns an array of numeric user ids the authenticating user has muted.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.IdsAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns an array of numeric user ids the authenticating user has muted.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.IdsAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns an array of numeric user ids the authenticating user has muted.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.IdsAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            <para>Returns an array of numeric user ids the authenticating user has muted.</para>
            </summary>
            <param name="cursor">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.List(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns an array of user objects the authenticating user has muted.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> cursor (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.List(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns an array of user objects the authenticating user has muted.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> cursor (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.List(System.Object)">
            <summary>
            <para>Returns an array of user objects the authenticating user has muted.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> cursor (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.EnumerateList(CoreTweet.EnumerateMode,System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Returns an array of user objects the authenticating user has muted.</para>
            </summary>
            <param name="cursor">optional.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.List(System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Returns an array of user objects the authenticating user has muted.</para>
            </summary>
            <param name="cursor">optional.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.EnumerateList(CoreTweet.EnumerateMode,System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns an array of user objects the authenticating user has muted.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> cursor (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.EnumerateList(CoreTweet.EnumerateMode,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns an array of user objects the authenticating user has muted.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> cursor (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.EnumerateList(CoreTweet.EnumerateMode,System.Object)">
            <summary>
            <para>Returns an array of user objects the authenticating user has muted.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> cursor (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.ListAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns an array of user objects the authenticating user has muted.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> cursor (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.ListAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns an array of user objects the authenticating user has muted.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> cursor (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.ListAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns an array of user objects the authenticating user has muted.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> cursor (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.ListAsync(System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Returns an array of user objects the authenticating user has muted.</para>
            </summary>
            <param name="cursor">optional.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.Create(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Mutes the user specified in the ID parameter for the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The muted user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.Create(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Mutes the user specified in the ID parameter for the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The muted user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.Create(System.Object)">
            <summary>
            <para>Mutes the user specified in the ID parameter for the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The muted user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.Create(System.String,System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Mutes the user specified in the ID parameter for the authenticating user.</para>
            </summary>
            <param name="screen_name">any one is required.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The muted user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.Create(System.Int64,System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Mutes the user specified in the ID parameter for the authenticating user.</para>
            </summary>
            <param name="user_id">any one is required.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The muted user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.CreateAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Mutes the user specified in the ID parameter for the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The muted user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.CreateAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Mutes the user specified in the ID parameter for the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The muted user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.CreateAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Mutes the user specified in the ID parameter for the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The muted user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.CreateAsync(System.String,System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Mutes the user specified in the ID parameter for the authenticating user.</para>
            </summary>
            <param name="screen_name">any one is required.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The muted user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.CreateAsync(System.Int64,System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Mutes the user specified in the ID parameter for the authenticating user.</para>
            </summary>
            <param name="user_id">any one is required.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The muted user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.Destroy(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Un-mutes the user specified in the ID parameter for the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The unmuted user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.Destroy(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Un-mutes the user specified in the ID parameter for the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The unmuted user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.Destroy(System.Object)">
            <summary>
            <para>Un-mutes the user specified in the ID parameter for the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The unmuted user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.Destroy(System.String,System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Un-mutes the user specified in the ID parameter for the authenticating user.</para>
            </summary>
            <param name="screen_name">any one is required.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The unmuted user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.Destroy(System.Int64,System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Un-mutes the user specified in the ID parameter for the authenticating user.</para>
            </summary>
            <param name="user_id">any one is required.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The unmuted user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.DestroyAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Un-mutes the user specified in the ID parameter for the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The unmuted user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.DestroyAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Un-mutes the user specified in the ID parameter for the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The unmuted user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.DestroyAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Un-mutes the user specified in the ID parameter for the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The unmuted user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.DestroyAsync(System.String,System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Un-mutes the user specified in the ID parameter for the authenticating user.</para>
            </summary>
            <param name="screen_name">any one is required.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The unmuted user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.MutesUsers.DestroyAsync(System.Int64,System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Un-mutes the user specified in the ID parameter for the authenticating user.</para>
            </summary>
            <param name="user_id">any one is required.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The unmuted user.</returns>
        </member>
        <member name="T:CoreTweet.Rest.SavedSearches">
            <summary>
            Provides a set of methods for the wrapper of GET/POST saved_searches.
            </summary>
        </member>
        <member name="M:CoreTweet.Rest.SavedSearches.List(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the authenticated user’s saved search queries.</para>
            <para>Available parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The saved searches.</returns>
        </member>
        <member name="M:CoreTweet.Rest.SavedSearches.List(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns the authenticated user’s saved search queries.</para>
            <para>Available parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The saved searches.</returns>
        </member>
        <member name="M:CoreTweet.Rest.SavedSearches.List(System.Object)">
            <summary>
            <para>Returns the authenticated user’s saved search queries.</para>
            <para>Available parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The saved searches.</returns>
        </member>
        <member name="M:CoreTweet.Rest.SavedSearches.List">
            <summary>
            <para>Returns the authenticated user’s saved search queries.</para>
            </summary>
            <returns>The saved searches.</returns>
        </member>
        <member name="M:CoreTweet.Rest.SavedSearches.ListAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the authenticated user’s saved search queries.</para>
            <para>Available parameters:</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The saved searches.</returns>
        </member>
        <member name="M:CoreTweet.Rest.SavedSearches.ListAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns the authenticated user’s saved search queries.</para>
            <para>Available parameters:</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The saved searches.</returns>
        </member>
        <member name="M:CoreTweet.Rest.SavedSearches.ListAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns the authenticated user’s saved search queries.</para>
            <para>Available parameters:</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The saved searches.</returns>
        </member>
        <member name="M:CoreTweet.Rest.SavedSearches.ListAsync(System.Threading.CancellationToken)">
            <summary>
            <para>Returns the authenticated user’s saved search queries.</para>
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The saved searches.</returns>
        </member>
        <member name="M:CoreTweet.Rest.SavedSearches.Show(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Retrieve the information for the saved search represented by the given id.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The saved search.</returns>
        </member>
        <member name="M:CoreTweet.Rest.SavedSearches.Show(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Retrieve the information for the saved search represented by the given id.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The saved search.</returns>
        </member>
        <member name="M:CoreTweet.Rest.SavedSearches.Show(System.Object)">
            <summary>
            <para>Retrieve the information for the saved search represented by the given id.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The saved search.</returns>
        </member>
        <member name="M:CoreTweet.Rest.SavedSearches.Show(System.Int64)">
            <summary>
            <para>Retrieve the information for the saved search represented by the given id.</para>
            </summary>
            <param name="id">required.</param>
            <returns>The saved search.</returns>
        </member>
        <member name="M:CoreTweet.Rest.SavedSearches.ShowAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Retrieve the information for the saved search represented by the given id.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The saved search.</returns>
        </member>
        <member name="M:CoreTweet.Rest.SavedSearches.ShowAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Retrieve the information for the saved search represented by the given id.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The saved search.</returns>
        </member>
        <member name="M:CoreTweet.Rest.SavedSearches.ShowAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Retrieve the information for the saved search represented by the given id.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The saved search.</returns>
        </member>
        <member name="M:CoreTweet.Rest.SavedSearches.ShowAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            <para>Retrieve the information for the saved search represented by the given id.</para>
            </summary>
            <param name="id">required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The saved search.</returns>
        </member>
        <member name="M:CoreTweet.Rest.SavedSearches.Create(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Create a new saved search for the authenticated user.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> query (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The saved search.</returns>
        </member>
        <member name="M:CoreTweet.Rest.SavedSearches.Create(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Create a new saved search for the authenticated user.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> query (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The saved search.</returns>
        </member>
        <member name="M:CoreTweet.Rest.SavedSearches.Create(System.Object)">
            <summary>
            <para>Create a new saved search for the authenticated user.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> query (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The saved search.</returns>
        </member>
        <member name="M:CoreTweet.Rest.SavedSearches.Create(System.String)">
            <summary>
            <para>Create a new saved search for the authenticated user.</para>
            </summary>
            <param name="query">required.</param>
            <returns>The saved search.</returns>
        </member>
        <member name="M:CoreTweet.Rest.SavedSearches.CreateAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Create a new saved search for the authenticated user.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> query (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The saved search.</returns>
        </member>
        <member name="M:CoreTweet.Rest.SavedSearches.CreateAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Create a new saved search for the authenticated user.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> query (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The saved search.</returns>
        </member>
        <member name="M:CoreTweet.Rest.SavedSearches.CreateAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Create a new saved search for the authenticated user.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> query (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The saved search.</returns>
        </member>
        <member name="M:CoreTweet.Rest.SavedSearches.CreateAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Create a new saved search for the authenticated user.</para>
            </summary>
            <param name="query">required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The saved search.</returns>
        </member>
        <member name="M:CoreTweet.Rest.SavedSearches.Destroy(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Destroys a saved search for the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The saved search.</returns>
        </member>
        <member name="M:CoreTweet.Rest.SavedSearches.Destroy(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Destroys a saved search for the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The saved search.</returns>
        </member>
        <member name="M:CoreTweet.Rest.SavedSearches.Destroy(System.Object)">
            <summary>
            <para>Destroys a saved search for the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The saved search.</returns>
        </member>
        <member name="M:CoreTweet.Rest.SavedSearches.Destroy(System.Int64)">
            <summary>
            <para>Destroys a saved search for the authenticating user.</para>
            </summary>
            <param name="id">required.</param>
            <returns>The saved search.</returns>
        </member>
        <member name="M:CoreTweet.Rest.SavedSearches.DestroyAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Destroys a saved search for the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The saved search.</returns>
        </member>
        <member name="M:CoreTweet.Rest.SavedSearches.DestroyAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Destroys a saved search for the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The saved search.</returns>
        </member>
        <member name="M:CoreTweet.Rest.SavedSearches.DestroyAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Destroys a saved search for the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The saved search.</returns>
        </member>
        <member name="M:CoreTweet.Rest.SavedSearches.DestroyAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            <para>Destroys a saved search for the authenticating user.</para>
            </summary>
            <param name="id">required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The saved search.</returns>
        </member>
        <member name="T:CoreTweet.Rest.Search">
            <summary>
            Provides a set of methods for the wrapper of GET search.
            </summary>
        </member>
        <member name="M:CoreTweet.Rest.Search.Tweets(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a collection of relevant Tweets matching a specified query.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> q (required)</para>
            <para>- <c>string</c> geocode (optional)</para>
            <para>- <c>string</c> lang (optional)</para>
            <para>- <c>string</c> locale (optional)</para>
            <para>- <c>string</c> result_type (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>string</c> until (optional)</para>
            <para>- <c>long</c> since_id (optional)</para>
            <para>- <c>long</c> max_id (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Search.Tweets(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns a collection of relevant Tweets matching a specified query.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> q (required)</para>
            <para>- <c>string</c> geocode (optional)</para>
            <para>- <c>string</c> lang (optional)</para>
            <para>- <c>string</c> locale (optional)</para>
            <para>- <c>string</c> result_type (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>string</c> until (optional)</para>
            <para>- <c>long</c> since_id (optional)</para>
            <para>- <c>long</c> max_id (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Search.Tweets(System.Object)">
            <summary>
            <para>Returns a collection of relevant Tweets matching a specified query.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> q (required)</para>
            <para>- <c>string</c> geocode (optional)</para>
            <para>- <c>string</c> lang (optional)</para>
            <para>- <c>string</c> locale (optional)</para>
            <para>- <c>string</c> result_type (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>string</c> until (optional)</para>
            <para>- <c>long</c> since_id (optional)</para>
            <para>- <c>long</c> max_id (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Search.Tweets(System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Returns a collection of relevant Tweets matching a specified query.</para>
            </summary>
            <param name="q">required.</param>
            <param name="geocode">optional.</param>
            <param name="lang">optional.</param>
            <param name="locale">optional.</param>
            <param name="result_type">optional.</param>
            <param name="count">optional.</param>
            <param name="until">optional.</param>
            <param name="since_id">optional.</param>
            <param name="max_id">optional.</param>
            <param name="include_entities">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Search.TweetsAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a collection of relevant Tweets matching a specified query.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> q (required)</para>
            <para>- <c>string</c> geocode (optional)</para>
            <para>- <c>string</c> lang (optional)</para>
            <para>- <c>string</c> locale (optional)</para>
            <para>- <c>string</c> result_type (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>string</c> until (optional)</para>
            <para>- <c>long</c> since_id (optional)</para>
            <para>- <c>long</c> max_id (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Search.TweetsAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a collection of relevant Tweets matching a specified query.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> q (required)</para>
            <para>- <c>string</c> geocode (optional)</para>
            <para>- <c>string</c> lang (optional)</para>
            <para>- <c>string</c> locale (optional)</para>
            <para>- <c>string</c> result_type (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>string</c> until (optional)</para>
            <para>- <c>long</c> since_id (optional)</para>
            <para>- <c>long</c> max_id (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Search.TweetsAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns a collection of relevant Tweets matching a specified query.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> q (required)</para>
            <para>- <c>string</c> geocode (optional)</para>
            <para>- <c>string</c> lang (optional)</para>
            <para>- <c>string</c> locale (optional)</para>
            <para>- <c>string</c> result_type (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>string</c> until (optional)</para>
            <para>- <c>long</c> since_id (optional)</para>
            <para>- <c>long</c> max_id (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Search.TweetsAsync(System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a collection of relevant Tweets matching a specified query.</para>
            </summary>
            <param name="q">required.</param>
            <param name="geocode">optional.</param>
            <param name="lang">optional.</param>
            <param name="locale">optional.</param>
            <param name="result_type">optional.</param>
            <param name="count">optional.</param>
            <param name="until">optional.</param>
            <param name="since_id">optional.</param>
            <param name="max_id">optional.</param>
            <param name="include_entities">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="T:CoreTweet.Rest.Statuses">
            <summary>
            Provides a set of methods for the wrapper of GET/POST statuses.
            </summary>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.MentionsTimeline(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the most recent mentions (tweets containing a users's &#64;screen_name) for the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> since_id (optional)</para>
            <para>- <c>long</c> max_id (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> contributor_details (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.MentionsTimeline(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns the most recent mentions (tweets containing a users's &#64;screen_name) for the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> since_id (optional)</para>
            <para>- <c>long</c> max_id (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> contributor_details (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.MentionsTimeline(System.Object)">
            <summary>
            <para>Returns the most recent mentions (tweets containing a users's &#64;screen_name) for the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> since_id (optional)</para>
            <para>- <c>long</c> max_id (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> contributor_details (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.MentionsTimeline(System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Returns the most recent mentions (tweets containing a users's &#64;screen_name) for the authenticating user.</para>
            </summary>
            <param name="count">optional.</param>
            <param name="since_id">optional.</param>
            <param name="max_id">optional.</param>
            <param name="trim_user">optional.</param>
            <param name="contributor_details">optional.</param>
            <param name="include_entities">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.MentionsTimelineAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the most recent mentions (tweets containing a users's &#64;screen_name) for the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> since_id (optional)</para>
            <para>- <c>long</c> max_id (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> contributor_details (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.MentionsTimelineAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns the most recent mentions (tweets containing a users's &#64;screen_name) for the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> since_id (optional)</para>
            <para>- <c>long</c> max_id (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> contributor_details (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.MentionsTimelineAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns the most recent mentions (tweets containing a users's &#64;screen_name) for the authenticating user.</para>
            <para>Available parameters:</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> since_id (optional)</para>
            <para>- <c>long</c> max_id (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> contributor_details (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.MentionsTimelineAsync(System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Returns the most recent mentions (tweets containing a users's &#64;screen_name) for the authenticating user.</para>
            </summary>
            <param name="count">optional.</param>
            <param name="since_id">optional.</param>
            <param name="max_id">optional.</param>
            <param name="trim_user">optional.</param>
            <param name="contributor_details">optional.</param>
            <param name="include_entities">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.UserTimeline(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a collection of the most recent Tweets posted by the user indicated by the screen_name or user_id parameters.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> since_id (optional)</para>
            <para>- <c>long</c> max_id (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> exclude_replies (optional)</para>
            <para>- <c>bool</c> contributor_details (optional)</para>
            <para>- <c>bool</c> include_rts (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.UserTimeline(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns a collection of the most recent Tweets posted by the user indicated by the screen_name or user_id parameters.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> since_id (optional)</para>
            <para>- <c>long</c> max_id (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> exclude_replies (optional)</para>
            <para>- <c>bool</c> contributor_details (optional)</para>
            <para>- <c>bool</c> include_rts (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.UserTimeline(System.Object)">
            <summary>
            <para>Returns a collection of the most recent Tweets posted by the user indicated by the screen_name or user_id parameters.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> since_id (optional)</para>
            <para>- <c>long</c> max_id (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> exclude_replies (optional)</para>
            <para>- <c>bool</c> contributor_details (optional)</para>
            <para>- <c>bool</c> include_rts (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.UserTimeline(System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Returns a collection of the most recent Tweets posted by the user indicated by the screen_name or user_id parameters.</para>
            </summary>
            <param name="count">optional.</param>
            <param name="since_id">optional.</param>
            <param name="max_id">optional.</param>
            <param name="trim_user">optional.</param>
            <param name="exclude_replies">optional.</param>
            <param name="contributor_details">optional.</param>
            <param name="include_rts">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.UserTimeline(System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Returns a collection of the most recent Tweets posted by the user indicated by the screen_name or user_id parameters.</para>
            </summary>
            <param name="user_id">any one is required.</param>
            <param name="count">optional.</param>
            <param name="since_id">optional.</param>
            <param name="max_id">optional.</param>
            <param name="trim_user">optional.</param>
            <param name="exclude_replies">optional.</param>
            <param name="contributor_details">optional.</param>
            <param name="include_rts">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.UserTimeline(System.String,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Returns a collection of the most recent Tweets posted by the user indicated by the screen_name or user_id parameters.</para>
            </summary>
            <param name="screen_name">any one is required.</param>
            <param name="count">optional.</param>
            <param name="since_id">optional.</param>
            <param name="max_id">optional.</param>
            <param name="trim_user">optional.</param>
            <param name="exclude_replies">optional.</param>
            <param name="contributor_details">optional.</param>
            <param name="include_rts">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.UserTimelineAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a collection of the most recent Tweets posted by the user indicated by the screen_name or user_id parameters.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> since_id (optional)</para>
            <para>- <c>long</c> max_id (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> exclude_replies (optional)</para>
            <para>- <c>bool</c> contributor_details (optional)</para>
            <para>- <c>bool</c> include_rts (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.UserTimelineAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a collection of the most recent Tweets posted by the user indicated by the screen_name or user_id parameters.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> since_id (optional)</para>
            <para>- <c>long</c> max_id (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> exclude_replies (optional)</para>
            <para>- <c>bool</c> contributor_details (optional)</para>
            <para>- <c>bool</c> include_rts (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.UserTimelineAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns a collection of the most recent Tweets posted by the user indicated by the screen_name or user_id parameters.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> since_id (optional)</para>
            <para>- <c>long</c> max_id (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> exclude_replies (optional)</para>
            <para>- <c>bool</c> contributor_details (optional)</para>
            <para>- <c>bool</c> include_rts (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.UserTimelineAsync(System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a collection of the most recent Tweets posted by the user indicated by the screen_name or user_id parameters.</para>
            </summary>
            <param name="count">optional.</param>
            <param name="since_id">optional.</param>
            <param name="max_id">optional.</param>
            <param name="trim_user">optional.</param>
            <param name="exclude_replies">optional.</param>
            <param name="contributor_details">optional.</param>
            <param name="include_rts">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.UserTimelineAsync(System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a collection of the most recent Tweets posted by the user indicated by the screen_name or user_id parameters.</para>
            </summary>
            <param name="user_id">any one is required.</param>
            <param name="count">optional.</param>
            <param name="since_id">optional.</param>
            <param name="max_id">optional.</param>
            <param name="trim_user">optional.</param>
            <param name="exclude_replies">optional.</param>
            <param name="contributor_details">optional.</param>
            <param name="include_rts">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.UserTimelineAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a collection of the most recent Tweets posted by the user indicated by the screen_name or user_id parameters.</para>
            </summary>
            <param name="screen_name">any one is required.</param>
            <param name="count">optional.</param>
            <param name="since_id">optional.</param>
            <param name="max_id">optional.</param>
            <param name="trim_user">optional.</param>
            <param name="exclude_replies">optional.</param>
            <param name="contributor_details">optional.</param>
            <param name="include_rts">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.HomeTimeline(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a collection of the most recent Tweets and retweets posted by the authenticating user and the users they follow.</para>
            <para>Available parameters:</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> since_id (optional)</para>
            <para>- <c>long</c> max_id (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> exclude_replies (optional)</para>
            <para>- <c>bool</c> contributor_details (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.HomeTimeline(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns a collection of the most recent Tweets and retweets posted by the authenticating user and the users they follow.</para>
            <para>Available parameters:</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> since_id (optional)</para>
            <para>- <c>long</c> max_id (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> exclude_replies (optional)</para>
            <para>- <c>bool</c> contributor_details (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.HomeTimeline(System.Object)">
            <summary>
            <para>Returns a collection of the most recent Tweets and retweets posted by the authenticating user and the users they follow.</para>
            <para>Available parameters:</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> since_id (optional)</para>
            <para>- <c>long</c> max_id (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> exclude_replies (optional)</para>
            <para>- <c>bool</c> contributor_details (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.HomeTimeline(System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Returns a collection of the most recent Tweets and retweets posted by the authenticating user and the users they follow.</para>
            </summary>
            <param name="count">optional.</param>
            <param name="since_id">optional.</param>
            <param name="max_id">optional.</param>
            <param name="trim_user">optional.</param>
            <param name="exclude_replies">optional.</param>
            <param name="contributor_details">optional.</param>
            <param name="include_entities">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.HomeTimelineAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a collection of the most recent Tweets and retweets posted by the authenticating user and the users they follow.</para>
            <para>Available parameters:</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> since_id (optional)</para>
            <para>- <c>long</c> max_id (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> exclude_replies (optional)</para>
            <para>- <c>bool</c> contributor_details (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.HomeTimelineAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a collection of the most recent Tweets and retweets posted by the authenticating user and the users they follow.</para>
            <para>Available parameters:</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> since_id (optional)</para>
            <para>- <c>long</c> max_id (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> exclude_replies (optional)</para>
            <para>- <c>bool</c> contributor_details (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.HomeTimelineAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns a collection of the most recent Tweets and retweets posted by the authenticating user and the users they follow.</para>
            <para>Available parameters:</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> since_id (optional)</para>
            <para>- <c>long</c> max_id (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> exclude_replies (optional)</para>
            <para>- <c>bool</c> contributor_details (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.HomeTimelineAsync(System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a collection of the most recent Tweets and retweets posted by the authenticating user and the users they follow.</para>
            </summary>
            <param name="count">optional.</param>
            <param name="since_id">optional.</param>
            <param name="max_id">optional.</param>
            <param name="trim_user">optional.</param>
            <param name="exclude_replies">optional.</param>
            <param name="contributor_details">optional.</param>
            <param name="include_entities">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.RetweetsOfMe(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the most recent tweets authored by the authenticating user that have recently been retweeted by others.</para>
            <para>Available parameters:</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> since_id (optional)</para>
            <para>- <c>long</c> max_id (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_user_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.RetweetsOfMe(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns the most recent tweets authored by the authenticating user that have recently been retweeted by others.</para>
            <para>Available parameters:</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> since_id (optional)</para>
            <para>- <c>long</c> max_id (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_user_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.RetweetsOfMe(System.Object)">
            <summary>
            <para>Returns the most recent tweets authored by the authenticating user that have recently been retweeted by others.</para>
            <para>Available parameters:</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> since_id (optional)</para>
            <para>- <c>long</c> max_id (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_user_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.RetweetsOfMe(System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Returns the most recent tweets authored by the authenticating user that have recently been retweeted by others.</para>
            </summary>
            <param name="count">optional.</param>
            <param name="since_id">optional.</param>
            <param name="max_id">optional.</param>
            <param name="trim_user">optional.</param>
            <param name="include_entities">optional.</param>
            <param name="include_user_entities">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.RetweetsOfMeAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the most recent tweets authored by the authenticating user that have recently been retweeted by others.</para>
            <para>Available parameters:</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> since_id (optional)</para>
            <para>- <c>long</c> max_id (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_user_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.RetweetsOfMeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns the most recent tweets authored by the authenticating user that have recently been retweeted by others.</para>
            <para>Available parameters:</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> since_id (optional)</para>
            <para>- <c>long</c> max_id (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_user_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.RetweetsOfMeAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns the most recent tweets authored by the authenticating user that have recently been retweeted by others.</para>
            <para>Available parameters:</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>long</c> since_id (optional)</para>
            <para>- <c>long</c> max_id (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_user_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.RetweetsOfMeAsync(System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Returns the most recent tweets authored by the authenticating user that have recently been retweeted by others.</para>
            </summary>
            <param name="count">optional.</param>
            <param name="since_id">optional.</param>
            <param name="max_id">optional.</param>
            <param name="trim_user">optional.</param>
            <param name="include_entities">optional.</param>
            <param name="include_user_entities">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.Oembed(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns information allowing the creation of an embedded representation of a Tweet on third party sites.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (any one is required)</para>
            <para>- <c>string</c> url (any one is required)</para>
            <para>- <c>int</c> maxwidth (optional)</para>
            <para>- <c>bool</c> hide_media (optional)</para>
            <para>- <c>bool</c> hide_thread (optional)</para>
            <para>- <c>bool</c> omit_script (optional)</para>
            <para>- <c>string</c> align (optional)</para>
            <para>- <c>string</c> related (optional)</para>
            <para>- <c>string</c> lang (optional)</para>
            <para>- <c>string</c> widget_type (optional)</para>
            <para>- <c>bool</c> hide_tweet (optional)</para>
            <para>- <c>string</c> theme (optional)</para>
            <para>- <c>string</c> link_color (optional)</para>
            <para>- <c>bool</c> dnt (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The HTML code and more.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.Oembed(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns information allowing the creation of an embedded representation of a Tweet on third party sites.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (any one is required)</para>
            <para>- <c>string</c> url (any one is required)</para>
            <para>- <c>int</c> maxwidth (optional)</para>
            <para>- <c>bool</c> hide_media (optional)</para>
            <para>- <c>bool</c> hide_thread (optional)</para>
            <para>- <c>bool</c> omit_script (optional)</para>
            <para>- <c>string</c> align (optional)</para>
            <para>- <c>string</c> related (optional)</para>
            <para>- <c>string</c> lang (optional)</para>
            <para>- <c>string</c> widget_type (optional)</para>
            <para>- <c>bool</c> hide_tweet (optional)</para>
            <para>- <c>string</c> theme (optional)</para>
            <para>- <c>string</c> link_color (optional)</para>
            <para>- <c>bool</c> dnt (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The HTML code and more.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.Oembed(System.Object)">
            <summary>
            <para>Returns information allowing the creation of an embedded representation of a Tweet on third party sites.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (any one is required)</para>
            <para>- <c>string</c> url (any one is required)</para>
            <para>- <c>int</c> maxwidth (optional)</para>
            <para>- <c>bool</c> hide_media (optional)</para>
            <para>- <c>bool</c> hide_thread (optional)</para>
            <para>- <c>bool</c> omit_script (optional)</para>
            <para>- <c>string</c> align (optional)</para>
            <para>- <c>string</c> related (optional)</para>
            <para>- <c>string</c> lang (optional)</para>
            <para>- <c>string</c> widget_type (optional)</para>
            <para>- <c>bool</c> hide_tweet (optional)</para>
            <para>- <c>string</c> theme (optional)</para>
            <para>- <c>string</c> link_color (optional)</para>
            <para>- <c>bool</c> dnt (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The HTML code and more.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.Oembed(System.Int64,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            <para>Returns information allowing the creation of an embedded representation of a Tweet on third party sites.</para>
            </summary>
            <param name="id">any one is required.</param>
            <param name="maxwidth">optional.</param>
            <param name="hide_media">optional.</param>
            <param name="hide_thread">optional.</param>
            <param name="omit_script">optional.</param>
            <param name="align">optional.</param>
            <param name="related">optional.</param>
            <param name="lang">optional.</param>
            <param name="widget_type">optional.</param>
            <param name="hide_tweet">optional.</param>
            <param name="theme">optional.</param>
            <param name="link_color">optional.</param>
            <param name="dnt">optional.</param>
            <returns>The HTML code and more.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.Oembed(System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            <para>Returns information allowing the creation of an embedded representation of a Tweet on third party sites.</para>
            </summary>
            <param name="url">any one is required.</param>
            <param name="maxwidth">optional.</param>
            <param name="hide_media">optional.</param>
            <param name="hide_thread">optional.</param>
            <param name="omit_script">optional.</param>
            <param name="align">optional.</param>
            <param name="related">optional.</param>
            <param name="lang">optional.</param>
            <param name="widget_type">optional.</param>
            <param name="hide_tweet">optional.</param>
            <param name="theme">optional.</param>
            <param name="link_color">optional.</param>
            <param name="dnt">optional.</param>
            <returns>The HTML code and more.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.OembedAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns information allowing the creation of an embedded representation of a Tweet on third party sites.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (any one is required)</para>
            <para>- <c>string</c> url (any one is required)</para>
            <para>- <c>int</c> maxwidth (optional)</para>
            <para>- <c>bool</c> hide_media (optional)</para>
            <para>- <c>bool</c> hide_thread (optional)</para>
            <para>- <c>bool</c> omit_script (optional)</para>
            <para>- <c>string</c> align (optional)</para>
            <para>- <c>string</c> related (optional)</para>
            <para>- <c>string</c> lang (optional)</para>
            <para>- <c>string</c> widget_type (optional)</para>
            <para>- <c>bool</c> hide_tweet (optional)</para>
            <para>- <c>string</c> theme (optional)</para>
            <para>- <c>string</c> link_color (optional)</para>
            <para>- <c>bool</c> dnt (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The HTML code and more.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.OembedAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns information allowing the creation of an embedded representation of a Tweet on third party sites.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (any one is required)</para>
            <para>- <c>string</c> url (any one is required)</para>
            <para>- <c>int</c> maxwidth (optional)</para>
            <para>- <c>bool</c> hide_media (optional)</para>
            <para>- <c>bool</c> hide_thread (optional)</para>
            <para>- <c>bool</c> omit_script (optional)</para>
            <para>- <c>string</c> align (optional)</para>
            <para>- <c>string</c> related (optional)</para>
            <para>- <c>string</c> lang (optional)</para>
            <para>- <c>string</c> widget_type (optional)</para>
            <para>- <c>bool</c> hide_tweet (optional)</para>
            <para>- <c>string</c> theme (optional)</para>
            <para>- <c>string</c> link_color (optional)</para>
            <para>- <c>bool</c> dnt (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The HTML code and more.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.OembedAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns information allowing the creation of an embedded representation of a Tweet on third party sites.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (any one is required)</para>
            <para>- <c>string</c> url (any one is required)</para>
            <para>- <c>int</c> maxwidth (optional)</para>
            <para>- <c>bool</c> hide_media (optional)</para>
            <para>- <c>bool</c> hide_thread (optional)</para>
            <para>- <c>bool</c> omit_script (optional)</para>
            <para>- <c>string</c> align (optional)</para>
            <para>- <c>string</c> related (optional)</para>
            <para>- <c>string</c> lang (optional)</para>
            <para>- <c>string</c> widget_type (optional)</para>
            <para>- <c>bool</c> hide_tweet (optional)</para>
            <para>- <c>string</c> theme (optional)</para>
            <para>- <c>string</c> link_color (optional)</para>
            <para>- <c>bool</c> dnt (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The HTML code and more.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.OembedAsync(System.Int64,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.String,System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            <para>Returns information allowing the creation of an embedded representation of a Tweet on third party sites.</para>
            </summary>
            <param name="id">any one is required.</param>
            <param name="maxwidth">optional.</param>
            <param name="hide_media">optional.</param>
            <param name="hide_thread">optional.</param>
            <param name="omit_script">optional.</param>
            <param name="align">optional.</param>
            <param name="related">optional.</param>
            <param name="lang">optional.</param>
            <param name="widget_type">optional.</param>
            <param name="hide_tweet">optional.</param>
            <param name="theme">optional.</param>
            <param name="link_color">optional.</param>
            <param name="dnt">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The HTML code and more.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.OembedAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.String,System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            <para>Returns information allowing the creation of an embedded representation of a Tweet on third party sites.</para>
            </summary>
            <param name="url">any one is required.</param>
            <param name="maxwidth">optional.</param>
            <param name="hide_media">optional.</param>
            <param name="hide_thread">optional.</param>
            <param name="omit_script">optional.</param>
            <param name="align">optional.</param>
            <param name="related">optional.</param>
            <param name="lang">optional.</param>
            <param name="widget_type">optional.</param>
            <param name="hide_tweet">optional.</param>
            <param name="theme">optional.</param>
            <param name="link_color">optional.</param>
            <param name="dnt">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The HTML code and more.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.Show(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a single Tweet, specified by the id parameter.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> include_my_retweet (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.Show(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns a single Tweet, specified by the id parameter.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> include_my_retweet (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.Show(System.Object)">
            <summary>
            <para>Returns a single Tweet, specified by the id parameter.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> include_my_retweet (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.Show(System.Int64,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Returns a single Tweet, specified by the id parameter.</para>
            </summary>
            <param name="id">required.</param>
            <param name="trim_user">optional.</param>
            <param name="include_my_retweet">optional.</param>
            <param name="include_entities">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.ShowAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a single Tweet, specified by the id parameter.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> include_my_retweet (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.ShowAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a single Tweet, specified by the id parameter.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> include_my_retweet (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.ShowAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns a single Tweet, specified by the id parameter.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> include_my_retweet (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.ShowAsync(System.Int64,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a single Tweet, specified by the id parameter.</para>
            </summary>
            <param name="id">required.</param>
            <param name="trim_user">optional.</param>
            <param name="include_my_retweet">optional.</param>
            <param name="include_entities">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.Retweets(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns up to 100 of the first retweets of a given tweet.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.Retweets(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns up to 100 of the first retweets of a given tweet.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.Retweets(System.Object)">
            <summary>
            <para>Returns up to 100 of the first retweets of a given tweet.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.Retweets(System.Int64,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Returns up to 100 of the first retweets of a given tweet.</para>
            </summary>
            <param name="id">required.</param>
            <param name="count">optional.</param>
            <param name="trim_user">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.RetweetsAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns up to 100 of the first retweets of a given tweet.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.RetweetsAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns up to 100 of the first retweets of a given tweet.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.RetweetsAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns up to 100 of the first retweets of a given tweet.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.RetweetsAsync(System.Int64,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Returns up to 100 of the first retweets of a given tweet.</para>
            </summary>
            <param name="id">required.</param>
            <param name="count">optional.</param>
            <param name="trim_user">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.Lookup(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns fully-hydrated tweet objects for up to 100 tweets per request, as specified by comma-separated values passed to the id parameter.</para>
            <para>Available parameters:</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> id (required)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.Lookup(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns fully-hydrated tweet objects for up to 100 tweets per request, as specified by comma-separated values passed to the id parameter.</para>
            <para>Available parameters:</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> id (required)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.Lookup(System.Object)">
            <summary>
            <para>Returns fully-hydrated tweet objects for up to 100 tweets per request, as specified by comma-separated values passed to the id parameter.</para>
            <para>Available parameters:</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> id (required)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.Lookup(System.Collections.Generic.IEnumerable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Returns fully-hydrated tweet objects for up to 100 tweets per request, as specified by comma-separated values passed to the id parameter.</para>
            </summary>
            <param name="id">required.</param>
            <param name="trim_user">optional.</param>
            <param name="include_entities">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.LookupAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns fully-hydrated tweet objects for up to 100 tweets per request, as specified by comma-separated values passed to the id parameter.</para>
            <para>Available parameters:</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> id (required)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.LookupAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns fully-hydrated tweet objects for up to 100 tweets per request, as specified by comma-separated values passed to the id parameter.</para>
            <para>Available parameters:</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> id (required)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.LookupAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns fully-hydrated tweet objects for up to 100 tweets per request, as specified by comma-separated values passed to the id parameter.</para>
            <para>Available parameters:</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> id (required)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.LookupAsync(System.Collections.Generic.IEnumerable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Returns fully-hydrated tweet objects for up to 100 tweets per request, as specified by comma-separated values passed to the id parameter.</para>
            </summary>
            <param name="id">required.</param>
            <param name="trim_user">optional.</param>
            <param name="include_entities">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.LookupMap(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns fully-hydrated tweet objects for up to 100 tweets per request, as specified by comma-separated values passed to the id parameter.</para>
            <para>Available parameters:</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> id (required)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.LookupMap(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns fully-hydrated tweet objects for up to 100 tweets per request, as specified by comma-separated values passed to the id parameter.</para>
            <para>Available parameters:</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> id (required)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.LookupMap(System.Object)">
            <summary>
            <para>Returns fully-hydrated tweet objects for up to 100 tweets per request, as specified by comma-separated values passed to the id parameter.</para>
            <para>Available parameters:</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> id (required)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.LookupMap(System.Collections.Generic.IEnumerable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Returns fully-hydrated tweet objects for up to 100 tweets per request, as specified by comma-separated values passed to the id parameter.</para>
            </summary>
            <param name="id">required.</param>
            <param name="trim_user">optional.</param>
            <param name="include_entities">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.LookupMapAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns fully-hydrated tweet objects for up to 100 tweets per request, as specified by comma-separated values passed to the id parameter.</para>
            <para>Available parameters:</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> id (required)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.LookupMapAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns fully-hydrated tweet objects for up to 100 tweets per request, as specified by comma-separated values passed to the id parameter.</para>
            <para>Available parameters:</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> id (required)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.LookupMapAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns fully-hydrated tweet objects for up to 100 tweets per request, as specified by comma-separated values passed to the id parameter.</para>
            <para>Available parameters:</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> id (required)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.LookupMapAsync(System.Collections.Generic.IEnumerable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Returns fully-hydrated tweet objects for up to 100 tweets per request, as specified by comma-separated values passed to the id parameter.</para>
            </summary>
            <param name="id">required.</param>
            <param name="trim_user">optional.</param>
            <param name="include_entities">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.RetweetersIds(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a collection of up to 100 user IDs belonging to users who have retweeted the tweet specified by the id parameter.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.RetweetersIds(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns a collection of up to 100 user IDs belonging to users who have retweeted the tweet specified by the id parameter.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.RetweetersIds(System.Object)">
            <summary>
            <para>Returns a collection of up to 100 user IDs belonging to users who have retweeted the tweet specified by the id parameter.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.EnumerateRetweetersIds(CoreTweet.EnumerateMode,System.Int64,System.Nullable{System.Int64})">
            <summary>
            <para>Returns a collection of up to 100 user IDs belonging to users who have retweeted the tweet specified by the id parameter.</para>
            </summary>
            <param name="id">required.</param>
            <param name="cursor">semi-optional.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.RetweetersIds(System.Int64,System.Nullable{System.Int64})">
            <summary>
            <para>Returns a collection of up to 100 user IDs belonging to users who have retweeted the tweet specified by the id parameter.</para>
            </summary>
            <param name="id">required.</param>
            <param name="cursor">semi-optional.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.EnumerateRetweetersIds(CoreTweet.EnumerateMode,System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a collection of up to 100 user IDs belonging to users who have retweeted the tweet specified by the id parameter.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.EnumerateRetweetersIds(CoreTweet.EnumerateMode,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns a collection of up to 100 user IDs belonging to users who have retweeted the tweet specified by the id parameter.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.EnumerateRetweetersIds(CoreTweet.EnumerateMode,System.Object)">
            <summary>
            <para>Returns a collection of up to 100 user IDs belonging to users who have retweeted the tweet specified by the id parameter.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="mode">Specify whether enumerating goes to the next page or the previous.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.RetweetersIdsAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a collection of up to 100 user IDs belonging to users who have retweeted the tweet specified by the id parameter.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.RetweetersIdsAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a collection of up to 100 user IDs belonging to users who have retweeted the tweet specified by the id parameter.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.RetweetersIdsAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns a collection of up to 100 user IDs belonging to users who have retweeted the tweet specified by the id parameter.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>long</c> cursor (semi-optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.RetweetersIdsAsync(System.Int64,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a collection of up to 100 user IDs belonging to users who have retweeted the tweet specified by the id parameter.</para>
            </summary>
            <param name="id">required.</param>
            <param name="cursor">semi-optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The IDs.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.Update(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Updates the authenticating user’s current status, also known as Tweeting.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> status (required)</para>
            <para>- <c>long</c> in_reply_to_status_id (optional)</para>
            <para>- <c>bool</c> possibly_sensitive (optional)</para>
            <para>- <c>double</c> lat (optional)</para>
            <para>- <c>double</c> long (optional)</para>
            <para>- <c>string</c> place_id (optional)</para>
            <para>- <c>bool</c> display_coordinates (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> media_ids (optional)</para>
            <para>- <c>string</c> attachment_url (optional)</para>
            <para>- <c>bool</c> auto_populate_reply_metadata (optional)</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> exclude_reply_user_ids (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            <para>- <c>bool</c> enable_dm_commands (optional)</para>
            <para>- <c>bool</c> fail_dm_commands (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The updated status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.Update(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Updates the authenticating user’s current status, also known as Tweeting.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> status (required)</para>
            <para>- <c>long</c> in_reply_to_status_id (optional)</para>
            <para>- <c>bool</c> possibly_sensitive (optional)</para>
            <para>- <c>double</c> lat (optional)</para>
            <para>- <c>double</c> long (optional)</para>
            <para>- <c>string</c> place_id (optional)</para>
            <para>- <c>bool</c> display_coordinates (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> media_ids (optional)</para>
            <para>- <c>string</c> attachment_url (optional)</para>
            <para>- <c>bool</c> auto_populate_reply_metadata (optional)</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> exclude_reply_user_ids (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            <para>- <c>bool</c> enable_dm_commands (optional)</para>
            <para>- <c>bool</c> fail_dm_commands (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The updated status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.Update(System.Object)">
            <summary>
            <para>Updates the authenticating user’s current status, also known as Tweeting.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> status (required)</para>
            <para>- <c>long</c> in_reply_to_status_id (optional)</para>
            <para>- <c>bool</c> possibly_sensitive (optional)</para>
            <para>- <c>double</c> lat (optional)</para>
            <para>- <c>double</c> long (optional)</para>
            <para>- <c>string</c> place_id (optional)</para>
            <para>- <c>bool</c> display_coordinates (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> media_ids (optional)</para>
            <para>- <c>string</c> attachment_url (optional)</para>
            <para>- <c>bool</c> auto_populate_reply_metadata (optional)</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> exclude_reply_user_ids (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            <para>- <c>bool</c> enable_dm_commands (optional)</para>
            <para>- <c>bool</c> fail_dm_commands (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The updated status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.Update(System.String,System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{System.Int64},System.String,System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{System.Int64},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            <para>Updates the authenticating user’s current status, also known as Tweeting.</para>
            </summary>
            <param name="status">required.</param>
            <param name="in_reply_to_status_id">optional.</param>
            <param name="possibly_sensitive">optional.</param>
            <param name="lat">optional.</param>
            <param name="long">optional.</param>
            <param name="place_id">optional.</param>
            <param name="display_coordinates">optional.</param>
            <param name="trim_user">optional.</param>
            <param name="media_ids">optional.</param>
            <param name="attachment_url">optional.</param>
            <param name="auto_populate_reply_metadata">optional.</param>
            <param name="exclude_reply_user_ids">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="enable_dm_commands">optional.</param>
            <param name="fail_dm_commands">optional.</param>
            <returns>The updated status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.UpdateAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Updates the authenticating user’s current status, also known as Tweeting.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> status (required)</para>
            <para>- <c>long</c> in_reply_to_status_id (optional)</para>
            <para>- <c>bool</c> possibly_sensitive (optional)</para>
            <para>- <c>double</c> lat (optional)</para>
            <para>- <c>double</c> long (optional)</para>
            <para>- <c>string</c> place_id (optional)</para>
            <para>- <c>bool</c> display_coordinates (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> media_ids (optional)</para>
            <para>- <c>string</c> attachment_url (optional)</para>
            <para>- <c>bool</c> auto_populate_reply_metadata (optional)</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> exclude_reply_user_ids (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            <para>- <c>bool</c> enable_dm_commands (optional)</para>
            <para>- <c>bool</c> fail_dm_commands (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The updated status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.UpdateAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Updates the authenticating user’s current status, also known as Tweeting.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> status (required)</para>
            <para>- <c>long</c> in_reply_to_status_id (optional)</para>
            <para>- <c>bool</c> possibly_sensitive (optional)</para>
            <para>- <c>double</c> lat (optional)</para>
            <para>- <c>double</c> long (optional)</para>
            <para>- <c>string</c> place_id (optional)</para>
            <para>- <c>bool</c> display_coordinates (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> media_ids (optional)</para>
            <para>- <c>string</c> attachment_url (optional)</para>
            <para>- <c>bool</c> auto_populate_reply_metadata (optional)</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> exclude_reply_user_ids (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            <para>- <c>bool</c> enable_dm_commands (optional)</para>
            <para>- <c>bool</c> fail_dm_commands (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The updated status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.UpdateAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Updates the authenticating user’s current status, also known as Tweeting.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> status (required)</para>
            <para>- <c>long</c> in_reply_to_status_id (optional)</para>
            <para>- <c>bool</c> possibly_sensitive (optional)</para>
            <para>- <c>double</c> lat (optional)</para>
            <para>- <c>double</c> long (optional)</para>
            <para>- <c>string</c> place_id (optional)</para>
            <para>- <c>bool</c> display_coordinates (optional)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> media_ids (optional)</para>
            <para>- <c>string</c> attachment_url (optional)</para>
            <para>- <c>bool</c> auto_populate_reply_metadata (optional)</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> exclude_reply_user_ids (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            <para>- <c>bool</c> enable_dm_commands (optional)</para>
            <para>- <c>bool</c> fail_dm_commands (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The updated status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.UpdateAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{System.Int64},System.String,System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{System.Int64},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            <para>Updates the authenticating user’s current status, also known as Tweeting.</para>
            </summary>
            <param name="status">required.</param>
            <param name="in_reply_to_status_id">optional.</param>
            <param name="possibly_sensitive">optional.</param>
            <param name="lat">optional.</param>
            <param name="long">optional.</param>
            <param name="place_id">optional.</param>
            <param name="display_coordinates">optional.</param>
            <param name="trim_user">optional.</param>
            <param name="media_ids">optional.</param>
            <param name="attachment_url">optional.</param>
            <param name="auto_populate_reply_metadata">optional.</param>
            <param name="exclude_reply_user_ids">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="enable_dm_commands">optional.</param>
            <param name="fail_dm_commands">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The updated status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.UpdateWithMedia(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Updates the authenticating user’s current status and attaches media for upload.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> status (required)</para>
            <para>- <c>Stream</c> media (any one is required)</para>
            <para>- <c>IEnumerable&lt;byte&gt;</c> media (any one is required)</para>
            <para>- <c>FileInfo</c> media (any one is required)</para>
            <para>- <c>bool</c> possibly_sensitive (optional)</para>
            <para>- <c>long</c> in_reply_to_status_id (optional)</para>
            <para>- <c>double</c> lat (optional)</para>
            <para>- <c>double</c> long (optional)</para>
            <para>- <c>string</c> place_id (optional)</para>
            <para>- <c>bool</c> display_coordinates (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The updated status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.UpdateWithMedia(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Updates the authenticating user’s current status and attaches media for upload.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> status (required)</para>
            <para>- <c>Stream</c> media (any one is required)</para>
            <para>- <c>IEnumerable&lt;byte&gt;</c> media (any one is required)</para>
            <para>- <c>FileInfo</c> media (any one is required)</para>
            <para>- <c>bool</c> possibly_sensitive (optional)</para>
            <para>- <c>long</c> in_reply_to_status_id (optional)</para>
            <para>- <c>double</c> lat (optional)</para>
            <para>- <c>double</c> long (optional)</para>
            <para>- <c>string</c> place_id (optional)</para>
            <para>- <c>bool</c> display_coordinates (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The updated status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.UpdateWithMedia(System.Object)">
            <summary>
            <para>Updates the authenticating user’s current status and attaches media for upload.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> status (required)</para>
            <para>- <c>Stream</c> media (any one is required)</para>
            <para>- <c>IEnumerable&lt;byte&gt;</c> media (any one is required)</para>
            <para>- <c>FileInfo</c> media (any one is required)</para>
            <para>- <c>bool</c> possibly_sensitive (optional)</para>
            <para>- <c>long</c> in_reply_to_status_id (optional)</para>
            <para>- <c>double</c> lat (optional)</para>
            <para>- <c>double</c> long (optional)</para>
            <para>- <c>string</c> place_id (optional)</para>
            <para>- <c>bool</c> display_coordinates (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The updated status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.UpdateWithMedia(System.String,System.IO.Stream,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Nullable{System.Boolean})">
            <summary>
            <para>Updates the authenticating user’s current status and attaches media for upload.</para>
            </summary>
            <param name="status">required.</param>
            <param name="media">any one is required.</param>
            <param name="possibly_sensitive">optional.</param>
            <param name="in_reply_to_status_id">optional.</param>
            <param name="lat">optional.</param>
            <param name="long">optional.</param>
            <param name="place_id">optional.</param>
            <param name="display_coordinates">optional.</param>
            <returns>The updated status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.UpdateWithMedia(System.String,System.Collections.Generic.IEnumerable{System.Byte},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Nullable{System.Boolean})">
            <summary>
            <para>Updates the authenticating user’s current status and attaches media for upload.</para>
            </summary>
            <param name="status">required.</param>
            <param name="media">any one is required.</param>
            <param name="possibly_sensitive">optional.</param>
            <param name="in_reply_to_status_id">optional.</param>
            <param name="lat">optional.</param>
            <param name="long">optional.</param>
            <param name="place_id">optional.</param>
            <param name="display_coordinates">optional.</param>
            <returns>The updated status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.UpdateWithMedia(System.String,System.IO.FileInfo,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Nullable{System.Boolean})">
            <summary>
            <para>Updates the authenticating user’s current status and attaches media for upload.</para>
            </summary>
            <param name="status">required.</param>
            <param name="media">any one is required.</param>
            <param name="possibly_sensitive">optional.</param>
            <param name="in_reply_to_status_id">optional.</param>
            <param name="lat">optional.</param>
            <param name="long">optional.</param>
            <param name="place_id">optional.</param>
            <param name="display_coordinates">optional.</param>
            <returns>The updated status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.UpdateWithMediaAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Updates the authenticating user’s current status and attaches media for upload.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> status (required)</para>
            <para>- <c>Stream</c> media (any one is required)</para>
            <para>- <c>IEnumerable&lt;byte&gt;</c> media (any one is required)</para>
            <para>- <c>FileInfo</c> media (any one is required)</para>
            <para>- <c>bool</c> possibly_sensitive (optional)</para>
            <para>- <c>long</c> in_reply_to_status_id (optional)</para>
            <para>- <c>double</c> lat (optional)</para>
            <para>- <c>double</c> long (optional)</para>
            <para>- <c>string</c> place_id (optional)</para>
            <para>- <c>bool</c> display_coordinates (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The updated status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.UpdateWithMediaAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Updates the authenticating user’s current status and attaches media for upload.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> status (required)</para>
            <para>- <c>Stream</c> media (any one is required)</para>
            <para>- <c>IEnumerable&lt;byte&gt;</c> media (any one is required)</para>
            <para>- <c>FileInfo</c> media (any one is required)</para>
            <para>- <c>bool</c> possibly_sensitive (optional)</para>
            <para>- <c>long</c> in_reply_to_status_id (optional)</para>
            <para>- <c>double</c> lat (optional)</para>
            <para>- <c>double</c> long (optional)</para>
            <para>- <c>string</c> place_id (optional)</para>
            <para>- <c>bool</c> display_coordinates (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The updated status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.UpdateWithMediaAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Updates the authenticating user’s current status and attaches media for upload.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> status (required)</para>
            <para>- <c>Stream</c> media (any one is required)</para>
            <para>- <c>IEnumerable&lt;byte&gt;</c> media (any one is required)</para>
            <para>- <c>FileInfo</c> media (any one is required)</para>
            <para>- <c>bool</c> possibly_sensitive (optional)</para>
            <para>- <c>long</c> in_reply_to_status_id (optional)</para>
            <para>- <c>double</c> lat (optional)</para>
            <para>- <c>double</c> long (optional)</para>
            <para>- <c>string</c> place_id (optional)</para>
            <para>- <c>bool</c> display_coordinates (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The updated status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.UpdateWithMediaAsync(System.String,System.IO.Stream,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            <para>Updates the authenticating user’s current status and attaches media for upload.</para>
            </summary>
            <param name="status">required.</param>
            <param name="media">any one is required.</param>
            <param name="possibly_sensitive">optional.</param>
            <param name="in_reply_to_status_id">optional.</param>
            <param name="lat">optional.</param>
            <param name="long">optional.</param>
            <param name="place_id">optional.</param>
            <param name="display_coordinates">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The updated status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.UpdateWithMediaAsync(System.String,System.Collections.Generic.IEnumerable{System.Byte},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            <para>Updates the authenticating user’s current status and attaches media for upload.</para>
            </summary>
            <param name="status">required.</param>
            <param name="media">any one is required.</param>
            <param name="possibly_sensitive">optional.</param>
            <param name="in_reply_to_status_id">optional.</param>
            <param name="lat">optional.</param>
            <param name="long">optional.</param>
            <param name="place_id">optional.</param>
            <param name="display_coordinates">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The updated status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.UpdateWithMediaAsync(System.String,System.IO.FileInfo,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            <para>Updates the authenticating user’s current status and attaches media for upload.</para>
            </summary>
            <param name="status">required.</param>
            <param name="media">any one is required.</param>
            <param name="possibly_sensitive">optional.</param>
            <param name="in_reply_to_status_id">optional.</param>
            <param name="lat">optional.</param>
            <param name="long">optional.</param>
            <param name="place_id">optional.</param>
            <param name="display_coordinates">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The updated status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.Destroy(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Destroys the status specified by the required ID parameter.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The destroyed status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.Destroy(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Destroys the status specified by the required ID parameter.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The destroyed status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.Destroy(System.Object)">
            <summary>
            <para>Destroys the status specified by the required ID parameter.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The destroyed status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.Destroy(System.Int64,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Destroys the status specified by the required ID parameter.</para>
            </summary>
            <param name="id">required.</param>
            <param name="trim_user">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The destroyed status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.DestroyAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Destroys the status specified by the required ID parameter.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The destroyed status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.DestroyAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Destroys the status specified by the required ID parameter.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The destroyed status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.DestroyAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Destroys the status specified by the required ID parameter.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The destroyed status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.DestroyAsync(System.Int64,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Destroys the status specified by the required ID parameter.</para>
            </summary>
            <param name="id">required.</param>
            <param name="trim_user">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The destroyed status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.Retweet(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Retweets a tweet.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The retweeted status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.Retweet(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Retweets a tweet.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The retweeted status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.Retweet(System.Object)">
            <summary>
            <para>Retweets a tweet.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The retweeted status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.Retweet(System.Int64,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Retweets a tweet.</para>
            </summary>
            <param name="id">required.</param>
            <param name="trim_user">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The retweeted status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.RetweetAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Retweets a tweet.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The retweeted status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.RetweetAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Retweets a tweet.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The retweeted status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.RetweetAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Retweets a tweet.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The retweeted status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.RetweetAsync(System.Int64,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Retweets a tweet.</para>
            </summary>
            <param name="id">required.</param>
            <param name="trim_user">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The retweeted status.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.Unretweet(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Untweets a retweeted status.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The original Tweet with retweet details embedded.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.Unretweet(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Untweets a retweeted status.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The original Tweet with retweet details embedded.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.Unretweet(System.Object)">
            <summary>
            <para>Untweets a retweeted status.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The original Tweet with retweet details embedded.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.Unretweet(System.Int64,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Untweets a retweeted status.</para>
            </summary>
            <param name="id">required.</param>
            <param name="trim_user">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The original Tweet with retweet details embedded.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.UnretweetAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Untweets a retweeted status.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The original Tweet with retweet details embedded.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.UnretweetAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Untweets a retweeted status.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The original Tweet with retweet details embedded.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.UnretweetAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Untweets a retweeted status.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>bool</c> trim_user (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The original Tweet with retweet details embedded.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Statuses.UnretweetAsync(System.Int64,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Untweets a retweeted status.</para>
            </summary>
            <param name="id">required.</param>
            <param name="trim_user">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The original Tweet with retweet details embedded.</returns>
        </member>
        <member name="T:CoreTweet.Rest.Trends">
            <summary>
            Provides a set of methods for the wrapper of GET trends.
            </summary>
        </member>
        <member name="M:CoreTweet.Rest.Trends.Available(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the locations that Twitter has trending topic information for.</para>
            <para>Available parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The locations.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Trends.Available(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns the locations that Twitter has trending topic information for.</para>
            <para>Available parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The locations.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Trends.Available(System.Object)">
            <summary>
            <para>Returns the locations that Twitter has trending topic information for.</para>
            <para>Available parameters: Nothing.</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The locations.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Trends.Available">
            <summary>
            <para>Returns the locations that Twitter has trending topic information for.</para>
            </summary>
            <returns>The locations.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Trends.AvailableAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the locations that Twitter has trending topic information for.</para>
            <para>Available parameters:</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The locations.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Trends.AvailableAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns the locations that Twitter has trending topic information for.</para>
            <para>Available parameters:</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The locations.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Trends.AvailableAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns the locations that Twitter has trending topic information for.</para>
            <para>Available parameters:</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The locations.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Trends.AvailableAsync(System.Threading.CancellationToken)">
            <summary>
            <para>Returns the locations that Twitter has trending topic information for.</para>
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The locations.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Trends.Closest(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the locations that Twitter has trending topic information for, closest to a specified location.</para>
            <para>Available parameters:</para>
            <para>- <c>double</c> lat (required)</para>
            <para>- <c>double</c> long (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The locations.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Trends.Closest(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns the locations that Twitter has trending topic information for, closest to a specified location.</para>
            <para>Available parameters:</para>
            <para>- <c>double</c> lat (required)</para>
            <para>- <c>double</c> long (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The locations.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Trends.Closest(System.Object)">
            <summary>
            <para>Returns the locations that Twitter has trending topic information for, closest to a specified location.</para>
            <para>Available parameters:</para>
            <para>- <c>double</c> lat (required)</para>
            <para>- <c>double</c> long (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The locations.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Trends.Closest(System.Double,System.Double)">
            <summary>
            <para>Returns the locations that Twitter has trending topic information for, closest to a specified location.</para>
            </summary>
            <param name="lat">required.</param>
            <param name="long">required.</param>
            <returns>The locations.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Trends.ClosestAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the locations that Twitter has trending topic information for, closest to a specified location.</para>
            <para>Available parameters:</para>
            <para>- <c>double</c> lat (required)</para>
            <para>- <c>double</c> long (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The locations.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Trends.ClosestAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns the locations that Twitter has trending topic information for, closest to a specified location.</para>
            <para>Available parameters:</para>
            <para>- <c>double</c> lat (required)</para>
            <para>- <c>double</c> long (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The locations.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Trends.ClosestAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns the locations that Twitter has trending topic information for, closest to a specified location.</para>
            <para>Available parameters:</para>
            <para>- <c>double</c> lat (required)</para>
            <para>- <c>double</c> long (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The locations.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Trends.ClosestAsync(System.Double,System.Double,System.Threading.CancellationToken)">
            <summary>
            <para>Returns the locations that Twitter has trending topic information for, closest to a specified location.</para>
            </summary>
            <param name="lat">required.</param>
            <param name="long">required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The locations.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Trends.Place(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the top 10 trending topics for a specific id, if trending information is available for it.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>string</c> exclude (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The queries.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Trends.Place(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns the top 10 trending topics for a specific id, if trending information is available for it.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>string</c> exclude (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The queries.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Trends.Place(System.Object)">
            <summary>
            <para>Returns the top 10 trending topics for a specific id, if trending information is available for it.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>string</c> exclude (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The queries.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Trends.Place(System.Int64,System.String)">
            <summary>
            <para>Returns the top 10 trending topics for a specific id, if trending information is available for it.</para>
            </summary>
            <param name="id">required.</param>
            <param name="exclude">optional.</param>
            <returns>The queries.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Trends.PlaceAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the top 10 trending topics for a specific id, if trending information is available for it.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>string</c> exclude (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The queries.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Trends.PlaceAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns the top 10 trending topics for a specific id, if trending information is available for it.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>string</c> exclude (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The queries.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Trends.PlaceAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns the top 10 trending topics for a specific id, if trending information is available for it.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> id (required)</para>
            <para>- <c>string</c> exclude (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The queries.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Trends.PlaceAsync(System.Int64,System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Returns the top 10 trending topics for a specific id, if trending information is available for it.</para>
            </summary>
            <param name="id">required.</param>
            <param name="exclude">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The queries.</returns>
        </member>
        <member name="T:CoreTweet.Rest.Tweets">
            <summary>
            Provides a set of methods for the wrapper of Premium search API.
            </summary>
        </member>
        <member name="M:CoreTweet.Rest.Tweets.Search(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a collection of relevant Tweets matching a specified query.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> product (required)</para>
            <para>- <c>string</c> label (required)</para>
            <para>- <c>string</c> query (required)</para>
            <para>- <c>string</c> tag (optional)</para>
            <para>- <c>string</c> fromDate (optional)</para>
            <para>- <c>string</c> toDate (optional)</para>
            <para>- <c>long</c> maxResults (optional)</para>
            <para>- <c>string</c> next (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Tweets.Search(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns a collection of relevant Tweets matching a specified query.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> product (required)</para>
            <para>- <c>string</c> label (required)</para>
            <para>- <c>string</c> query (required)</para>
            <para>- <c>string</c> tag (optional)</para>
            <para>- <c>string</c> fromDate (optional)</para>
            <para>- <c>string</c> toDate (optional)</para>
            <para>- <c>long</c> maxResults (optional)</para>
            <para>- <c>string</c> next (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Tweets.Search(System.Object)">
            <summary>
            <para>Returns a collection of relevant Tweets matching a specified query.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> product (required)</para>
            <para>- <c>string</c> label (required)</para>
            <para>- <c>string</c> query (required)</para>
            <para>- <c>string</c> tag (optional)</para>
            <para>- <c>string</c> fromDate (optional)</para>
            <para>- <c>string</c> toDate (optional)</para>
            <para>- <c>long</c> maxResults (optional)</para>
            <para>- <c>string</c> next (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Tweets.Search(System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int64},System.String)">
            <summary>
            <para>Returns a collection of relevant Tweets matching a specified query.</para>
            </summary>
            <param name="product">required.</param>
            <param name="label">required.</param>
            <param name="query">required.</param>
            <param name="tag">optional.</param>
            <param name="fromDate">optional.</param>
            <param name="toDate">optional.</param>
            <param name="maxResults">optional.</param>
            <param name="next">optional.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Tweets.SearchAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a collection of relevant Tweets matching a specified query.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> product (required)</para>
            <para>- <c>string</c> label (required)</para>
            <para>- <c>string</c> query (required)</para>
            <para>- <c>string</c> tag (optional)</para>
            <para>- <c>string</c> fromDate (optional)</para>
            <para>- <c>string</c> toDate (optional)</para>
            <para>- <c>long</c> maxResults (optional)</para>
            <para>- <c>string</c> next (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Tweets.SearchAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a collection of relevant Tweets matching a specified query.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> product (required)</para>
            <para>- <c>string</c> label (required)</para>
            <para>- <c>string</c> query (required)</para>
            <para>- <c>string</c> tag (optional)</para>
            <para>- <c>string</c> fromDate (optional)</para>
            <para>- <c>string</c> toDate (optional)</para>
            <para>- <c>long</c> maxResults (optional)</para>
            <para>- <c>string</c> next (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Tweets.SearchAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns a collection of relevant Tweets matching a specified query.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> product (required)</para>
            <para>- <c>string</c> label (required)</para>
            <para>- <c>string</c> query (required)</para>
            <para>- <c>string</c> tag (optional)</para>
            <para>- <c>string</c> fromDate (optional)</para>
            <para>- <c>string</c> toDate (optional)</para>
            <para>- <c>long</c> maxResults (optional)</para>
            <para>- <c>string</c> next (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Tweets.SearchAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int64},System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Returns a collection of relevant Tweets matching a specified query.</para>
            </summary>
            <param name="product">required.</param>
            <param name="label">required.</param>
            <param name="query">required.</param>
            <param name="tag">optional.</param>
            <param name="fromDate">optional.</param>
            <param name="toDate">optional.</param>
            <param name="maxResults">optional.</param>
            <param name="next">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The statuses.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Tweets.Counts(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns counts (data volumes) data for the specified query.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> product (required)</para>
            <para>- <c>string</c> label (required)</para>
            <para>- <c>string</c> query (required)</para>
            <para>- <c>string</c> fromDate (optional)</para>
            <para>- <c>string</c> toDate (optional)</para>
            <para>- <c>Bucket</c> bucket (optional)</para>
            <para>- <c>string</c> next (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses counts.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Tweets.Counts(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns counts (data volumes) data for the specified query.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> product (required)</para>
            <para>- <c>string</c> label (required)</para>
            <para>- <c>string</c> query (required)</para>
            <para>- <c>string</c> fromDate (optional)</para>
            <para>- <c>string</c> toDate (optional)</para>
            <para>- <c>Bucket</c> bucket (optional)</para>
            <para>- <c>string</c> next (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses counts.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Tweets.Counts(System.Object)">
            <summary>
            <para>Returns counts (data volumes) data for the specified query.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> product (required)</para>
            <para>- <c>string</c> label (required)</para>
            <para>- <c>string</c> query (required)</para>
            <para>- <c>string</c> fromDate (optional)</para>
            <para>- <c>string</c> toDate (optional)</para>
            <para>- <c>Bucket</c> bucket (optional)</para>
            <para>- <c>string</c> next (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses counts.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Tweets.Counts(System.String,System.String,System.String,System.String,System.String,System.Nullable{CoreTweet.Bucket},System.String)">
            <summary>
            <para>Returns counts (data volumes) data for the specified query.</para>
            </summary>
            <param name="product">required.</param>
            <param name="label">required.</param>
            <param name="query">required.</param>
            <param name="fromDate">optional.</param>
            <param name="toDate">optional.</param>
            <param name="bucket">optional.</param>
            <param name="next">optional.</param>
            <returns>The statuses counts.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Tweets.CountsAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns counts (data volumes) data for the specified query.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> product (required)</para>
            <para>- <c>string</c> label (required)</para>
            <para>- <c>string</c> query (required)</para>
            <para>- <c>string</c> fromDate (optional)</para>
            <para>- <c>string</c> toDate (optional)</para>
            <para>- <c>Bucket</c> bucket (optional)</para>
            <para>- <c>string</c> next (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The statuses counts.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Tweets.CountsAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns counts (data volumes) data for the specified query.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> product (required)</para>
            <para>- <c>string</c> label (required)</para>
            <para>- <c>string</c> query (required)</para>
            <para>- <c>string</c> fromDate (optional)</para>
            <para>- <c>string</c> toDate (optional)</para>
            <para>- <c>Bucket</c> bucket (optional)</para>
            <para>- <c>string</c> next (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The statuses counts.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Tweets.CountsAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns counts (data volumes) data for the specified query.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> product (required)</para>
            <para>- <c>string</c> label (required)</para>
            <para>- <c>string</c> query (required)</para>
            <para>- <c>string</c> fromDate (optional)</para>
            <para>- <c>string</c> toDate (optional)</para>
            <para>- <c>Bucket</c> bucket (optional)</para>
            <para>- <c>string</c> next (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The statuses counts.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Tweets.CountsAsync(System.String,System.String,System.String,System.String,System.String,System.Nullable{CoreTweet.Bucket},System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Returns counts (data volumes) data for the specified query.</para>
            </summary>
            <param name="product">required.</param>
            <param name="label">required.</param>
            <param name="query">required.</param>
            <param name="fromDate">optional.</param>
            <param name="toDate">optional.</param>
            <param name="bucket">optional.</param>
            <param name="next">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The statuses counts.</returns>
        </member>
        <member name="T:CoreTweet.Rest.Users">
            <summary>
            Provides a set of methods for the wrapper of GET/POST users.
            </summary>
        </member>
        <member name="M:CoreTweet.Rest.Users.Contributees(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a collection of users that the specified user can "contribute" to.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.Contributees(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns a collection of users that the specified user can "contribute" to.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.Contributees(System.Object)">
            <summary>
            <para>Returns a collection of users that the specified user can "contribute" to.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.Contributees(System.Int64,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Returns a collection of users that the specified user can "contribute" to.</para>
            </summary>
            <param name="user_id">any one is required.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.Contributees(System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Returns a collection of users that the specified user can "contribute" to.</para>
            </summary>
            <param name="screen_name">any one is required.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.ContributeesAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a collection of users that the specified user can "contribute" to.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.ContributeesAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a collection of users that the specified user can "contribute" to.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.ContributeesAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns a collection of users that the specified user can "contribute" to.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.ContributeesAsync(System.Int64,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a collection of users that the specified user can "contribute" to.</para>
            </summary>
            <param name="user_id">any one is required.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.ContributeesAsync(System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a collection of users that the specified user can "contribute" to.</para>
            </summary>
            <param name="screen_name">any one is required.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.Contributors(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a collection of users who can contribute to the specified account.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.Contributors(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns a collection of users who can contribute to the specified account.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.Contributors(System.Object)">
            <summary>
            <para>Returns a collection of users who can contribute to the specified account.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.Contributors(System.Int64,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Returns a collection of users who can contribute to the specified account.</para>
            </summary>
            <param name="user_id">any one is required.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.Contributors(System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Returns a collection of users who can contribute to the specified account.</para>
            </summary>
            <param name="screen_name">any one is required.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.ContributorsAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a collection of users who can contribute to the specified account.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.ContributorsAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a collection of users who can contribute to the specified account.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.ContributorsAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns a collection of users who can contribute to the specified account.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> skip_status (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.ContributorsAsync(System.Int64,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a collection of users who can contribute to the specified account.</para>
            </summary>
            <param name="user_id">any one is required.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.ContributorsAsync(System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a collection of users who can contribute to the specified account.</para>
            </summary>
            <param name="screen_name">any one is required.</param>
            <param name="include_entities">optional.</param>
            <param name="skip_status">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.Lookup(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns fully-hydrated user objects for up to 100 users per request, as specified by comma-separated values passed to the user_id and/or screen_name parameters.</para>
            <para>Available parameters:</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> user_id (any one is required)</para>
            <para>- <c>IEnumerable&lt;string&gt;</c> screen_name (any one is required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.Lookup(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns fully-hydrated user objects for up to 100 users per request, as specified by comma-separated values passed to the user_id and/or screen_name parameters.</para>
            <para>Available parameters:</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> user_id (any one is required)</para>
            <para>- <c>IEnumerable&lt;string&gt;</c> screen_name (any one is required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.Lookup(System.Object)">
            <summary>
            <para>Returns fully-hydrated user objects for up to 100 users per request, as specified by comma-separated values passed to the user_id and/or screen_name parameters.</para>
            <para>Available parameters:</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> user_id (any one is required)</para>
            <para>- <c>IEnumerable&lt;string&gt;</c> screen_name (any one is required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.Lookup(System.Collections.Generic.IEnumerable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Returns fully-hydrated user objects for up to 100 users per request, as specified by comma-separated values passed to the user_id and/or screen_name parameters.</para>
            </summary>
            <param name="user_id">any one is required.</param>
            <param name="include_entities">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.Lookup(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Returns fully-hydrated user objects for up to 100 users per request, as specified by comma-separated values passed to the user_id and/or screen_name parameters.</para>
            </summary>
            <param name="screen_name">any one is required.</param>
            <param name="include_entities">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.LookupAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns fully-hydrated user objects for up to 100 users per request, as specified by comma-separated values passed to the user_id and/or screen_name parameters.</para>
            <para>Available parameters:</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> user_id (any one is required)</para>
            <para>- <c>IEnumerable&lt;string&gt;</c> screen_name (any one is required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.LookupAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns fully-hydrated user objects for up to 100 users per request, as specified by comma-separated values passed to the user_id and/or screen_name parameters.</para>
            <para>Available parameters:</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> user_id (any one is required)</para>
            <para>- <c>IEnumerable&lt;string&gt;</c> screen_name (any one is required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.LookupAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns fully-hydrated user objects for up to 100 users per request, as specified by comma-separated values passed to the user_id and/or screen_name parameters.</para>
            <para>Available parameters:</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> user_id (any one is required)</para>
            <para>- <c>IEnumerable&lt;string&gt;</c> screen_name (any one is required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.LookupAsync(System.Collections.Generic.IEnumerable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Returns fully-hydrated user objects for up to 100 users per request, as specified by comma-separated values passed to the user_id and/or screen_name parameters.</para>
            </summary>
            <param name="user_id">any one is required.</param>
            <param name="include_entities">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.LookupAsync(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Returns fully-hydrated user objects for up to 100 users per request, as specified by comma-separated values passed to the user_id and/or screen_name parameters.</para>
            </summary>
            <param name="screen_name">any one is required.</param>
            <param name="include_entities">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.ProfileBanner(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the size of the specified user's profile banner.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The sizes.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.ProfileBanner(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns the size of the specified user's profile banner.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The sizes.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.ProfileBanner(System.Object)">
            <summary>
            <para>Returns the size of the specified user's profile banner.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The sizes.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.ProfileBanner(System.Int64)">
            <summary>
            <para>Returns the size of the specified user's profile banner.</para>
            </summary>
            <param name="user_id">any one is required.</param>
            <returns>The sizes.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.ProfileBanner(System.String)">
            <summary>
            <para>Returns the size of the specified user's profile banner.</para>
            </summary>
            <param name="screen_name">any one is required.</param>
            <returns>The sizes.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.ProfileBannerAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the size of the specified user's profile banner.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The sizes.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.ProfileBannerAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns the size of the specified user's profile banner.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The sizes.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.ProfileBannerAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns the size of the specified user's profile banner.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The sizes.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.ProfileBannerAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            <para>Returns the size of the specified user's profile banner.</para>
            </summary>
            <param name="user_id">any one is required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The sizes.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.ProfileBannerAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Returns the size of the specified user's profile banner.</para>
            </summary>
            <param name="screen_name">any one is required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The sizes.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.Search(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Provides a simple, relevance-based search interface to public user accounts on Twitter.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> q (required)</para>
            <para>- <c>int</c> page (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.Search(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Provides a simple, relevance-based search interface to public user accounts on Twitter.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> q (required)</para>
            <para>- <c>int</c> page (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.Search(System.Object)">
            <summary>
            <para>Provides a simple, relevance-based search interface to public user accounts on Twitter.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> q (required)</para>
            <para>- <c>int</c> page (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.Search(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Provides a simple, relevance-based search interface to public user accounts on Twitter.</para>
            </summary>
            <param name="q">required.</param>
            <param name="page">optional.</param>
            <param name="count">optional.</param>
            <param name="include_entities">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.SearchAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Provides a simple, relevance-based search interface to public user accounts on Twitter.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> q (required)</para>
            <para>- <c>int</c> page (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.SearchAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Provides a simple, relevance-based search interface to public user accounts on Twitter.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> q (required)</para>
            <para>- <c>int</c> page (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.SearchAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Provides a simple, relevance-based search interface to public user accounts on Twitter.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> q (required)</para>
            <para>- <c>int</c> page (optional)</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.SearchAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Provides a simple, relevance-based search interface to public user accounts on Twitter.</para>
            </summary>
            <param name="q">required.</param>
            <param name="page">optional.</param>
            <param name="count">optional.</param>
            <param name="include_entities">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.Show(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a variety of information about the user specified by the required user_id or screen_name parameter.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.Show(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns a variety of information about the user specified by the required user_id or screen_name parameter.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.Show(System.Object)">
            <summary>
            <para>Returns a variety of information about the user specified by the required user_id or screen_name parameter.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.Show(System.Int64,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Returns a variety of information about the user specified by the required user_id or screen_name parameter.</para>
            </summary>
            <param name="user_id">any one is required.</param>
            <param name="include_entities">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.Show(System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Returns a variety of information about the user specified by the required user_id or screen_name parameter.</para>
            </summary>
            <param name="screen_name">any one is required.</param>
            <param name="include_entities">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.ShowAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a variety of information about the user specified by the required user_id or screen_name parameter.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.ShowAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a variety of information about the user specified by the required user_id or screen_name parameter.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.ShowAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns a variety of information about the user specified by the required user_id or screen_name parameter.</para>
            <para>Available parameters:</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>bool</c> include_entities (optional)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.ShowAsync(System.Int64,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a variety of information about the user specified by the required user_id or screen_name parameter.</para>
            </summary>
            <param name="user_id">any one is required.</param>
            <param name="include_entities">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.ShowAsync(System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a variety of information about the user specified by the required user_id or screen_name parameter.</para>
            </summary>
            <param name="screen_name">any one is required.</param>
            <param name="include_entities">optional.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.Suggestions(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the list of suggested user categories.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> lang (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The categories.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.Suggestions(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns the list of suggested user categories.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> lang (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The categories.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.Suggestions(System.Object)">
            <summary>
            <para>Returns the list of suggested user categories.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> lang (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The categories.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.Suggestions(System.String)">
            <summary>
            <para>Returns the list of suggested user categories.</para>
            </summary>
            <param name="lang">optional.</param>
            <returns>The categories.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.SuggestionsAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns the list of suggested user categories.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> lang (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The categories.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.SuggestionsAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns the list of suggested user categories.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> lang (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The categories.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.SuggestionsAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns the list of suggested user categories.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> lang (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The categories.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.SuggestionsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Returns the list of suggested user categories.</para>
            </summary>
            <param name="lang">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The categories.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.Suggestion(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Access the users in a given category of the Twitter suggested user list.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> lang (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The category.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.Suggestion(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Access the users in a given category of the Twitter suggested user list.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> lang (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The category.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.Suggestion(System.Object)">
            <summary>
            <para>Access the users in a given category of the Twitter suggested user list.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> lang (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The category.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.Suggestion(System.String,System.String)">
            <summary>
            <para>Access the users in a given category of the Twitter suggested user list.</para>
            </summary>
            <param name="slug">required.</param>
            <param name="lang">optional.</param>
            <returns>The category.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.SuggestionAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Access the users in a given category of the Twitter suggested user list.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> lang (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The category.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.SuggestionAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Access the users in a given category of the Twitter suggested user list.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> lang (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The category.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.SuggestionAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Access the users in a given category of the Twitter suggested user list.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> slug (required)</para>
            <para>- <c>string</c> lang (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The category.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.SuggestionAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Access the users in a given category of the Twitter suggested user list.</para>
            </summary>
            <param name="slug">required.</param>
            <param name="lang">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The category.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.SuggestedMembers(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Access the users in a given category of the Twitter suggested user list.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> slug (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.SuggestedMembers(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Access the users in a given category of the Twitter suggested user list.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> slug (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.SuggestedMembers(System.Object)">
            <summary>
            <para>Access the users in a given category of the Twitter suggested user list.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> slug (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.SuggestedMembers(System.String)">
            <summary>
            <para>Access the users in a given category of the Twitter suggested user list.</para>
            </summary>
            <param name="slug">required.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.SuggestedMembersAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Access the users in a given category of the Twitter suggested user list.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> slug (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.SuggestedMembersAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Access the users in a given category of the Twitter suggested user list.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> slug (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.SuggestedMembersAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Access the users in a given category of the Twitter suggested user list.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> slug (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.SuggestedMembersAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Access the users in a given category of the Twitter suggested user list.</para>
            </summary>
            <param name="slug">required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The users.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.ReportSpam(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Report the specified user as a spam account to Twitter.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.ReportSpam(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Report the specified user as a spam account to Twitter.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.ReportSpam(System.Object)">
            <summary>
            <para>Report the specified user as a spam account to Twitter.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.ReportSpam(System.String,System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Report the specified user as a spam account to Twitter.</para>
            </summary>
            <param name="screen_name">any one is required.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.ReportSpam(System.Int64,System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode})">
            <summary>
            <para>Report the specified user as a spam account to Twitter.</para>
            </summary>
            <param name="user_id">any one is required.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.ReportSpamAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Report the specified user as a spam account to Twitter.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.ReportSpamAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Report the specified user as a spam account to Twitter.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.ReportSpamAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Report the specified user as a spam account to Twitter.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> screen_name (any one is required)</para>
            <para>- <c>long</c> user_id (any one is required)</para>
            <para>- <c>bool</c> include_ext_alt_text (optional)</para>
            <para>- <c>TweetMode</c> tweet_mode (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.ReportSpamAsync(System.String,System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Report the specified user as a spam account to Twitter.</para>
            </summary>
            <param name="screen_name">any one is required.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:CoreTweet.Rest.Users.ReportSpamAsync(System.Int64,System.Nullable{System.Boolean},System.Nullable{CoreTweet.TweetMode},System.Threading.CancellationToken)">
            <summary>
            <para>Report the specified user as a spam account to Twitter.</para>
            </summary>
            <param name="user_id">any one is required.</param>
            <param name="include_ext_alt_text">optional.</param>
            <param name="tweet_mode">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The user.</returns>
        </member>
        <member name="T:CoreTweet.Rest.WelcomeMessages">
            <summary>
            Provides a set of methods for the wrapper of GET/POST direct_messages/welcome_messages.
            </summary>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessages.New(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Creates a new Welcome Message that will be stored and sent in the future from the authenticating user in defined circumstances.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> text (required)</para>
            <para>- <c>string</c> quick_reply_type (optional)</para>
            <para>- <c>string</c> attachment_type (optional)</para>
            <para>- <c>long</c> attachment_media_id (optional)</para>
            <para>- <c>string</c> name (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The message template.</returns>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessages.New(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Creates a new Welcome Message that will be stored and sent in the future from the authenticating user in defined circumstances.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> text (required)</para>
            <para>- <c>string</c> quick_reply_type (optional)</para>
            <para>- <c>string</c> attachment_type (optional)</para>
            <para>- <c>long</c> attachment_media_id (optional)</para>
            <para>- <c>string</c> name (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The message template.</returns>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessages.New(System.Object)">
            <summary>
            <para>Creates a new Welcome Message that will be stored and sent in the future from the authenticating user in defined circumstances.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> text (required)</para>
            <para>- <c>string</c> quick_reply_type (optional)</para>
            <para>- <c>string</c> attachment_type (optional)</para>
            <para>- <c>long</c> attachment_media_id (optional)</para>
            <para>- <c>string</c> name (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The message template.</returns>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessages.New(System.String,System.String,System.String,System.Nullable{System.Int64},System.String)">
            <summary>
            <para>Creates a new Welcome Message that will be stored and sent in the future from the authenticating user in defined circumstances.</para>
            </summary>
            <param name="text">required.</param>
            <param name="quick_reply_type">optional.</param>
            <param name="attachment_type">optional.</param>
            <param name="attachment_media_id">optional.</param>
            <param name="name">optional.</param>
            <returns>The message template.</returns>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessages.NewAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Creates a new Welcome Message that will be stored and sent in the future from the authenticating user in defined circumstances.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> text (required)</para>
            <para>- <c>string</c> quick_reply_type (optional)</para>
            <para>- <c>string</c> attachment_type (optional)</para>
            <para>- <c>long</c> attachment_media_id (optional)</para>
            <para>- <c>string</c> name (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The message template.</returns>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessages.NewAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Creates a new Welcome Message that will be stored and sent in the future from the authenticating user in defined circumstances.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> text (required)</para>
            <para>- <c>string</c> quick_reply_type (optional)</para>
            <para>- <c>string</c> attachment_type (optional)</para>
            <para>- <c>long</c> attachment_media_id (optional)</para>
            <para>- <c>string</c> name (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The message template.</returns>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessages.NewAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Creates a new Welcome Message that will be stored and sent in the future from the authenticating user in defined circumstances.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> text (required)</para>
            <para>- <c>string</c> quick_reply_type (optional)</para>
            <para>- <c>string</c> attachment_type (optional)</para>
            <para>- <c>long</c> attachment_media_id (optional)</para>
            <para>- <c>string</c> name (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The message template.</returns>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessages.NewAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Creates a new Welcome Message that will be stored and sent in the future from the authenticating user in defined circumstances.</para>
            </summary>
            <param name="text">required.</param>
            <param name="quick_reply_type">optional.</param>
            <param name="attachment_type">optional.</param>
            <param name="attachment_media_id">optional.</param>
            <param name="name">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The message template.</returns>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessages.List(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a list of Welcome Messages.</para>
            <para>Available parameters:</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>string</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The Welcome Messages.</returns>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessages.List(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns a list of Welcome Messages.</para>
            <para>Available parameters:</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>string</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The Welcome Messages.</returns>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessages.List(System.Object)">
            <summary>
            <para>Returns a list of Welcome Messages.</para>
            <para>Available parameters:</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>string</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The Welcome Messages.</returns>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessages.List(System.Nullable{System.Int32},System.String)">
            <summary>
            <para>Returns a list of Welcome Messages.</para>
            </summary>
            <param name="count">optional.</param>
            <param name="cursor">optional.</param>
            <returns>The Welcome Messages.</returns>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessages.ListAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a list of Welcome Messages.</para>
            <para>Available parameters:</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>string</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The Welcome Messages.</returns>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessages.ListAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a list of Welcome Messages.</para>
            <para>Available parameters:</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>string</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The Welcome Messages.</returns>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessages.ListAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns a list of Welcome Messages.</para>
            <para>Available parameters:</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>string</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The Welcome Messages.</returns>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessages.ListAsync(System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Returns a list of Welcome Messages.</para>
            </summary>
            <param name="count">optional.</param>
            <param name="cursor">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The Welcome Messages.</returns>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessages.Show(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a Welcome Message by the given id.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The Welcome Message.</returns>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessages.Show(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns a Welcome Message by the given id.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The Welcome Message.</returns>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessages.Show(System.Object)">
            <summary>
            <para>Returns a Welcome Message by the given id.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The Welcome Message.</returns>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessages.Show(System.String)">
            <summary>
            <para>Returns a Welcome Message by the given id.</para>
            </summary>
            <param name="id">required.</param>
            <returns>The Welcome Message.</returns>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessages.ShowAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a Welcome Message by the given id.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The Welcome Message.</returns>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessages.ShowAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a Welcome Message by the given id.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The Welcome Message.</returns>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessages.ShowAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns a Welcome Message by the given id.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The Welcome Message.</returns>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessages.ShowAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Returns a Welcome Message by the given id.</para>
            </summary>
            <param name="id">required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The Welcome Message.</returns>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessages.Destroy(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Deletes a Welcome Message by the given id.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessages.Destroy(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Deletes a Welcome Message by the given id.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessages.Destroy(System.Object)">
            <summary>
            <para>Deletes a Welcome Message by the given id.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessages.Destroy(System.String)">
            <summary>
            <para>Deletes a Welcome Message by the given id.</para>
            </summary>
            <param name="id">required.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessages.DestroyAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Deletes a Welcome Message by the given id.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessages.DestroyAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Deletes a Welcome Message by the given id.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessages.DestroyAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Deletes a Welcome Message by the given id.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessages.DestroyAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Deletes a Welcome Message by the given id.</para>
            </summary>
            <param name="id">required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="P:CoreTweet.Rest.WelcomeMessages.Rules">
            <summary>
            Gets the wrapper of direct_messages/welcome_messages/rules.
            </summary>
        </member>
        <member name="T:CoreTweet.Rest.WelcomeMessagesRules">
            <summary>
            Provides a set of methods for the wrapper of GET/POST direct_messages/welcome_messages/Rules.
            </summary>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessagesRules.New(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Creates a new Welcome Message Rule that determines which Welcome Message will be shown in a given conversation.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> welcome_message_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The created Welcome Message Rule.</returns>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessagesRules.New(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Creates a new Welcome Message Rule that determines which Welcome Message will be shown in a given conversation.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> welcome_message_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The created Welcome Message Rule.</returns>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessagesRules.New(System.Object)">
            <summary>
            <para>Creates a new Welcome Message Rule that determines which Welcome Message will be shown in a given conversation.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> welcome_message_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The created Welcome Message Rule.</returns>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessagesRules.New(System.String)">
            <summary>
            <para>Creates a new Welcome Message Rule that determines which Welcome Message will be shown in a given conversation.</para>
            </summary>
            <param name="welcome_message_id">required.</param>
            <returns>The created Welcome Message Rule.</returns>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessagesRules.NewAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Creates a new Welcome Message Rule that determines which Welcome Message will be shown in a given conversation.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> welcome_message_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The created Welcome Message Rule.</returns>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessagesRules.NewAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Creates a new Welcome Message Rule that determines which Welcome Message will be shown in a given conversation.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> welcome_message_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The created Welcome Message Rule.</returns>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessagesRules.NewAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Creates a new Welcome Message Rule that determines which Welcome Message will be shown in a given conversation.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> welcome_message_id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The created Welcome Message Rule.</returns>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessagesRules.NewAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Creates a new Welcome Message Rule that determines which Welcome Message will be shown in a given conversation.</para>
            </summary>
            <param name="welcome_message_id">required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The created Welcome Message Rule.</returns>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessagesRules.List(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a list of Welcome Message Rules.</para>
            <para>Available parameters:</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>string</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The Welcome Message Rules.</returns>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessagesRules.List(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns a list of Welcome Message Rules.</para>
            <para>Available parameters:</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>string</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The Welcome Message Rules.</returns>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessagesRules.List(System.Object)">
            <summary>
            <para>Returns a list of Welcome Message Rules.</para>
            <para>Available parameters:</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>string</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The Welcome Message Rules.</returns>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessagesRules.EnumerateList(System.Nullable{System.Int32},System.String)">
            <summary>
            <para>Returns a list of Welcome Message Rules.</para>
            </summary>
            <param name="count">optional.</param>
            <param name="cursor">optional.</param>
            <returns>The Welcome Message Rules.</returns>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessagesRules.List(System.Nullable{System.Int32},System.String)">
            <summary>
            <para>Returns a list of Welcome Message Rules.</para>
            </summary>
            <param name="count">optional.</param>
            <param name="cursor">optional.</param>
            <returns>The Welcome Message Rules.</returns>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessagesRules.EnumerateList(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a list of Welcome Message Rules.</para>
            <para>Available parameters:</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>string</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The Welcome Message Rules.</returns>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessagesRules.EnumerateList(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns a list of Welcome Message Rules.</para>
            <para>Available parameters:</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>string</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The Welcome Message Rules.</returns>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessagesRules.EnumerateList(System.Object)">
            <summary>
            <para>Returns a list of Welcome Message Rules.</para>
            <para>Available parameters:</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>string</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The Welcome Message Rules.</returns>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessagesRules.ListAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a list of Welcome Message Rules.</para>
            <para>Available parameters:</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>string</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The Welcome Message Rules.</returns>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessagesRules.ListAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a list of Welcome Message Rules.</para>
            <para>Available parameters:</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>string</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The Welcome Message Rules.</returns>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessagesRules.ListAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns a list of Welcome Message Rules.</para>
            <para>Available parameters:</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>string</c> cursor (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The Welcome Message Rules.</returns>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessagesRules.ListAsync(System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Returns a list of Welcome Message Rules.</para>
            </summary>
            <param name="count">optional.</param>
            <param name="cursor">optional.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The Welcome Message Rules.</returns>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessagesRules.Show(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a Welcome Message Rule by the given id.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The Welcome Message Rule.</returns>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessagesRules.Show(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Returns a Welcome Message Rule by the given id.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The Welcome Message Rule.</returns>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessagesRules.Show(System.Object)">
            <summary>
            <para>Returns a Welcome Message Rule by the given id.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The Welcome Message Rule.</returns>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessagesRules.Show(System.String)">
            <summary>
            <para>Returns a Welcome Message Rule by the given id.</para>
            </summary>
            <param name="id">required.</param>
            <returns>The Welcome Message Rule.</returns>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessagesRules.ShowAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Returns a Welcome Message Rule by the given id.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The Welcome Message Rule.</returns>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessagesRules.ShowAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Returns a Welcome Message Rule by the given id.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The Welcome Message Rule.</returns>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessagesRules.ShowAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Returns a Welcome Message Rule by the given id.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The Welcome Message Rule.</returns>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessagesRules.ShowAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Returns a Welcome Message Rule by the given id.</para>
            </summary>
            <param name="id">required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The Welcome Message Rule.</returns>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessagesRules.Destroy(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Deletes a Welcome Message Rule by the given id.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessagesRules.Destroy(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            <para>Deletes a Welcome Message Rule by the given id.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessagesRules.Destroy(System.Object)">
            <summary>
            <para>Deletes a Welcome Message Rule by the given id.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessagesRules.Destroy(System.String)">
            <summary>
            <para>Deletes a Welcome Message Rule by the given id.</para>
            </summary>
            <param name="id">required.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessagesRules.DestroyAsync(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Deletes a Welcome Message Rule by the given id.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessagesRules.DestroyAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            <para>Deletes a Welcome Message Rule by the given id.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessagesRules.DestroyAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            <para>Deletes a Welcome Message Rule by the given id.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> id (required)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:CoreTweet.Rest.WelcomeMessagesRules.DestroyAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Deletes a Welcome Message Rule by the given id.</para>
            </summary>
            <param name="id">required.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="T:CoreTweet.Rest.Mutes">
            <summary>
            Provides a set of methods for the wrapper of GET/POST mutes.
            </summary>
        </member>
        <member name="P:CoreTweet.Rest.Mutes.Users">
            <summary>
            Gets the wrapper of mutes/users.
            </summary>
        </member>
        <member name="T:CoreTweet.Streaming.DisconnectCode">
            <summary>
            Provides disconnect codes in Twitter Streaming API.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.DisconnectCode.Shutdown">
            <summary>
            The feed was shutdown (possibly a machine restart)
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.DisconnectCode.DuplicateStream">
            <summary>
            The same endpoint was connected too many times.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.DisconnectCode.ControlRequest">
            <summary>
            Control streams was used to close a stream (applies to sitestreams).
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.DisconnectCode.Stall">
            <summary>
            The client was reading too slowly and was disconnected by the server.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.DisconnectCode.Normal">
            <summary>
            The client appeared to have initiated a disconnect.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.DisconnectCode.TokenRevoked">
            <summary>
            An oauth token was revoked for a user (applies to site and userstreams).
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.DisconnectCode.AdminLogout">
            <summary>
            The same credentials were used to connect a new stream and the oldest was disconnected.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.DisconnectCode.Reserved">
            <summary>
            <para>Reserved for internal use.</para>
            <para>Will not be delivered to external clients.</para>
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.DisconnectCode.MaxMessageLimit">
            <summary>
            The stream connected with a negative count parameter and was disconnected after all backfill was delivered.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.DisconnectCode.StreamException">
            <summary>
            An internal issue disconnected the stream.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.DisconnectCode.BrokerStall">
            <summary>
            An internal issue disconnected the stream.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.DisconnectCode.ShedLoad">
            <summary>
            <para>The host the stream was connected to became overloaded and streams were disconnected to balance load.</para>
            <para>Reconnect as usual.</para>
            </summary>
        </member>
        <member name="T:CoreTweet.Streaming.EventCode">
            <summary>
            Provides event codes in Twitter Streaming API.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.EventCode.AccessRevoked">
            <summary>
            The user revokes his access token.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.EventCode.Block">
            <summary>
            The user blocks a user.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.EventCode.Unblock">
            <summary>
            The user unblocks a user.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.EventCode.Favorite">
            <summary>
            The user favorites a Tweet.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.EventCode.Unfavorite">
            <summary>
            The user unfavorites a Tweet.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.EventCode.Follow">
            <summary>
            The user follows a user.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.EventCode.Unfollow">
            <summary>
            The user unfollows a user.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.EventCode.ListCreated">
            <summary>
            The user creates a List.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.EventCode.ListDestroyed">
            <summary>
            The user destroys a List.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.EventCode.ListUpdated">
            <summary>
            The user updates a List.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.EventCode.ListMemberAdded">
            <summary>
            The user adds a user to a List.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.EventCode.ListMemberRemoved">
            <summary>
            The user removes a user from a List.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.EventCode.ListUserSubscribed">
            <summary>
            The user subscribes a List.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.EventCode.ListUserUnsubscribed">
            <summary>
            The user unsubscribes a List.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.EventCode.UserUpdate">
            <summary>
            The user updates a List.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.EventCode.Mute">
            <summary>
            The user mutes a user.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.EventCode.Unmute">
            <summary>
            The user unmutes a user.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.EventCode.FavoritedRetweet">
            <summary>
            The user favorites a retweet.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.EventCode.RetweetedRetweet">
            <summary>
            The user retweets a retweet.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.EventCode.QuotedTweet">
            <summary>
            The user quotes a Tweet.
            </summary>
        </member>
        <member name="T:CoreTweet.Streaming.MessageType">
            <summary>
            Provides message types in Twitter Streaming API.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.MessageType.DeleteStatus">
            <summary>
            The message indicates the Tweet has been deleted.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.MessageType.DeleteDirectMessage">
            <summary>
            The message indicates the Direct Message has been deleted.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.MessageType.ScrubGeo">
            <summary>
            The message indicates that geolocated data must be stripped from a range of Tweets.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.MessageType.StatusWithheld">
            <summary>
            The message indicates that the indicated tweet has had their content withheld.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.MessageType.UserWithheld">
            <summary>
            The message indicates that indicated user has had their content withheld.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.MessageType.UserDelete">
            <summary>
            The message indicates that the user has been deleted.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.MessageType.UserUndelete">
            <summary>
            The message indicates that the user has canceled the deletion.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.MessageType.UserSuspend">
            <summary>
            The message indicates that the user has been suspended.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.MessageType.Disconnect">
            <summary>
            The message indicates that the streams may be shut down for a variety of reasons.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.MessageType.Warning">
            <summary>
            <para>The message indicates the current health of the connection.</para>
            <para>This can be only sent when connected to a stream using the stall_warnings parameter.</para>
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.MessageType.Event">
            <summary>
            The message is about non-Tweet events.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.MessageType.Envelopes">
            <summary>
            <para>The message is sent to identify the target of each message.</para>
            <para>In Site Streams, an additional wrapper is placed around every message, except for blank keep-alive lines.</para>
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.MessageType.Create">
            <summary>
            The message is a new Tweet.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.MessageType.DirectMesssage">
            <summary>
            The message is a new Direct Message.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.MessageType.Friends">
            <summary>
            <para>The message is a list of the user's friends.</para>
            <para>Twitter sends a preamble before starting regular message delivery upon establishing a User Stream connection.</para>
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.MessageType.Limit">
            <summary>
            The message indicates that a filtered stream has matched more Tweets than its current rate limit allows to be delivered.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.MessageType.Control">
            <summary>
            The message is sent to modify the Site Streams connection without reconnecting.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.MessageType.RawJson">
            <summary>
            The message is in raw JSON format.
            </summary>
        </member>
        <member name="T:CoreTweet.Streaming.StreamingMessage">
            <summary>
            Represents a streaming message. This class is an abstract class.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.StreamingMessage.Type">
            <summary>
            Gets the type of the message.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.StreamingMessage.Json">
            <summary>
            Gets or sets the raw JSON.
            </summary>
        </member>
        <member name="M:CoreTweet.Streaming.StreamingMessage.GetMessageType">
            <summary>
            Gets the type of the message.
            </summary>
            <returns>The type of the message.</returns>
        </member>
        <member name="M:CoreTweet.Streaming.StreamingMessage.Parse(System.String)">
            <summary>
            Converts the JSON to a <see cref="T:CoreTweet.Streaming.StreamingMessage"/> object.
            </summary>
            <param name="x">The JSON value.</param>
            <returns>The <see cref="T:CoreTweet.Streaming.StreamingMessage"/> object.</returns>
        </member>
        <member name="T:CoreTweet.Streaming.TimestampMessage">
            <summary>
            Represents a streaming message containing a timestamp.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.TimestampMessage.Timestamp">
            <summary>
            Gets or sets the timestamp.
            </summary>
        </member>
        <member name="T:CoreTweet.Streaming.StatusMessage">
            <summary>
            Represents a status message.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.StatusMessage.Status">
            <summary>
            Gets or sets the status.
            </summary>
        </member>
        <member name="M:CoreTweet.Streaming.StatusMessage.GetMessageType">
            <summary>
            Gets the type of the message.
            </summary>
            <returns>The type of the message.</returns>
        </member>
        <member name="T:CoreTweet.Streaming.DirectMessageMessage">
            <summary>
            Represents a Direct message message.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.DirectMessageMessage.DirectMessage">
            <summary>
            The direct message.
            </summary>
            <value>The direct message.</value>
        </member>
        <member name="M:CoreTweet.Streaming.DirectMessageMessage.GetMessageType">
            <summary>
            Gets the type of the message.
            </summary>
            <returns>The type of the message.</returns>
        </member>
        <member name="T:CoreTweet.Streaming.FriendsMessage">
            <summary>
            Represents a message contains ids of friends.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.FriendsMessage.Friends">
            <summary>
            Gets or sets the ids of friends.
            </summary>
        </member>
        <member name="M:CoreTweet.Streaming.FriendsMessage.GetMessageType">
            <summary>
            Gets the type of the message.
            </summary>
            <returns>The type of the message.</returns>
        </member>
        <member name="M:CoreTweet.Streaming.FriendsMessage.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An IEnumerator object that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:CoreTweet.Streaming.LimitMessage">
            <summary>
            Represents the message with the rate limit.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.LimitMessage.Track">
            <summary>
            Gets or sets a total count of the number of undelivered Tweets since the connection was opened.
            </summary>
        </member>
        <member name="M:CoreTweet.Streaming.LimitMessage.GetMessageType">
            <summary>
            Gets the type of the message.
            </summary>
            <returns>The type of the message.</returns>
        </member>
        <member name="T:CoreTweet.Streaming.DeleteMessage">
            <summary>
            Represents a delete message of a status or a direct message.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.DeleteMessage.Id">
            <summary>
            Gets or sets the ID.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.DeleteMessage.UserId">
            <summary>
            Gets or sets the ID of the user.
            </summary>
        </member>
        <member name="M:CoreTweet.Streaming.DeleteMessage.GetMessageType">
            <summary>
            Gets the type of the message.
            </summary>
            <returns>The type of the message.</returns>
        </member>
        <member name="T:CoreTweet.Streaming.ScrubGeoMessage">
            <summary>
            Represents a scrub-get message.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.ScrubGeoMessage.UserId">
            <summary>
            Gets or sets the ID of the user.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.ScrubGeoMessage.UpToStatusId">
            <summary>
            Gets or sets the ID of the status.
            </summary>
        </member>
        <member name="M:CoreTweet.Streaming.ScrubGeoMessage.GetMessageType">
            <summary>
            Gets the type of the message.
            </summary>
            <returns>The type of the message.</returns>
        </member>
        <member name="T:CoreTweet.Streaming.UserWithheldMessage">
            <summary>
            Represents a withheld message.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.UserWithheldMessage.Id">
            <summary>
            Gets or sets the ID.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.UserWithheldMessage.WithheldInCountries">
            <summary>
            Gets or sets the withhelds in countries.
            </summary>
        </member>
        <member name="M:CoreTweet.Streaming.UserWithheldMessage.GetMessageType">
            <summary>
            Gets the type of the message.
            </summary>
            <returns>The type of the message.</returns>
        </member>
        <member name="T:CoreTweet.Streaming.StatusWithheldMessage">
            <summary>
            Represents a withheld message.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.StatusWithheldMessage.Id">
            <summary>
            Gets or sets the ID.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.StatusWithheldMessage.UserId">
            <summary>
            Gets or sets the ID of the user.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.StatusWithheldMessage.WithheldInCountries">
            <summary>
            Gets or sets the withhelds in countries.
            </summary>
        </member>
        <member name="M:CoreTweet.Streaming.StatusWithheldMessage.GetMessageType">
            <summary>
            Gets the type of the message.
            </summary>
            <returns>The type of the message.</returns>
        </member>
        <member name="T:CoreTweet.Streaming.UserMessage">
            <summary>
            Represents a message contains the ID of an user.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.UserMessage.Id">
            <summary>
            Gets or sets the ID of the user.
            </summary>
        </member>
        <member name="M:CoreTweet.Streaming.UserMessage.GetMessageType">
            <summary>
            Gets the type of the message.
            </summary>
            <returns>The type of the message.</returns>
        </member>
        <member name="T:CoreTweet.Streaming.DisconnectMessage">
            <summary>
            Represents the message published when Twitter disconnects the stream.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.DisconnectMessage.Code">
            <summary>
            Gets or sets the disconnect code.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.DisconnectMessage.StreamName">
            <summary>
            Gets or sets the stream name of current stream.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.DisconnectMessage.Reason">
            <summary>
            Gets or sets the human readable message of the reason.
            </summary>
        </member>
        <member name="M:CoreTweet.Streaming.DisconnectMessage.GetMessageType">
            <summary>
            Gets the type of the message.
            </summary>
            <returns>The type of the message.</returns>
        </member>
        <member name="T:CoreTweet.Streaming.WarningMessage">
            <summary>
            Represents a warning message.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.WarningMessage.Code">
            <summary>
            Gets or sets the warning code.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.WarningMessage.Message">
            <summary>
            Gets or sets the warning message.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.WarningMessage.PercentFull">
            <summary>
            Gets or sets the percentage of the stall messages
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.WarningMessage.UserId">
            <summary>
            Gets or sets the target user ID.
            </summary>
        </member>
        <member name="M:CoreTweet.Streaming.WarningMessage.GetMessageType">
            <summary>
            Gets the type of the message.
            </summary>
            <returns>The type of the message.</returns>
        </member>
        <member name="T:CoreTweet.Streaming.EventTargetType">
            <summary>
            Provides the event target type.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.EventTargetType.List">
            <summary>
            The event is about a List.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.EventTargetType.Status">
            <summary>
            The event is about a Tweet.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.EventTargetType.AccessRevocation">
            <summary>
            The event is that the user revoked his access token.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.EventTargetType.Null">
            <summary>
            The event is unknown.
            </summary>
        </member>
        <member name="T:CoreTweet.Streaming.AccessRevocation">
            <summary>
            Represents a revoked token.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.AccessRevocation.ClientApplication">
            <summary>
            The client application.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.AccessRevocation.Token">
            <summary>
            The revoked access token.
            </summary>
        </member>
        <member name="T:CoreTweet.Streaming.ClientApplication">
            <summary>
            Represents a client application.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.ClientApplication.Url">
            <summary>
            Gets or sets the URL of the application's publicly accessible home page.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.ClientApplication.Id">
            <summary>
            Gets or sets the ID.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.ClientApplication.ConsumerKey">
            <summary>
            Gets or sets the consumer key.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.ClientApplication.Name">
            <summary>
            Gets or sets the application name.
            </summary>
        </member>
        <member name="T:CoreTweet.Streaming.EventMessage">
            <summary>
            Represents an event message.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.EventMessage.Target">
            <summary>
            Gets or sets the target user.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.EventMessage.Source">
            <summary>
            Gets or sets the source.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.EventMessage.Event">
            <summary>
            Gets or sets the event code.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.EventMessage.TargetType">
            <summary>
            Gets or sets the type of target.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.EventMessage.TargetStatus">
            <summary>
            Gets or sets the target status.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.EventMessage.TargetList">
            <summary>
            Gets or sets the target List.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.EventMessage.TargetToken">
            <summary>
            Gets or sets the target access token.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.EventMessage.CreatedAt">
            <summary>
            Gets or sets the time when the event happened.
            </summary>
        </member>
        <member name="M:CoreTweet.Streaming.EventMessage.GetMessageType">
            <summary>
            Gets the type of the message.
            </summary>
            <returns>The type of the message.</returns>
        </member>
        <member name="T:CoreTweet.Streaming.EnvelopesMessage">
            <summary>
            Provides an envelopes message.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.EnvelopesMessage.ForUser">
            <summary>
            Gets or sets the ID of the user.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.EnvelopesMessage.Message">
            <summary>
            Gets or sets the message.
            </summary>
        </member>
        <member name="M:CoreTweet.Streaming.EnvelopesMessage.GetMessageType">
            <summary>
            Gets the type of the message.
            </summary>
            <returns>The type of the message.</returns>
        </member>
        <member name="T:CoreTweet.Streaming.ControlMessage">
            <summary>
            Represents a control message.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.ControlMessage.ControlUri">
            <summary>
            Gets or sets the URI.
            </summary>
        </member>
        <member name="M:CoreTweet.Streaming.ControlMessage.GetMessageType">
            <summary>
            Gets the type of the message.
            </summary>
            <returns>The type of the message.</returns>
        </member>
        <member name="T:CoreTweet.Streaming.RawJsonMessage">
            <summary>
            Represents a raw JSON message. This message means an exception was thrown when parsing.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.RawJsonMessage.Exception">
            <summary>
            Gets the exception when parsing.
            </summary>
        </member>
        <member name="M:CoreTweet.Streaming.RawJsonMessage.GetMessageType">
            <summary>
            Gets the type of the message.
            </summary>
            <returns>The type of the message.</returns>
        </member>
        <member name="T:CoreTweet.Streaming.StreamingType">
            <summary>
            Provides the types of the Twitter Streaming API.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.StreamingType.User">
            <summary>
            The user stream.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.StreamingType.Site">
            <summary>
            The site stream.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.StreamingType.Filter">
            <summary>
            The filter stream.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.StreamingType.Sample">
            <summary>
            The sample stream.
            </summary>
        </member>
        <member name="F:CoreTweet.Streaming.StreamingType.Firehose">
            <summary>
            The firehose stream.
            </summary>
        </member>
        <member name="T:CoreTweet.Streaming.StreamingApi">
            <summary>
            Represents the wrapper for the Twitter Streaming API.
            </summary>
        </member>
        <member name="M:CoreTweet.Streaming.StreamingApi.#ctor(CoreTweet.Core.TokensBase)">
            <summary>
            Initializes a new instance of the <see cref="T:CoreTweet.Streaming.StreamingApi"/> class with a specified token.
            </summary>
            <param name="tokens"></param>
        </member>
        <member name="M:CoreTweet.Streaming.StreamingApi.StartStream(CoreTweet.Streaming.StreamingType,CoreTweet.Streaming.StreamingParameters)">
            <summary>
            Starts the Twitter stream.
            </summary>
            <param name="type">Type of streaming.</param>
            <param name="parameters">The parameters of streaming.</param>
            <returns>The stream messages.</returns>
        </member>
        <member name="M:CoreTweet.Streaming.StreamingApi.StartStreamAsync(CoreTweet.Streaming.StreamingType,CoreTweet.Streaming.StreamingParameters,System.Threading.CancellationToken)">
            <summary>
            Starts the Twitter stream asynchronously.
            </summary>
            <param name="type">Type of streaming.</param>
            <param name="parameters">The parameters of streaming.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The stream messages.</returns>
        </member>
        <member name="M:CoreTweet.Streaming.StreamingApi.User(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            Streams messages for a single user.
            <para>Available parameters:</para>
            <para>- <c>string</c> delimited (optional, not affects CoreTweet)</para>
            <para>- <c>bool</c> stall_warnings (optional)</para>
            <para>- <c>string</c> with (optional)</para>
            <para>- <c>string</c> replies (optional)</para>
            <para>- <c>string</c> track (optional)</para>
            <para>- <c>IEnumerable&lt;double&gt;</c> locations (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The stream messages.</returns>
        </member>
        <member name="M:CoreTweet.Streaming.StreamingApi.User(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Streams messages for a single user.
            <para>Available parameters:</para>
            <para>- <c>string</c> delimited (optional, not affects CoreTweet)</para>
            <para>- <c>bool</c> stall_warnings (optional)</para>
            <para>- <c>string</c> with (optional)</para>
            <para>- <c>string</c> replies (optional)</para>
            <para>- <c>string</c> track (optional)</para>
            <para>- <c>IEnumerable&lt;double&gt;</c> locations (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The stream messages.</returns>
        </member>
        <member name="M:CoreTweet.Streaming.StreamingApi.User(System.Object)">
            <summary>
            Streams messages for a single user.
            <para>Available parameters:</para>
            <para>- <c>string</c> delimited (optional, not affects CoreTweet)</para>
            <para>- <c>bool</c> stall_warnings (optional)</para>
            <para>- <c>string</c> with (optional)</para>
            <para>- <c>string</c> replies (optional)</para>
            <para>- <c>string</c> track (optional)</para>
            <para>- <c>IEnumerable&lt;double&gt;</c> locations (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The stream messages.</returns>
        </member>
        <member name="M:CoreTweet.Streaming.StreamingApi.User(System.Nullable{System.Boolean},System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Streams messages for a single user.
            </summary>
            <param name="stall_warnings">Specifies whether stall warnings should be delivered.</param>
            <param name="with">Specifies whether to return information for just the authenticating user, or include messages from accounts the user follows.</param>
            <param name="replies">Specifies whether to return additional &#64;replies.</param>
            <param name="track">Includes additional Tweets matching the specified keywords. Phrases of keywords are specified by a comma-separated list.</param>
            <param name="locations">Includes additional Tweets falling within the specified bounding boxes.</param>
            <returns>The stream messages.</returns>
        </member>
        <member name="M:CoreTweet.Streaming.StreamingApi.Site(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            Streams messages for a set of users.
            <para>Available parameters:</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> follow (required)</para>
            <para>- <c>string</c> delimited (optional, not affects CoreTweet)</para>
            <para>- <c>bool</c> stall_warnings (optional)</para>
            <para>- <c>string</c> with (optional)</para>
            <para>- <c>string</c> replies (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The stream messages.</returns>
        </member>
        <member name="M:CoreTweet.Streaming.StreamingApi.Site(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Streams messages for a set of users.
            <para>Available parameters:</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> follow (required)</para>
            <para>- <c>string</c> delimited (optional, not affects CoreTweet)</para>
            <para>- <c>bool</c> stall_warnings (optional)</para>
            <para>- <c>string</c> with (optional)</para>
            <para>- <c>string</c> replies (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The stream messages.</returns>
        </member>
        <member name="M:CoreTweet.Streaming.StreamingApi.Site(System.Object)">
            <summary>
            Streams messages for a set of users.
            <para>Available parameters:</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> follow (required)</para>
            <para>- <c>string</c> delimited (optional, not affects CoreTweet)</para>
            <para>- <c>bool</c> stall_warnings (optional)</para>
            <para>- <c>string</c> with (optional)</para>
            <para>- <c>string</c> replies (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The stream messages.</returns>
        </member>
        <member name="M:CoreTweet.Streaming.StreamingApi.Site(System.Collections.Generic.IEnumerable{System.Int64},System.Nullable{System.Boolean},System.String,System.String)">
            <summary>
            Streams messages for a set of users.
            </summary>
            <param name="follow">A comma separated list of user IDs, indicating the users to return statuses for in the stream.</param>
            <param name="stall_warnings">Specifies whether stall warnings should be delivered.</param>
            <param name="with">Specifies whether to return information for just the users specified in the follow parameter, or include messages from accounts they follow.</param>
            <param name="replies">Specifies whether to return additional &#64;replies.</param>
            <returns>The stream messages.</returns>
        </member>
        <member name="M:CoreTweet.Streaming.StreamingApi.Filter(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            Returns public statuses that match one or more filter predicates.
            <para>Multiple parameters may be specified which allows most clients to use a single connection to the Streaming API.</para>
            <para>Note: At least one predicate parameter (follow, locations, or track) must be specified.</para>
            <para>Available parameters:</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> follow (optional)</para>
            <para>- <c>string</c> track (optional)</para>
            <para>- <c>IEnumerable&lt;double&gt;</c> locations (optional)</para>
            <para>- <c>string</c> delimited (optional, not affects CoreTweet)</para>
            <para>- <c>bool</c> stall_warnings (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The stream messages.</returns>
        </member>
        <member name="M:CoreTweet.Streaming.StreamingApi.Filter(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Returns public statuses that match one or more filter predicates.
            <para>Multiple parameters may be specified which allows most clients to use a single connection to the Streaming API.</para>
            <para>Note: At least one predicate parameter (follow, locations, or track) must be specified.</para>
            <para>Available parameters:</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> follow (optional)</para>
            <para>- <c>string</c> track (optional)</para>
            <para>- <c>IEnumerable&lt;double&gt;</c> locations (optional)</para>
            <para>- <c>string</c> delimited (optional, not affects CoreTweet)</para>
            <para>- <c>bool</c> stall_warnings (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The stream messages.</returns>
        </member>
        <member name="M:CoreTweet.Streaming.StreamingApi.Filter(System.Object)">
            <summary>
            Returns public statuses that match one or more filter predicates.
            <para>Multiple parameters may be specified which allows most clients to use a single connection to the Streaming API.</para>
            <para>Note: At least one predicate parameter (follow, locations, or track) must be specified.</para>
            <para>Available parameters:</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> follow (optional)</para>
            <para>- <c>string</c> track (optional)</para>
            <para>- <c>IEnumerable&lt;double&gt;</c> locations (optional)</para>
            <para>- <c>string</c> delimited (optional, not affects CoreTweet)</para>
            <para>- <c>bool</c> stall_warnings (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The stream messages.</returns>
        </member>
        <member name="M:CoreTweet.Streaming.StreamingApi.Filter(System.Collections.Generic.IEnumerable{System.Int64},System.String,System.Collections.Generic.IEnumerable{System.Double},System.Nullable{System.Boolean})">
            <summary>
            Returns public statuses that match one or more filter predicates.
            <para>Multiple parameters may be specified which allows most clients to use a single connection to the Streaming API.</para>
            <para>Note: At least one predicate parameter (follow, locations, or track) must be specified.</para>
            </summary>
            <param name="follow">A comma separated list of user IDs, indicating the users to return statuses for in the stream.</param>
            <param name="track">Keywords to track. Phrases of keywords are specified by a comma-separated list.</param>
            <param name="locations">Specifies a set of bounding boxes to track.</param>
            <param name="stall_warnings">Specifies whether stall warnings should be delivered.</param>
            <returns>The stream messages.</returns>
        </member>
        <member name="M:CoreTweet.Streaming.StreamingApi.Sample(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            Returns a small random sample of all public statuses.
            <para>The Tweets returned by the default access level are the same, so if two different clients connect to this endpoint, they will see the same Tweets.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> delimited (optional, not affects CoreTweet)</para>
            <para>- <c>bool</c> stall_warnings (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The stream messages.</returns>
        </member>
        <member name="M:CoreTweet.Streaming.StreamingApi.Sample(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Returns a small random sample of all public statuses.
            <para>The Tweets returned by the default access level are the same, so if two different clients connect to this endpoint, they will see the same Tweets.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> delimited (optional, not affects CoreTweet)</para>
            <para>- <c>bool</c> stall_warnings (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The stream messages.</returns>
        </member>
        <member name="M:CoreTweet.Streaming.StreamingApi.Sample(System.Object)">
            <summary>
            Returns a small random sample of all public statuses.
            <para>The Tweets returned by the default access level are the same, so if two different clients connect to this endpoint, they will see the same Tweets.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> delimited (optional, not affects CoreTweet)</para>
            <para>- <c>bool</c> stall_warnings (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The stream messages.</returns>
        </member>
        <member name="M:CoreTweet.Streaming.StreamingApi.Sample(System.Nullable{System.Boolean})">
            <summary>
            Returns a small random sample of all public statuses.
            <para>The Tweets returned by the default access level are the same, so if two different clients connect to this endpoint, they will see the same Tweets.</para>
            </summary>
            <param name="stall_warnings">Specifies whether stall warnings should be delivered.</param>
            <returns>The stream messages.</returns>
        </member>
        <member name="M:CoreTweet.Streaming.StreamingApi.Firehose(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            Returns all public statuses. Few applications require this level of access.
            <para>Creative use of a combination of other resources and various access levels can satisfy nearly every application use case.</para>
            <para>Available parameters:</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>string</c> delimited (optional, not affects CoreTweet)</para>
            <para>- <c>bool</c> stall_warnings (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The stream messages.</returns>
        </member>
        <member name="M:CoreTweet.Streaming.StreamingApi.Firehose(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Returns all public statuses. Few applications require this level of access.
            <para>Creative use of a combination of other resources and various access levels can satisfy nearly every application use case.</para>
            <para>Available parameters:</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>string</c> delimited (optional, not affects CoreTweet)</para>
            <para>- <c>bool</c> stall_warnings (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The stream messages.</returns>
        </member>
        <member name="M:CoreTweet.Streaming.StreamingApi.Firehose(System.Object)">
            <summary>
            Returns all public statuses. Few applications require this level of access.
            <para>Creative use of a combination of other resources and various access levels can satisfy nearly every application use case.</para>
            <para>Available parameters:</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>string</c> delimited (optional, not affects CoreTweet)</para>
            <para>- <c>bool</c> stall_warnings (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The stream messages.</returns>
        </member>
        <member name="M:CoreTweet.Streaming.StreamingApi.Firehose(System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Returns all public statuses. Few applications require this level of access.
            <para>Creative use of a combination of other resources and various access levels can satisfy nearly every application use case.</para>
            </summary>
            <param name="count">The number of messages to backfill.</param>
            <param name="stall_warnings">Specifies whether stall warnings should be delivered.</param>
            <returns>The stream messages.</returns>
        </member>
        <member name="M:CoreTweet.Streaming.StreamingApi.UserAsObservable(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            Streams messages for a single user.
            <para>Available parameters:</para>
            <para>- <c>string</c> delimited (optional, not affects CoreTweet)</para>
            <para>- <c>bool</c> stall_warnings (optional)</para>
            <para>- <c>string</c> with (optional)</para>
            <para>- <c>string</c> replies (optional)</para>
            <para>- <c>string</c> track (optional)</para>
            <para>- <c>IEnumerable&lt;double&gt;</c> locations (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The stream messages.</returns>
        </member>
        <member name="M:CoreTweet.Streaming.StreamingApi.UserAsObservable(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Streams messages for a single user.
            <para>Available parameters:</para>
            <para>- <c>string</c> delimited (optional, not affects CoreTweet)</para>
            <para>- <c>bool</c> stall_warnings (optional)</para>
            <para>- <c>string</c> with (optional)</para>
            <para>- <c>string</c> replies (optional)</para>
            <para>- <c>string</c> track (optional)</para>
            <para>- <c>IEnumerable&lt;double&gt;</c> locations (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The stream messages.</returns>
        </member>
        <member name="M:CoreTweet.Streaming.StreamingApi.UserAsObservable(System.Object)">
            <summary>
            Streams messages for a single user.
            <para>Available parameters:</para>
            <para>- <c>string</c> delimited (optional, not affects CoreTweet)</para>
            <para>- <c>bool</c> stall_warnings (optional)</para>
            <para>- <c>string</c> with (optional)</para>
            <para>- <c>string</c> replies (optional)</para>
            <para>- <c>string</c> track (optional)</para>
            <para>- <c>IEnumerable&lt;double&gt;</c> locations (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The stream messages.</returns>
        </member>
        <member name="M:CoreTweet.Streaming.StreamingApi.UserAsObservable(System.Nullable{System.Boolean},System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Streams messages for a single user.
            </summary>
            <param name="stall_warnings">Specifies whether stall warnings should be delivered.</param>
            <param name="with">Specifies whether to return information for just the authenticating user, or include messages from accounts the user follows.</param>
            <param name="replies">Specifies whether to return additional &#64;replies.</param>
            <param name="track">Includes additional Tweets matching the specified keywords. Phrases of keywords are specified by a comma-separated list.</param>
            <param name="locations">Includes additional Tweets falling within the specified bounding boxes.</param>
            <returns>The stream messages.</returns>
        </member>
        <member name="M:CoreTweet.Streaming.StreamingApi.SiteAsObservable(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            Streams messages for a set of users.
            <para>Available parameters:</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> follow (required)</para>
            <para>- <c>string</c> delimited (optional, not affects CoreTweet)</para>
            <para>- <c>bool</c> stall_warnings (optional)</para>
            <para>- <c>string</c> with (optional)</para>
            <para>- <c>string</c> replies (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The stream messages.</returns>
        </member>
        <member name="M:CoreTweet.Streaming.StreamingApi.SiteAsObservable(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Streams messages for a set of users.
            <para>Available parameters:</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> follow (required)</para>
            <para>- <c>string</c> delimited (optional, not affects CoreTweet)</para>
            <para>- <c>bool</c> stall_warnings (optional)</para>
            <para>- <c>string</c> with (optional)</para>
            <para>- <c>string</c> replies (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The stream messages.</returns>
        </member>
        <member name="M:CoreTweet.Streaming.StreamingApi.SiteAsObservable(System.Object)">
            <summary>
            Streams messages for a set of users.
            <para>Available parameters:</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> follow (required)</para>
            <para>- <c>string</c> delimited (optional, not affects CoreTweet)</para>
            <para>- <c>bool</c> stall_warnings (optional)</para>
            <para>- <c>string</c> with (optional)</para>
            <para>- <c>string</c> replies (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The stream messages.</returns>
        </member>
        <member name="M:CoreTweet.Streaming.StreamingApi.SiteAsObservable(System.Collections.Generic.IEnumerable{System.Int64},System.Nullable{System.Boolean},System.String,System.String)">
            <summary>
            Streams messages for a set of users.
            </summary>
            <param name="follow">A comma separated list of user IDs, indicating the users to return statuses for in the stream.</param>
            <param name="stall_warnings">Specifies whether stall warnings should be delivered.</param>
            <param name="with">Specifies whether to return information for just the users specified in the follow parameter, or include messages from accounts they follow.</param>
            <param name="replies">Specifies whether to return additional &#64;replies.</param>
            <returns>The stream messages.</returns>
        </member>
        <member name="M:CoreTweet.Streaming.StreamingApi.FilterAsObservable(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            Returns public statuses that match one or more filter predicates.
            <para>Multiple parameters may be specified which allows most clients to use a single connection to the Streaming API.</para>
            <para>Note: At least one predicate parameter (follow, locations, or track) must be specified.</para>
            <para>Available parameters:</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> follow (optional)</para>
            <para>- <c>string</c> track (optional)</para>
            <para>- <c>IEnumerable&lt;double&gt;</c> locations (optional)</para>
            <para>- <c>string</c> delimited (optional, not affects CoreTweet)</para>
            <para>- <c>bool</c> stall_warnings (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The stream messages.</returns>
        </member>
        <member name="M:CoreTweet.Streaming.StreamingApi.FilterAsObservable(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Returns public statuses that match one or more filter predicates.
            <para>Multiple parameters may be specified which allows most clients to use a single connection to the Streaming API.</para>
            <para>Note: At least one predicate parameter (follow, locations, or track) must be specified.</para>
            <para>Available parameters:</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> follow (optional)</para>
            <para>- <c>string</c> track (optional)</para>
            <para>- <c>IEnumerable&lt;double&gt;</c> locations (optional)</para>
            <para>- <c>string</c> delimited (optional, not affects CoreTweet)</para>
            <para>- <c>bool</c> stall_warnings (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The stream messages.</returns>
        </member>
        <member name="M:CoreTweet.Streaming.StreamingApi.FilterAsObservable(System.Object)">
            <summary>
            Returns public statuses that match one or more filter predicates.
            <para>Multiple parameters may be specified which allows most clients to use a single connection to the Streaming API.</para>
            <para>Note: At least one predicate parameter (follow, locations, or track) must be specified.</para>
            <para>Available parameters:</para>
            <para>- <c>IEnumerable&lt;long&gt;</c> follow (optional)</para>
            <para>- <c>string</c> track (optional)</para>
            <para>- <c>IEnumerable&lt;double&gt;</c> locations (optional)</para>
            <para>- <c>string</c> delimited (optional, not affects CoreTweet)</para>
            <para>- <c>bool</c> stall_warnings (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The stream messages.</returns>
        </member>
        <member name="M:CoreTweet.Streaming.StreamingApi.FilterAsObservable(System.Collections.Generic.IEnumerable{System.Int64},System.String,System.Collections.Generic.IEnumerable{System.Double},System.Nullable{System.Boolean})">
            <summary>
            Returns public statuses that match one or more filter predicates.
            <para>Multiple parameters may be specified which allows most clients to use a single connection to the Streaming API.</para>
            <para>Note: At least one predicate parameter (follow, locations, or track) must be specified.</para>
            </summary>
            <param name="follow">A comma separated list of user IDs, indicating the users to return statuses for in the stream.</param>
            <param name="track">Keywords to track. Phrases of keywords are specified by a comma-separated list.</param>
            <param name="locations">Specifies a set of bounding boxes to track.</param>
            <param name="stall_warnings">Specifies whether stall warnings should be delivered.</param>
            <returns>The stream messages.</returns>
        </member>
        <member name="M:CoreTweet.Streaming.StreamingApi.SampleAsObservable(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            Returns a small random sample of all public statuses.
            <para>The Tweets returned by the default access level are the same, so if two different clients connect to this endpoint, they will see the same Tweets.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> delimited (optional, not affects CoreTweet)</para>
            <para>- <c>bool</c> stall_warnings (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The stream messages.</returns>
        </member>
        <member name="M:CoreTweet.Streaming.StreamingApi.SampleAsObservable(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Returns a small random sample of all public statuses.
            <para>The Tweets returned by the default access level are the same, so if two different clients connect to this endpoint, they will see the same Tweets.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> delimited (optional, not affects CoreTweet)</para>
            <para>- <c>bool</c> stall_warnings (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The stream messages.</returns>
        </member>
        <member name="M:CoreTweet.Streaming.StreamingApi.SampleAsObservable(System.Object)">
            <summary>
            Returns a small random sample of all public statuses.
            <para>The Tweets returned by the default access level are the same, so if two different clients connect to this endpoint, they will see the same Tweets.</para>
            <para>Available parameters:</para>
            <para>- <c>string</c> delimited (optional, not affects CoreTweet)</para>
            <para>- <c>bool</c> stall_warnings (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The stream messages.</returns>
        </member>
        <member name="M:CoreTweet.Streaming.StreamingApi.SampleAsObservable(System.Nullable{System.Boolean})">
            <summary>
            Returns a small random sample of all public statuses.
            <para>The Tweets returned by the default access level are the same, so if two different clients connect to this endpoint, they will see the same Tweets.</para>
            </summary>
            <param name="stall_warnings">Specifies whether stall warnings should be delivered.</param>
            <returns>The stream messages.</returns>
        </member>
        <member name="M:CoreTweet.Streaming.StreamingApi.FirehoseAsObservable(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            Returns all public statuses. Few applications require this level of access.
            <para>Creative use of a combination of other resources and various access levels can satisfy nearly every application use case.</para>
            <para>Available parameters:</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>string</c> delimited (optional, not affects CoreTweet)</para>
            <para>- <c>bool</c> stall_warnings (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The stream messages.</returns>
        </member>
        <member name="M:CoreTweet.Streaming.StreamingApi.FirehoseAsObservable(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Returns all public statuses. Few applications require this level of access.
            <para>Creative use of a combination of other resources and various access levels can satisfy nearly every application use case.</para>
            <para>Available parameters:</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>string</c> delimited (optional, not affects CoreTweet)</para>
            <para>- <c>bool</c> stall_warnings (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The stream messages.</returns>
        </member>
        <member name="M:CoreTweet.Streaming.StreamingApi.FirehoseAsObservable(System.Object)">
            <summary>
            Returns all public statuses. Few applications require this level of access.
            <para>Creative use of a combination of other resources and various access levels can satisfy nearly every application use case.</para>
            <para>Available parameters:</para>
            <para>- <c>int</c> count (optional)</para>
            <para>- <c>string</c> delimited (optional, not affects CoreTweet)</para>
            <para>- <c>bool</c> stall_warnings (optional)</para>
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>The stream messages.</returns>
        </member>
        <member name="M:CoreTweet.Streaming.StreamingApi.FirehoseAsObservable(System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Returns all public statuses. Few applications require this level of access.
            <para>Creative use of a combination of other resources and various access levels can satisfy nearly every application use case.</para>
            </summary>
            <param name="count">The number of messages to backfill.</param>
            <param name="stall_warnings">Specifies whether stall warnings should be delivered.</param>
            <returns>The stream messages.</returns>
        </member>
        <member name="T:CoreTweet.Streaming.StreamingParameters">
            <summary>
            Represents the parameters for the Twitter Streaming API.
            </summary>
        </member>
        <member name="P:CoreTweet.Streaming.StreamingParameters.Parameters">
            <summary>
            Gets the raw parameters.
            </summary>
        </member>
        <member name="M:CoreTweet.Streaming.StreamingParameters.#ctor(System.Linq.Expressions.Expression{System.Func{System.String,System.Object}}[])">
            <summary>
            <para>Initializes a new instance of the <see cref="T:CoreTweet.Streaming.StreamingParameters"/> class with a specified option.</para>
            <para>Available parameters: </para>
            <para>*Note: In filter stream, at least one predicate parameter (follow, locations, or track) must be specified.</para>
            <para><c>bool</c> stall_warnings (optional)" : Specifies whether stall warnings should be delivered.</para>
            <para><c>string / IEnumerable&lt;long&gt;</c> follow (optional*, required in site stream, ignored in user stream)</para>
            <para><c>string / IEnumerable&lt;string&gt;</c> track (optional*)</para>
            <para><c>string / IEnumerable&lt;string&gt;</c> location (optional*)</para>
            <para><c>string</c> with (optional)</para>
            </summary>
            <param name="streamingParameters">The streaming parameters.</param>
        </member>
        <member name="M:CoreTweet.Streaming.StreamingParameters.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Initializes a new instance of the <see cref="T:CoreTweet.Streaming.StreamingParameters"/> class with a specified option.
            </summary>
            <param name="streamingParameters">The streaming parameters.</param>
        </member>
        <member name="M:CoreTweet.Streaming.StreamingParameters.Create``1(``0)">
            <summary>
            Initializes a new instance of the <see cref="T:CoreTweet.Streaming.StreamingParameters"/> class with a specified option.
            </summary>
            <param name="streamingParameters">The streaming parameters.</param>
        </member>
        <member name="T:CoreTweet.UploadProgressInfo">
            <summary>
            Contains status information on the progress of a POST request.
            </summary>
        </member>
        <member name="P:CoreTweet.UploadProgressInfo.BytesSent">
            <summary>
            Gets the total number of bytes sent (not accurate).
            If the number is unknown, this value is <c>0</c>.
            </summary>
        </member>
        <member name="P:CoreTweet.UploadProgressInfo.TotalBytesToSend">
            <summary>
            Gets the total number of data bytes to send (not accurate).
            If the number is unknown, this value is <c>null</c>.
            </summary>
        </member>
        <member name="T:CoreTweet.UploadChunkedProgressInfo">
            <summary>
            Contains status information on the progress of <see cref="M:CoreTweet.Rest.Media.UploadChunkedAsync(System.IO.Stream,CoreTweet.UploadMediaType,System.Object,System.Threading.CancellationToken,System.IProgress{CoreTweet.UploadChunkedProgressInfo})"/>.
            </summary>
        </member>
        <member name="P:CoreTweet.UploadChunkedProgressInfo.Stage">
            <summary>
            Gets or sets the step in the progress
            </summary>
        </member>
        <member name="P:CoreTweet.UploadChunkedProgressInfo.BytesSent">
            <summary>
            Gets or sets the total number of bytes sent.
            </summary>
        </member>
        <member name="P:CoreTweet.UploadChunkedProgressInfo.TotalBytesToSend">
            <summary>
            Gets or sets the total number of data bytes to send.
            </summary>
        </member>
        <member name="T:CoreTweet.UploadChunkedProgressStage">
            <summary>
            Indicates the step in the progress for <see cref="M:CoreTweet.Rest.Media.UploadChunkedAsync(System.IO.Stream,CoreTweet.UploadMediaType,System.Object,System.Threading.CancellationToken,System.IProgress{CoreTweet.UploadChunkedProgressInfo})"/>.
            </summary>
        </member>
        <member name="F:CoreTweet.UploadChunkedProgressStage.None">
            <summary>A default value that should not be encountered.</summary>
        </member>
        <member name="F:CoreTweet.UploadChunkedProgressStage.SendingContent">
            <summary>Uploading the media.</summary>
        </member>
        <member name="F:CoreTweet.UploadChunkedProgressStage.Pending">
            <summary>Waiting for Twitter to process the media.</summary>
        </member>
        <member name="F:CoreTweet.UploadChunkedProgressStage.InProgress">
            <summary>Twitter is processing the media.</summary>
        </member>
    </members>
</doc>
